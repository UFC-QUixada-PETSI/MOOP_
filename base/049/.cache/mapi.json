{
    "title": "@049 C\u00f3digos auxiliares para C++",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@049 C\u00f3digos auxiliares para C++</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    ul.task-list{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <link rel=\"stylesheet\" href=\"/tmp/tmpqkavxp2j.css\" />\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"c\u00f3digos-auxiliares-para-c\"><span class=\"citation\"\ndata-cites=\"049\">@049</span> C\u00f3digos auxiliares para C++</h2>\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/049/cover.jpg\"\nalt=\"_\" />\n<figcaption aria-hidden=\"true\">_</figcaption>\n</figure>\n<ul>\n<li>V\u00eddeo explicando as fun\u00e7\u00f5es auxiliares fun\u00e7\u00f5es lambda, template e\nfun\u00e7\u00f5es auxiliares <a href=\"https://youtu.be/u4FwmKEwGBo\">v\u00eddeo</a></li>\n<li>Arquivo para download: <a\nhref=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/049/main.cpp\">main.cpp</a></li>\n</ul>\n<p><a href=\"load\"></a><a\nhref=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/049/main.cpp\"></a><a\nhref=\"fenced:cpp\"></a></p>\n<div class=\"sourceCode\" id=\"cb1\"><pre\nclass=\"sourceCode cpp\"><code class=\"sourceCode cpp\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"pp\">#include </span><span class=\"im\">&lt;iostream&gt;</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"pp\">#include </span><span class=\"im\">&lt;sstream&gt;</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"pp\">#include </span><span class=\"im\">&lt;vector&gt;</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">namespace</span> aux <span class=\"op\">{</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">double</span> <span class=\"kw\">operator</span><span class=\"op\">+(</span><span class=\"bu\">std::</span>string<span class=\"op\"> </span>text<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">std::</span>stringstream<span class=\"op\"> </span>ss<span class=\"op\">(</span>text<span class=\"op\">);</span></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"dt\">double</span> value <span class=\"op\">{};</span></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"op\">(</span>ss <span class=\"op\">&gt;&gt;</span> value<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">return</span> value<span class=\"op\">;</span></span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"op\">}</span></span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">std::</span>cout<span class=\"op\"> &lt;&lt;</span> <span class=\"st\">&quot;fail: (&quot;</span> <span class=\"op\">&lt;&lt;</span> text <span class=\"op\">&lt;&lt;</span> <span class=\"st\">&quot;) is not a number</span><span class=\"sc\">\\n</span><span class=\"st\">&quot;</span><span class=\"op\">;</span></span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"fl\">0.0</span><span class=\"op\">;</span></span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">std::</span>vector<span class=\"op\">&lt;</span><span class=\"bu\">std::</span>string<span class=\"op\">&gt;</span> split<span class=\"op\">(</span><span class=\"bu\">std::</span>string<span class=\"op\"> </span>line<span class=\"op\">,</span> <span class=\"dt\">char</span> delimiter <span class=\"op\">=</span> <span class=\"ch\">&#39; &#39;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">std::</span>stringstream<span class=\"op\"> </span>ss<span class=\"op\">(</span>line<span class=\"op\">);</span></span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">std::</span>vector<span class=\"op\">&lt;</span><span class=\"bu\">std::</span>string<span class=\"op\">&gt;</span> result<span class=\"op\">;</span></span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">std::</span>string<span class=\"op\"> </span>token<span class=\"op\">;</span></span>\n<span id=\"cb1-20\"><a href=\"#cb1-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">while</span> <span class=\"op\">(</span><span class=\"bu\">std::</span>getline<span class=\"op\">(</span>ss<span class=\"op\">,</span> token<span class=\"op\">,</span> delimiter<span class=\"op\">))</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-21\"><a href=\"#cb1-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>            result<span class=\"op\">.</span>push_back<span class=\"op\">(</span>token<span class=\"op\">);</span></span>\n<span id=\"cb1-22\"><a href=\"#cb1-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"op\">}</span></span>\n<span id=\"cb1-23\"><a href=\"#cb1-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> result<span class=\"op\">;</span></span>\n<span id=\"cb1-24\"><a href=\"#cb1-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb1-25\"><a href=\"#cb1-25\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-26\"><a href=\"#cb1-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">template</span> <span class=\"op\">&lt;</span><span class=\"kw\">class</span> T<span class=\"op\">,</span> <span class=\"kw\">class</span> FN<span class=\"op\">&gt;</span> <span class=\"bu\">std::</span>string<span class=\"op\"> </span>join<span class=\"op\">(</span>T container<span class=\"op\">,</span> <span class=\"bu\">std::</span>string<span class=\"op\"> </span>sep<span class=\"op\">,</span> FN fn<span class=\"op\">)</span> <span class=\"op\">{</span> </span>\n<span id=\"cb1-27\"><a href=\"#cb1-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">std::</span>stringstream<span class=\"op\"> </span>ss<span class=\"op\">;</span></span>\n<span id=\"cb1-28\"><a href=\"#cb1-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">for</span> <span class=\"op\">(</span><span class=\"kw\">auto</span> it <span class=\"op\">=</span> container<span class=\"op\">.</span>begin<span class=\"op\">();</span> it <span class=\"op\">!=</span> container<span class=\"op\">.</span>end<span class=\"op\">();</span> <span class=\"op\">++</span>it<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-29\"><a href=\"#cb1-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>            ss <span class=\"op\">&lt;&lt;</span> <span class=\"op\">(</span>it <span class=\"op\">==</span> container<span class=\"op\">.</span>begin<span class=\"op\">()</span> <span class=\"op\">?</span> <span class=\"st\">&quot;&quot;</span> <span class=\"op\">:</span> sep<span class=\"op\">)</span> <span class=\"op\">&lt;&lt;</span> fn<span class=\"op\">(*</span>it<span class=\"op\">);</span></span>\n<span id=\"cb1-30\"><a href=\"#cb1-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"op\">}</span></span>\n<span id=\"cb1-31\"><a href=\"#cb1-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> ss<span class=\"op\">.</span>str<span class=\"op\">();</span></span>\n<span id=\"cb1-32\"><a href=\"#cb1-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb1-33\"><a href=\"#cb1-33\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-34\"><a href=\"#cb1-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">template</span> <span class=\"op\">&lt;</span><span class=\"kw\">class</span> T<span class=\"op\">&gt;</span> <span class=\"bu\">std::</span>string<span class=\"op\"> </span>join<span class=\"op\">(</span>T container<span class=\"op\">,</span> <span class=\"bu\">std::</span>string<span class=\"op\"> </span>sep <span class=\"op\">=</span> <span class=\"st\">&quot;, &quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-35\"><a href=\"#cb1-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> join<span class=\"op\">(</span>container<span class=\"op\">,</span> sep<span class=\"op\">,</span> <span class=\"op\">[](</span><span class=\"kw\">auto</span> item<span class=\"op\">)</span> <span class=\"op\">{</span> <span class=\"cf\">return</span> item<span class=\"op\">;</span> <span class=\"op\">});</span></span>\n<span id=\"cb1-36\"><a href=\"#cb1-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb1-37\"><a href=\"#cb1-37\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-38\"><a href=\"#cb1-38\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">std::</span>string<span class=\"op\"> </span>input<span class=\"op\">()</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-39\"><a href=\"#cb1-39\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">std::</span>string<span class=\"op\"> </span>line<span class=\"op\">;</span></span>\n<span id=\"cb1-40\"><a href=\"#cb1-40\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">std::</span>getline<span class=\"op\">(</span><span class=\"bu\">std::</span>cin<span class=\"op\">,</span> line<span class=\"op\">);</span></span>\n<span id=\"cb1-41\"><a href=\"#cb1-41\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> line<span class=\"op\">;</span></span>\n<span id=\"cb1-42\"><a href=\"#cb1-42\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb1-43\"><a href=\"#cb1-43\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-44\"><a href=\"#cb1-44\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">template</span> <span class=\"op\">&lt;</span><span class=\"kw\">class</span> T<span class=\"op\">&gt;</span> <span class=\"dt\">void</span> write<span class=\"op\">(</span>T data<span class=\"op\">,</span> <span class=\"bu\">std::</span>string<span class=\"op\"> </span>end <span class=\"op\">=</span> <span class=\"st\">&quot;</span><span class=\"sc\">\\n</span><span class=\"st\">&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-45\"><a href=\"#cb1-45\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">std::</span>cout<span class=\"op\"> &lt;&lt;</span> data <span class=\"op\">&lt;&lt;</span> end<span class=\"op\">;</span></span>\n<span id=\"cb1-46\"><a href=\"#cb1-46\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb1-47\"><a href=\"#cb1-47\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span>\n<span id=\"cb1-48\"><a href=\"#cb1-48\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">using</span> <span class=\"kw\">namespace</span> aux<span class=\"op\">;</span></span>\n<span id=\"cb1-49\"><a href=\"#cb1-49\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">using</span> <span class=\"kw\">namespace</span> <span class=\"bu\">std::</span>string_literals<span class=\"op\">;</span></span>\n<span id=\"cb1-50\"><a href=\"#cb1-50\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-51\"><a href=\"#cb1-51\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">int</span> main<span class=\"op\">()</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-52\"><a href=\"#cb1-52\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">std::</span>vector<span class=\"op\">&lt;</span><span class=\"bu\">std::</span>string<span class=\"op\">&gt;</span> vet<span class=\"op\">;</span></span>\n<span id=\"cb1-53\"><a href=\"#cb1-53\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">while</span> <span class=\"op\">(</span><span class=\"kw\">true</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-54\"><a href=\"#cb1-54\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">auto</span> line <span class=\"op\">=</span> input<span class=\"op\">();</span></span>\n<span id=\"cb1-55\"><a href=\"#cb1-55\" aria-hidden=\"true\" tabindex=\"-1\"></a>        write<span class=\"op\">(</span><span class=\"st\">&quot;$&quot;</span> <span class=\"op\">+</span> line<span class=\"op\">);</span></span>\n<span id=\"cb1-56\"><a href=\"#cb1-56\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">auto</span> args <span class=\"op\">=</span> split<span class=\"op\">(</span>line<span class=\"op\">);</span></span>\n<span id=\"cb1-57\"><a href=\"#cb1-57\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-58\"><a href=\"#cb1-58\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"op\">(</span>args<span class=\"op\">[</span><span class=\"dv\">0</span><span class=\"op\">]</span> <span class=\"op\">==</span> <span class=\"st\">&quot;end&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-59\"><a href=\"#cb1-59\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">break</span><span class=\"op\">;</span></span>\n<span id=\"cb1-60\"><a href=\"#cb1-60\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"op\">}</span></span>\n<span id=\"cb1-61\"><a href=\"#cb1-61\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">else</span> <span class=\"cf\">if</span> <span class=\"op\">(</span>args<span class=\"op\">[</span><span class=\"dv\">0</span><span class=\"op\">]</span> <span class=\"op\">==</span> <span class=\"st\">&quot;push&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-62\"><a href=\"#cb1-62\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">for</span> <span class=\"op\">(</span><span class=\"dt\">size_t</span> i <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span> i <span class=\"op\">&lt;</span> args<span class=\"op\">.</span>size<span class=\"op\">();</span> <span class=\"op\">++</span>i<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-63\"><a href=\"#cb1-63\" aria-hidden=\"true\" tabindex=\"-1\"></a>                vet<span class=\"op\">.</span>push_back<span class=\"op\">(</span>args<span class=\"op\">[</span>i<span class=\"op\">]);</span></span>\n<span id=\"cb1-64\"><a href=\"#cb1-64\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"op\">}</span></span>\n<span id=\"cb1-65\"><a href=\"#cb1-65\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"op\">}</span></span>\n<span id=\"cb1-66\"><a href=\"#cb1-66\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">else</span> <span class=\"cf\">if</span> <span class=\"op\">(</span>args<span class=\"op\">[</span><span class=\"dv\">0</span><span class=\"op\">]</span> <span class=\"op\">==</span> <span class=\"st\">&quot;show&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-67\"><a href=\"#cb1-67\" aria-hidden=\"true\" tabindex=\"-1\"></a>            write<span class=\"op\">(</span><span class=\"st\">&quot;[&quot;</span><span class=\"bu\">s</span> <span class=\"op\">+</span> join<span class=\"op\">(</span>vet<span class=\"op\">,</span> <span class=\"st\">&quot;, &quot;</span><span class=\"op\">)</span> <span class=\"op\">+</span> <span class=\"st\">&quot;]&quot;</span><span class=\"op\">);</span></span>\n<span id=\"cb1-68\"><a href=\"#cb1-68\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"op\">}</span></span>\n<span id=\"cb1-69\"><a href=\"#cb1-69\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">else</span> <span class=\"cf\">if</span><span class=\"op\">(</span>args<span class=\"op\">[</span><span class=\"dv\">0</span><span class=\"op\">]</span> <span class=\"op\">==</span> <span class=\"st\">&quot;erase&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-70\"><a href=\"#cb1-70\" aria-hidden=\"true\" tabindex=\"-1\"></a>            vet<span class=\"op\">.</span>erase<span class=\"op\">(</span>vet<span class=\"op\">.</span>begin<span class=\"op\">()</span> <span class=\"op\">+</span> <span class=\"op\">(</span><span class=\"dt\">int</span><span class=\"op\">)</span> <span class=\"op\">+</span>args<span class=\"op\">[</span><span class=\"dv\">1</span><span class=\"op\">]);</span></span>\n<span id=\"cb1-71\"><a href=\"#cb1-71\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"op\">}</span></span>\n<span id=\"cb1-72\"><a href=\"#cb1-72\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">else</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-73\"><a href=\"#cb1-73\" aria-hidden=\"true\" tabindex=\"-1\"></a>            write<span class=\"op\">(</span><span class=\"st\">&quot;fail: invalid command&quot;</span><span class=\"op\">);</span></span>\n<span id=\"cb1-74\"><a href=\"#cb1-74\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"op\">}</span></span>\n<span id=\"cb1-75\"><a href=\"#cb1-75\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb1-76\"><a href=\"#cb1-76\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre></div>\n<p><a href=\"load\"></a></p>\n<h2 id=\"shell\">Shell</h2>\n<pre><code>#__case teste simples\n$show\n[]\n$push 1 4 3 2\n$show\n[1, 4, 3, 2]\n$erase 1\n$show\n[1, 3, 2]</code></pre>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> teste simples\nshow\npush 1 4 3 2\nshow\nerase 1\nshow\n========\n$show\n[]\n$push 1 4 3 2\n$show\n[1, 4, 3, 2]\n$erase 1\n$show\n[1, 3, 2]\n```\n<<<<<<<<\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": []
}
