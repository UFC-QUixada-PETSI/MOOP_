{
    "title": "@motouber: MotoUber com motorista e passageiro",
    "description": "# MotoUber com motorista e passageiro\n\n<!-- toch -->\n[Intro](#intro) | [Guide](#guide) | [Shell](#shell)\n-- | -- | --\n<!-- toch -->\n\n![_](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/motouber/cover.jpg)\n\n## Intro\n\n- Voc\u00ea vai gerenciar um objeto da classe moto que faz corridas com passageiros.\n- A moto pode ter um motorista e pode ter um passageiro.\n- A moto deve registrar o custo atual da corrida.\n- O passageiro deve pagar o motorista quando descer da moto.\n- Motorista e Passageiro s\u00e3o pessoas que tem nome e dinheiro.\n- O passageiro n\u00e3o pode subir na moto se n\u00e3o tiver motorista.\n- Quando o passageiro entra na moto, come\u00e7a a contagem do custo da corrida.\n- Cada km percorrido aumenta o custo da corrida em 1 real.\n- Na hora de desembarcar, o passageiro paga o motorista de acordo com o que foi percorrido.\n- Se n\u00e3o tiver dinheiro suficiente, o passageiro d\u00e1 tudo que tem.\n- O motorista sempre recebe o valor completo da corrida, porque o Uber paga o que falta.\n\n## Guide\n\n- Crie a classe Pessoa com os atributos nome e dinheiro.\n- Crie a classe Moto com os atributos custo, motorista e passageiro.\n- Ambas as classes devem ter atributos privados.\n- Crie os m\u00e9todos que julgar necess\u00e1rio com os devidos modificadores de acesso.\n\n## Shell\n\n```bash\n#TEST_CASE criar\n$show\nCost: 0, Driver: None, Passenger: None\n\n#TEST_CASE inserir motorista\n$setDriver Tobias 50\n$show\nCost: 0, Driver: Tobias:50, Passenger: None\n\n#TEST_CASE inserir passageiro\n$setPass Ana 20\n$show\nCost: 0, Driver: Tobias:50, Passenger: Ana:20\n\n#TEST_CASE subir passageiro\n$drive 10\n$show\nCost: 10, Driver: Tobias:50, Passenger: Ana:20\n\n#TEST_CASE descer passageiro\n$leavePass\nAna:10 left\n\n$show\nCost: 0, Driver: Tobias:60, Passenger: None\n\n$end\n```\n\n---\n\n```bash\n#TEST_CASE criar\n$show\nCost: 0, Driver: None, Passenger: None\n$setDriver Tobias 20\n$show\nCost: 0, Driver: Tobias:20, Passenger: None\n\n$setPass Ana 10\n$show\nCost: 0, Driver: Tobias:20, Passenger: Ana:10\n\n#TEST_CASE Dirigir e Dirigir\n\n$drive 20\n$show\nCost: 20, Driver: Tobias:20, Passenger: Ana:10\n\n$drive 10\n$show\nCost: 30, Driver: Tobias:20, Passenger: Ana:10\n\n#TEST_CASE descer passageiro fiado\n\n$leavePass\nfail: Passenger does not have enough money\nAna:0 left\n\n$show\nCost: 0, Driver: Tobias:50, Passenger: None\n\n$end\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT criar\nshow\nend\n======== EXPECT\n$show\nCost: 0, Driver: None, Passenger: None\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT inserir motorista\nshow\nsetDriver Tobias 50\nshow\nend\n======== EXPECT\n$show\nCost: 0, Driver: None, Passenger: None\n$setDriver Tobias 50\n$show\nCost: 0, Driver: Tobias:50, Passenger: None\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT inserir passageiro\nshow\nsetDriver Tobias 50\nshow\nsetPass Ana 20\nshow\nend\n======== EXPECT\n$show\nCost: 0, Driver: None, Passenger: None\n$setDriver Tobias 50\n$show\nCost: 0, Driver: Tobias:50, Passenger: None\n$setPass Ana 20\n$show\nCost: 0, Driver: Tobias:50, Passenger: Ana:20\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT subir passageiro\nshow\nsetDriver Tobias 50\nshow\nsetPass Ana 20\nshow\ndrive 10\nshow\nend\n======== EXPECT\n$show\nCost: 0, Driver: None, Passenger: None\n$setDriver Tobias 50\n$show\nCost: 0, Driver: Tobias:50, Passenger: None\n$setPass Ana 20\n$show\nCost: 0, Driver: Tobias:50, Passenger: Ana:20\n$drive 10\n$show\nCost: 10, Driver: Tobias:50, Passenger: Ana:20\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT descer passageiro\nshow\nsetDriver Tobias 50\nshow\nsetPass Ana 20\nshow\ndrive 10\nshow\nleavePass\nshow\nend\n======== EXPECT\n$show\nCost: 0, Driver: None, Passenger: None\n$setDriver Tobias 50\n$show\nCost: 0, Driver: Tobias:50, Passenger: None\n$setPass Ana 20\n$show\nCost: 0, Driver: Tobias:50, Passenger: Ana:20\n$drive 10\n$show\nCost: 10, Driver: Tobias:50, Passenger: Ana:20\n$leavePass\nAna:10 left\n$show\nCost: 0, Driver: Tobias:60, Passenger: None\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT criar\nshow\nsetDriver Tobias 20\nshow\nsetPass Ana 10\nshow\nend\n======== EXPECT\n$show\nCost: 0, Driver: None, Passenger: None\n$setDriver Tobias 20\n$show\nCost: 0, Driver: Tobias:20, Passenger: None\n$setPass Ana 10\n$show\nCost: 0, Driver: Tobias:20, Passenger: Ana:10\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Dirigir e Dirigir\nshow\nsetDriver Tobias 20\nshow\nsetPass Ana 10\nshow\ndrive 20\nshow\ndrive 10\nshow\nend\n======== EXPECT\n$show\nCost: 0, Driver: None, Passenger: None\n$setDriver Tobias 20\n$show\nCost: 0, Driver: Tobias:20, Passenger: None\n$setPass Ana 10\n$show\nCost: 0, Driver: Tobias:20, Passenger: Ana:10\n$drive 20\n$show\nCost: 20, Driver: Tobias:20, Passenger: Ana:10\n$drive 10\n$show\nCost: 30, Driver: Tobias:20, Passenger: Ana:10\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT descer passageiro fiado\nshow\nsetDriver Tobias 20\nshow\nsetPass Ana 10\nshow\ndrive 20\nshow\ndrive 10\nshow\nleavePass\nshow\nend\n======== EXPECT\n$show\nCost: 0, Driver: None, Passenger: None\n$setDriver Tobias 20\n$show\nCost: 0, Driver: Tobias:20, Passenger: None\n$setPass Ana 10\n$show\nCost: 0, Driver: Tobias:20, Passenger: Ana:10\n$drive 20\n$show\nCost: 20, Driver: Tobias:20, Passenger: Ana:10\n$drive 10\n$show\nCost: 30, Driver: Tobias:20, Passenger: Ana:10\n$leavePass\nfail: Passenger does not have enough money\nAna:0 left\n$show\nCost: 0, Driver: Tobias:50, Passenger: None\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "function input() { return \"\"; }\nexport {};\n\nfunction main(): void {\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(\" \");\n        const cmd = par[0];\n\n        if (cmd == \"end\") {\n            break;\n        }\n        // else if (cmd == \"show\") { \n        // }\n        // else if (cmd == \"setDriver\") { \n        //     const name = par[1];\n        //     const money = parseInt(par[2]);\n        // }\n        // else if (cmd == \"setPass\") { \n        //     const name = par[1];\n        //     const money = parseInt(par[2]);\n        // }\n        // else if (cmd == \"drive\") { \n        //     const distance = parseInt(par[1]);\n        // }\n        // else if (cmd == \"leavePass\") { \n        // }\n        else {\n            console.log(\"fail: command not found\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.Scanner;\n\npublic class Shell {\n\n    public static void main(String[] args) {\n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            // else if (cmd.equals(\"show\")) { \n            // }\n            // else if (cmd.equals(\"setDriver\")) { \n            //     String name = par[1];\n            //     int money = Integer.parseInt(par[2]);\n            // }\n            // else if (cmd.equals(\"setPass\")) { \n            //     String name = par[1];\n            //     int money = Integer.parseInt(par[2]);\n            // }\n            // else if (cmd.equals(\"drive\")) { \n            //     int distance = Integer.parseInt(par[1]);\n            // }\n            // else if (cmd.equals(\"leavePass\")) { \n            // }\n            else {\n                System.out.println(\"fail: command not found\");\n            }\n        }\n    }\n    static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <sstream>\n#include <memory>\nusing namespace std;\n\n\nint main() {\n\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } \n        // else if (cmd == \"show\") { \n        // }\n        // else if (cmd == \"setDriver\") { \n        //     string name;\n        //     int money;\n        //     ss >> name >> money;\n        // }\n        // else if (cmd == \"setPass\") { \n        //     string name;\n        //     int money;\n        //     ss >> name >> money;\n        // }\n        // else if (cmd == \"drive\") { \n        //     int distance;\n        //     ss >> distance;\n        // }\n        // else if (cmd == \"leavePass\") { \n        // }\n        else {\n            cout << \"fail: command not found\\n\";\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
