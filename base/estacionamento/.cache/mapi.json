{
    "title": "@estacionamento: Cobrando o valor de carros e motos",
    "description": "# Cobrando o valor de carros e motos\n\n<!-- toch -->\n[Intro](#intro) | [Guide](#guide) | [Shell](#shell) | [Draft](#draft)\n-- | -- | -- | --\n<!-- toch -->\n\n![_](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/estacionamento/cover.jpg)\n\n## Intro\n\nO sistema de estacionamento \u00e9 respons\u00e1vel por gerenciar ve\u00edculos em um estacionamento, registrando a entrada e sa\u00edda de ve\u00edculos, calculando o valor a ser pago pelo tempo de perman\u00eancia e fornecendo informa\u00e7\u00f5es sobre os ve\u00edculos estacionados.\n\n- Voc\u00ea deve utilizar heran\u00e7a para construir um sistema para gerenciar um estacionamento de bicicletas, carros e motos.\n- A classe Ve\u00edculo \u00e9 uma classe abstrata que possui os atributos `id`, `entrada` e `tipo`.\n- A classe Ve\u00edculo possui um m\u00e9todo abstrato `calcularValor()` que deve ser implementado pelas classes filhas.\n- A classe Ve\u00edculo possui um m\u00e9todo `toString()`.\n\n### Responsabilidades\n\n- **Registrar Entrada de Ve\u00edculo:**\n  - O sistema deve permitir que novos ve\u00edculos entrem no estacionamento, registrando o tipo de ve\u00edculo e seu identificador.\n  - O tempo de entrada do ve\u00edculo deve ser registrado.\n\n- **Registrar Sa\u00edda de Ve\u00edculo:**\n  - O sistema deve permitir que ve\u00edculos saiam do estacionamento, registrando o tempo de sa\u00edda do ve\u00edculo.\n  - Com base no tempo de entrada e sa\u00edda, o sistema deve calcular o valor a ser pago pelo estacionamento.\n\n- **Calcular Valor a Pagar:**\n  - O valor a ser pago pelo estacionamento \u00e9 calculado com base no tipo de ve\u00edculo estacionado e no tempo de perman\u00eancia.\n  - O c\u00e1lculo do valor varia de acordo com o tipo de ve\u00edculo:\n    - **Bike:** paga R$3 fixos.\n    - **Moto:** paga o valor em minutos dividido por 20.\n    - **Carro:** paga o valor em minutos dividido por 10, mas o valor m\u00ednimo \u00e9 5.00.\n\n- **Obter Lista de Ve\u00edculos Estacionados:**\n  - O sistema deve ser capaz de fornecer uma lista de todos os ve\u00edculos atualmente estacionados, incluindo o tipo de ve\u00edculo, identificador e tempo de entrada.\n\n## Guide\n\n![_](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/estacionamento/diagrama.png)\n\nVoc\u00ea pode controlar o alinhamento e preenchimento com \"_\" que o m\u00e9todo `toString()` deve retornar assim.\n\n```cpp\n//cpp\nvirtual string toString() const {\n    stringstream ss;\n    ss << setw(10) << setfill('_') <<  tipo << \" : \" << setw(10) << setfill('_') << id << \" : \" << entrada;\n    return ss.str();\n}\n```\n\n```java\n//java\n//Em java n\u00e3o existe m\u00e9todo de alinhamento que permite escolher o caracter de preenchimento\n//Ent\u00e3o vamos fazer uma adapta\u00e7\u00e3o\npublic String toString() {\n    return String.format(\n        \"%10s-:-%10s-:-%s\", //alinhar a direita 10 caracteres inserindo espa\u00e7os\n        this.tipo,\n        this.id,\n        this.horaEntrada\n    )\n        .replace(' ', '_') //substituir espa\u00e7o por underline\n        .replace('-', ' '); //substituir h\u00edfen por espa\u00e7o\n}\n```\n\n```ts\n//ts\ntoString(): string {\n    return this.tipo.padStart(10, \"_\") + \" : \" + this.id.padStart(10, \"_\") + \" : \" + this.entrada;\n}\n```\n\n## Shell\n\n```sh\n\n#TEST_CASE entrada bike\n$show\nHora atual: 0\n$tempo 30\n$estacionar bike elias\n$show\n______Bike : _____elias : 30\nHora atual: 30\n\n#TEST_CASE entrada moto\n$tempo 20\n$estacionar moto abc1234\n$show\n______Bike : _____elias : 30\n______Moto : ___abc1234 : 50\nHora atual: 50\n#TEST_CASE entrada carro\n$tempo 50\n$estacionar carro pog1000\n$show\n______Bike : _____elias : 30\n______Moto : ___abc1234 : 50\n_____Carro : ___pog1000 : 100\nHora atual: 100\n$tempo 100\n$estacionar carro uva9999\n$tempo 30\n$show\n______Bike : _____elias : 30\n______Moto : ___abc1234 : 50\n_____Carro : ___pog1000 : 100\n_____Carro : ___uva9999 : 200\nHora atual: 230\n\n#TEST_CASE saida\n$pagar elias\nBike chegou 30 saiu 230. Pagar R$ 3.00\n$pagar abc1234\nMoto chegou 50 saiu 230. Pagar R$ 9.00\n$pagar pog1000\nCarro chegou 100 saiu 230. Pagar R$ 13.00\n$pagar uva9999\nCarro chegou 200 saiu 230. Pagar R$ 5.00\n$end\n```\n\n## Draft\n\n<!-- links .cache/draft -->\n- cpp\n  - [shell.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/estacionamento/.cache/draft/cpp/shell.cpp)\n- java\n  - [Shell.java](https://github.com/qxcodepoo/arcade/blob/master/base/estacionamento/.cache/draft/java/Shell.java)\n- ts\n  - [shell.ts](https://github.com/qxcodepoo/arcade/blob/master/base/estacionamento/.cache/draft/ts/shell.ts)\n<!-- links -->\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT entrada bike\nshow\ntempo 30\nestacionar bike elias\nshow\nend\n======== EXPECT\n$show\nHora atual: 0\n$tempo 30\n$estacionar bike elias\n$show\n______Bike : _____elias : 30\nHora atual: 30\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT entrada moto\nshow\ntempo 30\nestacionar bike elias\nshow\ntempo 20\nestacionar moto abc1234\nshow\nend\n======== EXPECT\n$show\nHora atual: 0\n$tempo 30\n$estacionar bike elias\n$show\n______Bike : _____elias : 30\nHora atual: 30\n$tempo 20\n$estacionar moto abc1234\n$show\n______Bike : _____elias : 30\n______Moto : ___abc1234 : 50\nHora atual: 50\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT entrada carro\nshow\ntempo 30\nestacionar bike elias\nshow\ntempo 20\nestacionar moto abc1234\nshow\ntempo 50\nestacionar carro pog1000\nshow\ntempo 100\nestacionar carro uva9999\ntempo 30\nshow\nend\n======== EXPECT\n$show\nHora atual: 0\n$tempo 30\n$estacionar bike elias\n$show\n______Bike : _____elias : 30\nHora atual: 30\n$tempo 20\n$estacionar moto abc1234\n$show\n______Bike : _____elias : 30\n______Moto : ___abc1234 : 50\nHora atual: 50\n$tempo 50\n$estacionar carro pog1000\n$show\n______Bike : _____elias : 30\n______Moto : ___abc1234 : 50\n_____Carro : ___pog1000 : 100\nHora atual: 100\n$tempo 100\n$estacionar carro uva9999\n$tempo 30\n$show\n______Bike : _____elias : 30\n______Moto : ___abc1234 : 50\n_____Carro : ___pog1000 : 100\n_____Carro : ___uva9999 : 200\nHora atual: 230\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT saida\nshow\ntempo 30\nestacionar bike elias\nshow\ntempo 20\nestacionar moto abc1234\nshow\ntempo 50\nestacionar carro pog1000\nshow\ntempo 100\nestacionar carro uva9999\ntempo 30\nshow\npagar elias\npagar abc1234\npagar pog1000\npagar uva9999\nend\n======== EXPECT\n$show\nHora atual: 0\n$tempo 30\n$estacionar bike elias\n$show\n______Bike : _____elias : 30\nHora atual: 30\n$tempo 20\n$estacionar moto abc1234\n$show\n______Bike : _____elias : 30\n______Moto : ___abc1234 : 50\nHora atual: 50\n$tempo 50\n$estacionar carro pog1000\n$show\n______Bike : _____elias : 30\n______Moto : ___abc1234 : 50\n_____Carro : ___pog1000 : 100\nHora atual: 100\n$tempo 100\n$estacionar carro uva9999\n$tempo 30\n$show\n______Bike : _____elias : 30\n______Moto : ___abc1234 : 50\n_____Carro : ___pog1000 : 100\n_____Carro : ___uva9999 : 200\nHora atual: 230\n$pagar elias\nBike chegou 30 saiu 230. Pagar R$ 3.00\n$pagar abc1234\nMoto chegou 50 saiu 230. Pagar R$ 9.00\n$pagar pog1000\nCarro chegou 100 saiu 230. Pagar R$ 13.00\n$pagar uva9999\nCarro chegou 200 saiu 230. Pagar R$ 5.00\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\nfunction main() {\n\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const args = line.split(\" \");\n        const cmd = args[0];\n\n        if (cmd === \"end\") {\n            break;\n        } else if (cmd === \"show\") {\n        } else if (cmd === \"estacionar\") {\n            // const tipo = args[1];\n            // const id = args[2];\n        } else if (cmd === \"tempo\") {\n            const tempo = +args[1];\n        } else if (cmd === \"pagar\") {\n            // CHAME OS METODOS PAGAR E SAIR\n            // const id = args[1];\n        } else {\n            console.log(\"fail: comando invalido\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.text.DecimalFormat;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class Shell {\n\n    public static void main(String[] a) {\n        while (true) {\n            String line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"show\")) {\n            }\n            else if (cmd.equals(\"init\")) {\n            }\n            else if (cmd.equals(\"estacionar\")) {\n                // var veiculo = par[1];\n                // var id = par[2];\n            }\n            else if (cmd.equals(\"pagar\")) {\n                // CHAME OS METODOS DE PAGAMENTO E SAIDA\n                // var veiculo = par[1];\n            }\n            else if (cmd.equals(\"tempo\")) {\n                // var tempo = Integer.parseInt(par[1]);\n            }\n            else {\n                System.out.println(\"fail: comando inv\u00e1lido\");\n            }\n        }\n    }\n\n    private static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <iomanip>\n\nusing namespace std;\n\nint main() {\n    \n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"show\") {\n        } else if (cmd == \"estacionar\") {\n            // string tipo, id;\n            // ss >> tipo >> id;\n        } else if (cmd == \"tempo\") {\n            // int tempo {};\n            // ss >> tempo;\n        } else if (cmd == \"pagar\") {\n            // string id;\n            // ss >> id;\n        } else {\n            cout << \"fail: comando invalido\" << endl;\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
