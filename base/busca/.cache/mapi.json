{
    "title": "@busca: Estressados Opera\u00e7\u00f5es I",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@busca: Estressados Opera\u00e7\u00f5es I</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Estressados Opera\u00e7\u00f5es I</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n<th><a href=\"#alien\">Alien</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"cover\" src=\"https://gist.github.com/assets/4747652/c22c464a-b797-4bd7-b963-4e4f1ee7f96b\" /></p>\n<hr />\n<h2>Intro</h2>\n<ul>\n<li>Na entrada de um evento de um experimento social, os participantes ganhavam uma pulseira especial que precisavam ficar utilizando.</li>\n<li>A pulseira informava, num pequeno visor, um n\u00famero inteiro que representava o n\u00edvel de stress daquele participante.</li>\n<li>O n\u00famero 1 significava totalmente tranquilo e vai aumentando conforme o stress do participante aumentava at\u00e9 o valor m\u00e1ximo de infinito.</li>\n<li>Para fazer uma representa\u00e7\u00e3o l\u00f3gica de homens e mulheres em um vetor de inteiros, os n\u00fameros positivos representam os homens e os n\u00fameros negativos representam mulheres.</li>\n<li>Precisamos escrever os algoritmos que identifiquem informa\u00e7\u00f5es importantes sobre os participantes da fila.</li>\n</ul>\n<p><strong>Exemplos:</strong></p>\n<ul>\n<li><code>{}</code> equivale a uma fila vazia.</li>\n<li><code>{-1, -50, -99}</code> equivale a uma mulher totalmente tranquila, uma mulher m\u00e9dio estressada e uma mulher extremamente estressada.</li>\n<li><code>{80, 70, 90, -4}</code> equivale a tr\u00eas homens estressados e uma mulher tranquila.</li>\n</ul>\n<p><strong>Fun\u00e7\u00f5es</strong>:</p>\n<ul>\n<li><strong>in</strong>: existe determinado valor na fila?</li>\n<li><strong>index_of</strong>: qual posi\u00e7\u00e3o aparece X na fila pela primeira vez?</li>\n<li><strong>find_if</strong>: qual a posi\u00e7\u00e3o do primeiro valor positivo da fila?</li>\n<li><strong>min_element</strong>: qual a posi\u00e7\u00e3o do menor valor da lista?</li>\n<li><strong>find_min_if</strong>: qual a posi\u00e7\u00e3o do menor valor positivo?</li>\n</ul>\n<hr />\n<h2>Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/busca/.cache/draft/cpp/shell.cpp\">shell.cpp</a></li>\n</ul>\n</li>\n<li>go<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/busca/.cache/draft/go/shell.go\">shell.go</a></li>\n</ul>\n</li>\n<li>java<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/busca/.cache/draft/java/Shell.java\">Shell.java</a></li>\n</ul>\n</li>\n<li>ts<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/busca/.cache/draft/ts/shell.ts\">shell.ts</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n\n<h2>Shell</h2>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE in</span>\n<span class=\"nv\">$in</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,3,4<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nb\">true</span>\n<span class=\"nv\">$in</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,3,5<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nb\">true</span>\n<span class=\"nv\">$in</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,5,9<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"m\">7</span>\n<span class=\"nb\">false</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE index_of</span>\n<span class=\"nv\">$index_of</span><span class=\"w\"> </span><span class=\"o\">[</span>-1,-50,-1,-99<span class=\"o\">]</span><span class=\"w\"> </span>-50\n<span class=\"m\">1</span>\n<span class=\"nv\">$index_of</span><span class=\"w\"> </span><span class=\"o\">[</span>-1,-50,-1,-99<span class=\"o\">]</span><span class=\"w\"> </span>-99\n<span class=\"m\">3</span>\n<span class=\"nv\">$index_of</span><span class=\"w\"> </span><span class=\"o\">[</span>-1,-50,-1,-99<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"m\">10</span>\n-1\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE find_if</span>\n<span class=\"nv\">$find_if</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,3,-1,-50,-1,-99<span class=\"o\">]</span>\n<span class=\"m\">0</span>\n<span class=\"nv\">$find_if</span><span class=\"w\"> </span><span class=\"o\">[</span>-1,-50,-1,-99,-444<span class=\"o\">]</span>\n-1\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE min_element</span>\n<span class=\"nv\">$min_element</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,3,-1,-50,-1,-99<span class=\"o\">]</span>\n<span class=\"m\">5</span>\n<span class=\"nv\">$min_element</span><span class=\"w\"> </span><span class=\"o\">[</span>-1,-50,-1,-99,-444<span class=\"o\">]</span>\n<span class=\"m\">4</span>\n<span class=\"nv\">$min_element</span><span class=\"w\"> </span><span class=\"o\">[</span>-2,5,3,-1,50,-1<span class=\"o\">]</span>\n<span class=\"m\">0</span>\n<span class=\"nv\">$min_element</span><span class=\"w\"> </span><span class=\"o\">[]</span>\n-1\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE find_min_if</span>\n<span class=\"nv\">$find_min_if</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,3,-1,-50,-1,-99<span class=\"o\">]</span>\n<span class=\"m\">1</span>\n<span class=\"nv\">$find_min_if</span><span class=\"w\"> </span><span class=\"o\">[</span>-1,-50,-1,-99,-444<span class=\"o\">]</span>\n-1\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<h2>Alien</h2>\n<p><a href=\"https://www.youtube.com/watch?v=2b3WvsJHa0Y\"><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/busca/../../wiki/images/alien3.jpg\" /></a></p>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT in\nin [1,2,3,4] 4\nin [1,2,3,5] 1\nin [1,2,5,9] 7\nend\n======== EXPECT\n$in [1,2,3,4] 4\ntrue\n$in [1,2,3,5] 1\ntrue\n$in [1,2,5,9] 7\nfalse\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT index_of\nindex_of [-1,-50,-1,-99] -50\nindex_of [-1,-50,-1,-99] -99\nindex_of [-1,-50,-1,-99] 10\nend\n======== EXPECT\n$index_of [-1,-50,-1,-99] -50\n1\n$index_of [-1,-50,-1,-99] -99\n3\n$index_of [-1,-50,-1,-99] 10\n-1\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT find_if\nfind_if [5,3,-1,-50,-1,-99]\nfind_if [-1,-50,-1,-99,-444]\nend\n======== EXPECT\n$find_if [5,3,-1,-50,-1,-99]\n0\n$find_if [-1,-50,-1,-99,-444]\n-1\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT min_element\nmin_element [5,3,-1,-50,-1,-99]\nmin_element [-1,-50,-1,-99,-444]\nmin_element [-2,5,3,-1,50,-1]\nmin_element []\nend\n======== EXPECT\n$min_element [5,3,-1,-50,-1,-99]\n5\n$min_element [-1,-50,-1,-99,-444]\n4\n$min_element [-2,5,3,-1,50,-1]\n0\n$min_element []\n-1\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT find_min_if\nfind_min_if [5,3,-1,-50,-1,-99]\nfind_min_if [-1,-50,-1,-99,-444]\nend\n======== EXPECT\n$find_min_if [5,3,-1,-50,-1,-99]\n1\n$find_min_if [-1,-50,-1,-99,-444]\n-1\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\";\nexport {};\n\nfunction inside(vet: number[], value: number): boolean {\n    return false;\n}\n\nfunction index_of(vet: number[], value: number): number {\n    return 0;\n}\n\nfunction find_if(vet: number[]): number {\n    return 0;\n}\n\nfunction min_element(vet: number[]): number {\n    return 0;\n}\n\nfunction find_min_if(vet: number[]): number {\n    return 0;\n}\n\n\nfunction main() {\n    while (true) {\n        let line = input();\n        console.log(\"$\" + line);\n        \n        let args = line.split(\" \");\n\n        if (args[0] === \"end\")   { \n            break;\n        }\n        else if (args[0] === \"in\"){\n            let result = inside(to_vet(args[1]), +args[2]);\n            console.log(result ? \"true\" : \"false\");\n        }\n        else if (args[0] === \"index_of\"){\n            let result = index_of(to_vet(args[1]), +args[2]);\n            console.log(result);\n        }\n        else if (args[0] === \"find_if\"){\n            let result = find_if(to_vet(args[1]));\n            console.log(result);\n        }\n        else if (args[0] === \"min_element\"){\n            let result = min_element(to_vet(args[1]));\n            console.log(result);\n        }\n        else if (args[0] === \"find_min_if\"){\n            let result = find_min_if(to_vet(args[1]));\n            console.log(result);\n        }\n        else {\n            console.log(\"fail: Comando inv\u00e1lido\");\n        }\n    }\n}\n\nmain();\n\n// Fun\u00e7\u00e3o auxiliar para converter de string para vetor\n// \"[1,2,3,4]\" para [1, 2, 3, 4]\nfunction to_vet(token: string): number[] {\n    let size = token.length;\n    let inside = token.substring(1, size - 1);\n    return inside === \"\" ? [] : inside.split(\",\").map(x => +x)\n}\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.List;\nimport java.util.Arrays;\nimport java.util.Scanner;\nimport java.util.ArrayList;\n\nclass Student {\n    static boolean in(List<Integer> vet, int x) {\n        return false;\n    }\n\n    static int indexOf(List<Integer> vet, int x) {\n        return 0;\n    }\n\n    static int findIf(List<Integer> vet) {\n        return 0;\n    }\n\n    static int minElement(List<Integer> vet) {\n        return 0;\n    }\n\n    static int findMinIf(List<Integer> vet) {\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Rodando o arquivo do estudante\");\n    }\n}\n\n\npublic class Shell {\n    public static void main(String[] _args) {\n        while (true) {\n            String line = scanner.nextLine();\n            System.out.println('$' + line);\n\n            var par = line.split(\" \");\n            var cmd = cmd;\n\n            if (\"end\".equals(cmd)) {\n                break;\n            }\n            else if (\"in\".equals(cmd)) {\n                var array = strToVet(par[1]);\n                var value = Integer.parseInt(par[2]);\n                var result = Student.in(array, value); \n                System.out.println(result ? \"true\" : \"false\");\n            }\n            else if (\"index_of\".equals(cmd)) {\n                var array = strToVet(par[1]);\n                var value = Integer.parseInt(par[2]);\n                var result = Student.indexOf(array, value);\n                System.out.println(\"\" + result);\n            }\n            else if (\"find_if\".equals(cmd)) {\n                var result = Student.findIf(strToVet(par[1]));\n                System.out.println(\"\" + result);\n            }\n            else if (\"min_element\".equals(cmd)) {\n                var result = Student.minElement(strToVet(par[1]));\n                System.out.println(\"\" + result);\n            }\n            else if (\"find_min_if\".equals(cmd)) {\n                var result = Student.findMinIf(strToVet(par[1]));\n                System.out.println(\"\" + result);\n            }\n            else { \n                System.out.println(\"fail: comando invalido\");\n            }\n        }\n    }\n\n    public static List<Integer> strToVet(String s) {\n        if(s.length() == 2) return new ArrayList<>();\n        List<String> parts = Arrays.asList(s.substring(1, s.length() - 1).split(\",\"));\n        List<Integer> result = new ArrayList<>();\n        for (String part : parts)\n            result.add(Integer.parseInt(part.trim()));\n        return result;\n    }\n\n    static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <sstream>\nusing namespace std;\n\ninline bool in(vector<int> vet, int x) {\n    (void) vet;\n    (void) x;\n    return false;\n}\n\ninline int index_of(vector<int> vet, int x) {\n    (void) vet;\n    (void) x;\n    return 0;\n}\n\ninline int find_if(const vector<int>& vet) {\n    (void) vet;\n    return 0;\n}\n\ninline int min_element(const vector<int>& vet) {\n    (void) vet;\n    return 0;\n}\n\ninline int find_min_if(const vector<int>& vet) {\n    (void) vet;\n    return 0;\n}\n\nvector<int> str2vet(string s) {\n    auto sub = s.substr(1, s.size() - 2);\n    stringstream ss(sub);\n    vector<int> vet;\n    string token;\n    while (getline(ss, token, ',')) {\n        vet.push_back(stoi(token));\n    }\n    return vet;\n}\n\nint main() {\n    while (true) {\n        string line, cmd, svet, value;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"in\") {\n            ss >> svet >> value;\n            cout << (in(str2vet(svet), stoi(value)) ? \"true\" : \"false\") << endl;\n        } else if (cmd == \"index_of\") {\n            ss >> svet >> value;\n            cout << index_of(str2vet(svet), stoi(value)) << endl;\n        } else if (cmd == \"find_if\") {\n            ss >> svet;\n            cout << find_if(str2vet(svet)) << endl;\n        } else if (cmd == \"min_element\") {\n            ss >> svet;\n            cout << min_element(str2vet(svet)) << endl;\n        } else if (cmd == \"find_min_if\") {\n            ss >> svet;\n            cout << find_min_if(str2vet(svet)) << endl;\n        } else {\n            cout << \"fail: unknown command\" << endl;\n        }\n    }\n}\n",
                "type": "show"
            }
        ],
        "go": [
            {
                "name": "shell.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc in(vet []int, x int) bool {\n\t_ = vet\n\t_ = x\n\treturn false\n}\n\nfunc indexOf(vet []int, x int) int {\n\t_ = vet\n\t_ = x\n\treturn 0\n}\n\nfunc findIf(vet []int) int {\n\t_ = vet\n\treturn 0\n}\n\nfunc minElement(vet []int) int {\n\t_ = vet\n\treturn 0\n}\n\nfunc findMinIf(vet []int) int {\n\t_ = vet\n\treturn 0\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tfmt.Println(\"$\" + line)\n\t\tparts := strings.Fields(line)\n\t\tif len(parts) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tcmd := parts[0]\n\n\t\tswitch cmd {\n\t\tcase \"end\":\n\t\t\treturn\n\t\tcase \"in\":\n\t\t\tif len(parts) >= 3 {\n\t\t\t\tvet := str2vet(parts[1])\n\t\t\t\tval, _ := strconv.Atoi(parts[2])\n\t\t\t\tif in(vet, val) {\n\t\t\t\t\tfmt.Println(\"true\")\n\t\t\t\t} else {\n\t\t\t\t\tfmt.Println(\"false\")\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"index_of\":\n\t\t\tif len(parts) >= 3 {\n\t\t\t\tvet := str2vet(parts[1])\n\t\t\t\tval, _ := strconv.Atoi(parts[2])\n\t\t\t\tfmt.Println(indexOf(vet, val))\n\t\t\t}\n\t\tcase \"find_if\":\n\t\t\tif len(parts) >= 2 {\n\t\t\t\tvet := str2vet(parts[1])\n\t\t\t\tfmt.Println(findIf(vet))\n\t\t\t}\n\t\tcase \"min_element\":\n\t\t\tif len(parts) >= 2 {\n\t\t\t\tvet := str2vet(parts[1])\n\t\t\t\tfmt.Println(minElement(vet))\n\t\t\t}\n\t\tcase \"find_min_if\":\n\t\t\tif len(parts) >= 2 {\n\t\t\t\tvet := str2vet(parts[1])\n\t\t\t\tfmt.Println(findMinIf(vet))\n\t\t\t}\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: unknown command\")\n\t\t}\n\t}\n}\n\nfunc str2vet(s string) []int {\n\tif s == \"[]\" {\n\t\treturn make([]int, 0)\n\t}\n\tsub := s[1 : len(s)-1]\n\ttokens := strings.Split(sub, \",\")\n\tvet := make([]int, 0, len(tokens))\n\tfor _, token := range tokens {\n\t\tnum, _ := strconv.Atoi(strings.TrimSpace(token))\n\t\tvet = append(vet, num)\n\t}\n\treturn vet\n}\n",
                "type": "show"
            }
        ]
    }
}
