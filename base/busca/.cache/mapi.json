{
    "title": "@busca: Estressados Opera\u00e7\u00f5es I",
    "description": "# Estressados Opera\u00e7\u00f5es I\n\n<!-- toch -->\n[Intro](#intro) | [Draft](#draft) | [Shell](#shell) | [Alien](#alien)\n-- | -- | -- | --\n<!-- toch -->\n\n![cover](https://gist.github.com/assets/4747652/c22c464a-b797-4bd7-b963-4e4f1ee7f96b)\n\n***\n\n## Intro\n\n- Na entrada de um evento de um experimento social, os participantes ganhavam uma pulseira especial que precisavam ficar utilizando.\n- A pulseira informava, num pequeno visor, um n\u00famero inteiro que representava o n\u00edvel de stress daquele participante.\n- O n\u00famero 1 significava totalmente tranquilo e vai aumentando conforme o stress do participante aumentava at\u00e9 o valor m\u00e1ximo de infinito.\n- Para fazer uma representa\u00e7\u00e3o l\u00f3gica de homens e mulheres em um vetor de inteiros, os n\u00fameros positivos representam os homens e os n\u00fameros negativos representam mulheres.\n- Precisamos escrever os algoritmos que identifiquem informa\u00e7\u00f5es importantes sobre os participantes da fila.\n\n**Exemplos:**\n\n- `{}` equivale a uma fila vazia.\n- `{-1, -50, -99}` equivale a uma mulher totalmente tranquila, uma mulher m\u00e9dio estressada e uma mulher extremamente estressada.\n- `{80, 70, 90, -4}` equivale a tr\u00eas homens estressados e uma mulher tranquila.\n\n**Fun\u00e7\u00f5es**:\n\n- **in**: existe determinado valor na fila?\n- **index_of**: qual posi\u00e7\u00e3o aparece X na fila pela primeira vez?\n- **find_if**: qual a posi\u00e7\u00e3o do primeiro valor positivo da fila?\n- **min_element**: qual a posi\u00e7\u00e3o do menor valor da lista?\n- **find_min_if**: qual a posi\u00e7\u00e3o do menor valor positivo?\n\n***\n\n## Draft\n\n<!-- links .cache/draft -->\n- cpp\n  - [shell.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/busca/.cache/draft/cpp/shell.cpp)\n- go\n  - [shell.go](https://github.com/qxcodepoo/arcade/blob/master/base/busca/.cache/draft/go/shell.go)\n- java\n  - [Shell.java](https://github.com/qxcodepoo/arcade/blob/master/base/busca/.cache/draft/java/Shell.java)\n- ts\n  - [shell.ts](https://github.com/qxcodepoo/arcade/blob/master/base/busca/.cache/draft/ts/shell.ts)\n<!-- links -->\n\n## Shell\n\n```sh\n#TEST_CASE in\n$in [1,2,3,4] 4\ntrue\n$in [1,2,3,5] 1\ntrue\n$in [1,2,5,9] 7\nfalse\n$end\n```\n\n```sh\n#TEST_CASE index_of\n$index_of [-1,-50,-1,-99] -50\n1\n$index_of [-1,-50,-1,-99] -99\n3\n$index_of [-1,-50,-1,-99] 10\n-1\n$end\n```\n\n```sh\n#TEST_CASE find_if\n$find_if [5,3,-1,-50,-1,-99]\n0\n$find_if [-1,-50,-1,-99,-444]\n-1\n$end\n```\n\n```sh\n#TEST_CASE min_element\n$min_element [5,3,-1,-50,-1,-99]\n5\n$min_element [-1,-50,-1,-99,-444]\n4\n$min_element [-2,5,3,-1,50,-1]\n0\n$min_element []\n-1\n$end\n```\n\n```sh\n#TEST_CASE find_min_if\n$find_min_if [5,3,-1,-50,-1,-99]\n1\n$find_min_if [-1,-50,-1,-99,-444]\n-1\n$end\n```\n\n## Alien\n\n[![_](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/busca/../../wiki/images/alien3.jpg)](https://www.youtube.com/watch?v=2b3WvsJHa0Y)\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT in\nin [1,2,3,4] 4\nin [1,2,3,5] 1\nin [1,2,5,9] 7\nend\n======== EXPECT\n$in [1,2,3,4] 4\ntrue\n$in [1,2,3,5] 1\ntrue\n$in [1,2,5,9] 7\nfalse\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT index_of\nindex_of [-1,-50,-1,-99] -50\nindex_of [-1,-50,-1,-99] -99\nindex_of [-1,-50,-1,-99] 10\nend\n======== EXPECT\n$index_of [-1,-50,-1,-99] -50\n1\n$index_of [-1,-50,-1,-99] -99\n3\n$index_of [-1,-50,-1,-99] 10\n-1\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT find_if\nfind_if [5,3,-1,-50,-1,-99]\nfind_if [-1,-50,-1,-99,-444]\nend\n======== EXPECT\n$find_if [5,3,-1,-50,-1,-99]\n0\n$find_if [-1,-50,-1,-99,-444]\n-1\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT min_element\nmin_element [5,3,-1,-50,-1,-99]\nmin_element [-1,-50,-1,-99,-444]\nmin_element [-2,5,3,-1,50,-1]\nmin_element []\nend\n======== EXPECT\n$min_element [5,3,-1,-50,-1,-99]\n5\n$min_element [-1,-50,-1,-99,-444]\n4\n$min_element [-2,5,3,-1,50,-1]\n0\n$min_element []\n-1\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT find_min_if\nfind_min_if [5,3,-1,-50,-1,-99]\nfind_min_if [-1,-50,-1,-99,-444]\nend\n======== EXPECT\n$find_min_if [5,3,-1,-50,-1,-99]\n1\n$find_min_if [-1,-50,-1,-99,-444]\n-1\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\";\nexport {};\n\nfunction inside(vet: number[], value: number): boolean {\n    return false;\n}\n\nfunction index_of(vet: number[], value: number): number {\n    return 0;\n}\n\nfunction find_if(vet: number[]): number {\n    return 0;\n}\n\nfunction min_element(vet: number[]): number {\n    return 0;\n}\n\nfunction find_min_if(vet: number[]): number {\n    return 0;\n}\n\n\nfunction main() {\n    while (true) {\n        let line = input();\n        console.log(\"$\" + line);\n        \n        let args = line.split(\" \");\n\n        if (args[0] === \"end\")   { \n            break;\n        }\n        else if (args[0] === \"in\"){\n            let result = inside(to_vet(args[1]), +args[2]);\n            console.log(result ? \"true\" : \"false\");\n        }\n        else if (args[0] === \"index_of\"){\n            let result = index_of(to_vet(args[1]), +args[2]);\n            console.log(result);\n        }\n        else if (args[0] === \"find_if\"){\n            let result = find_if(to_vet(args[1]));\n            console.log(result);\n        }\n        else if (args[0] === \"min_element\"){\n            let result = min_element(to_vet(args[1]));\n            console.log(result);\n        }\n        else if (args[0] === \"find_min_if\"){\n            let result = find_min_if(to_vet(args[1]));\n            console.log(result);\n        }\n        else {\n            console.log(\"fail: Comando inv\u00e1lido\");\n        }\n    }\n}\n\nmain();\n\n// Fun\u00e7\u00e3o auxiliar para converter de string para vetor\n// \"[1,2,3,4]\" para [1, 2, 3, 4]\nfunction to_vet(token: string): number[] {\n    let size = token.length;\n    let inside = token.substring(1, size - 1);\n    return inside === \"\" ? [] : inside.split(\",\").map(x => +x)\n}\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.List;\nimport java.util.Arrays;\nimport java.util.Scanner;\nimport java.util.ArrayList;\n\nclass Student {\n    static boolean in(List<Integer> vet, int x) {\n        return false;\n    }\n\n    static int indexOf(List<Integer> vet, int x) {\n        return 0;\n    }\n\n    static int findIf(List<Integer> vet) {\n        return 0;\n    }\n\n    static int minElement(List<Integer> vet) {\n        return 0;\n    }\n\n    static int findMinIf(List<Integer> vet) {\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Rodando o arquivo do estudante\");\n    }\n}\n\n\npublic class Shell {\n    public static void main(String[] _args) {\n        while (true) {\n            String line = scanner.nextLine();\n            System.out.println('$' + line);\n\n            var par = line.split(\" \");\n            var cmd = cmd;\n\n            if (\"end\".equals(cmd)) {\n                break;\n            }\n            else if (\"in\".equals(cmd)) {\n                var array = strToVet(par[1]);\n                var value = Integer.parseInt(par[2]);\n                var result = Student.in(array, value); \n                System.out.println(result ? \"true\" : \"false\");\n            }\n            else if (\"index_of\".equals(cmd)) {\n                var array = strToVet(par[1]);\n                var value = Integer.parseInt(par[2]);\n                var result = Student.indexOf(array, value);\n                System.out.println(\"\" + result);\n            }\n            else if (\"find_if\".equals(cmd)) {\n                var result = Student.findIf(strToVet(par[1]));\n                System.out.println(\"\" + result);\n            }\n            else if (\"min_element\".equals(cmd)) {\n                var result = Student.minElement(strToVet(par[1]));\n                System.out.println(\"\" + result);\n            }\n            else if (\"find_min_if\".equals(cmd)) {\n                var result = Student.findMinIf(strToVet(par[1]));\n                System.out.println(\"\" + result);\n            }\n            else { \n                System.out.println(\"fail: comando invalido\");\n            }\n        }\n    }\n\n    public static List<Integer> strToVet(String s) {\n        if(s.length() == 2) return new ArrayList<>();\n        List<String> parts = Arrays.asList(s.substring(1, s.length() - 1).split(\",\"));\n        List<Integer> result = new ArrayList<>();\n        for (String part : parts)\n            result.add(Integer.parseInt(part.trim()));\n        return result;\n    }\n\n    static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <sstream>\nusing namespace std;\n\ninline bool in(vector<int> vet, int x) {\n    (void) vet;\n    (void) x;\n    return false;\n}\n\ninline int index_of(vector<int> vet, int x) {\n    (void) vet;\n    (void) x;\n    return 0;\n}\n\ninline int find_if(const vector<int>& vet) {\n    (void) vet;\n    return 0;\n}\n\ninline int min_element(const vector<int>& vet) {\n    (void) vet;\n    return 0;\n}\n\ninline int find_min_if(const vector<int>& vet) {\n    (void) vet;\n    return 0;\n}\n\nvector<int> str2vet(string s) {\n    auto sub = s.substr(1, s.size() - 2);\n    stringstream ss(sub);\n    vector<int> vet;\n    string token;\n    while (getline(ss, token, ',')) {\n        vet.push_back(stoi(token));\n    }\n    return vet;\n}\n\nint main() {\n    while (true) {\n        string line, cmd, svet, value;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"in\") {\n            ss >> svet >> value;\n            cout << (in(str2vet(svet), stoi(value)) ? \"true\" : \"false\") << endl;\n        } else if (cmd == \"index_of\") {\n            ss >> svet >> value;\n            cout << index_of(str2vet(svet), stoi(value)) << endl;\n        } else if (cmd == \"find_if\") {\n            ss >> svet;\n            cout << find_if(str2vet(svet)) << endl;\n        } else if (cmd == \"min_element\") {\n            ss >> svet;\n            cout << min_element(str2vet(svet)) << endl;\n        } else if (cmd == \"find_min_if\") {\n            ss >> svet;\n            cout << find_min_if(str2vet(svet)) << endl;\n        } else {\n            cout << \"fail: unknown command\" << endl;\n        }\n    }\n}\n",
                "type": "show"
            }
        ],
        "go": [
            {
                "name": "shell.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc in(vet []int, x int) bool {\n\t_ = vet\n\t_ = x\n\treturn false\n}\n\nfunc indexOf(vet []int, x int) int {\n\t_ = vet\n\t_ = x\n\treturn 0\n}\n\nfunc findIf(vet []int) int {\n\t_ = vet\n\treturn 0\n}\n\nfunc minElement(vet []int) int {\n\t_ = vet\n\treturn 0\n}\n\nfunc findMinIf(vet []int) int {\n\t_ = vet\n\treturn 0\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tfmt.Println(\"$\" + line)\n\t\tparts := strings.Fields(line)\n\t\tif len(parts) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tcmd := parts[0]\n\n\t\tswitch cmd {\n\t\tcase \"end\":\n\t\t\treturn\n\t\tcase \"in\":\n\t\t\tif len(parts) >= 3 {\n\t\t\t\tvet := str2vet(parts[1])\n\t\t\t\tval, _ := strconv.Atoi(parts[2])\n\t\t\t\tif in(vet, val) {\n\t\t\t\t\tfmt.Println(\"true\")\n\t\t\t\t} else {\n\t\t\t\t\tfmt.Println(\"false\")\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"index_of\":\n\t\t\tif len(parts) >= 3 {\n\t\t\t\tvet := str2vet(parts[1])\n\t\t\t\tval, _ := strconv.Atoi(parts[2])\n\t\t\t\tfmt.Println(indexOf(vet, val))\n\t\t\t}\n\t\tcase \"find_if\":\n\t\t\tif len(parts) >= 2 {\n\t\t\t\tvet := str2vet(parts[1])\n\t\t\t\tfmt.Println(findIf(vet))\n\t\t\t}\n\t\tcase \"min_element\":\n\t\t\tif len(parts) >= 2 {\n\t\t\t\tvet := str2vet(parts[1])\n\t\t\t\tfmt.Println(minElement(vet))\n\t\t\t}\n\t\tcase \"find_min_if\":\n\t\t\tif len(parts) >= 2 {\n\t\t\t\tvet := str2vet(parts[1])\n\t\t\t\tfmt.Println(findMinIf(vet))\n\t\t\t}\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: unknown command\")\n\t\t}\n\t}\n}\n\nfunc str2vet(s string) []int {\n\tif s == \"[]\" {\n\t\treturn make([]int, 0)\n\t}\n\tsub := s[1 : len(s)-1]\n\ttokens := strings.Split(sub, \",\")\n\tvet := make([]int, 0, len(tokens))\n\tfor _, token := range tokens {\n\t\tnum, _ := strconv.Atoi(strings.TrimSpace(token))\n\t\tvet = append(vet, num)\n\t}\n\treturn vet\n}\n",
                "type": "show"
            }
        ]
    }
}
