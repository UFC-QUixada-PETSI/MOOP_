{
    "title": "@busca: Estressados Opera\u00e7\u00f5es I",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@busca: Estressados Opera\u00e7\u00f5es I</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n</head>\n<body>\n<h1 id=\"estressados-opera\u00e7\u00f5es-i\">Estressados Opera\u00e7\u00f5es I</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr class=\"header\">\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n<th><a href=\"#alien\">Alien</a></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<!-- toch -->\n<figure>\n<img\nsrc=\"https://gist.github.com/assets/4747652/c22c464a-b797-4bd7-b963-4e4f1ee7f96b\"\nalt=\"cover\" />\n<figcaption aria-hidden=\"true\">cover</figcaption>\n</figure>\n<hr />\n<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>Na entrada de um evento de um experimento social, os participantes\nganhavam uma pulseira especial que precisavam ficar utilizando.</li>\n<li>A pulseira informava, num pequeno visor, um n\u00famero inteiro que\nrepresentava o n\u00edvel de stress daquele participante.</li>\n<li>O n\u00famero 1 significava totalmente tranquilo e vai aumentando\nconforme o stress do participante aumentava at\u00e9 o valor m\u00e1ximo de\ninfinito.</li>\n<li>Para fazer uma representa\u00e7\u00e3o l\u00f3gica de homens e mulheres em um vetor\nde inteiros, os n\u00fameros positivos representam os homens e os n\u00fameros\nnegativos representam mulheres.</li>\n<li>Precisamos escrever os algoritmos que identifiquem informa\u00e7\u00f5es\nimportantes sobre os participantes da fila.</li>\n</ul>\n<p><strong>Exemplos:</strong></p>\n<ul>\n<li><code>{}</code> equivale a uma fila vazia.</li>\n<li><code>{-1, -50, -99}</code> equivale a uma mulher totalmente\ntranquila, uma mulher m\u00e9dio estressada e uma mulher extremamente\nestressada.</li>\n<li><code>{80, 70, 90, -4}</code> equivale a tr\u00eas homens estressados e\numa mulher tranquila.</li>\n</ul>\n<p><strong>Fun\u00e7\u00f5es</strong>:</p>\n<ul>\n<li><strong>in</strong>: existe determinado valor na fila?</li>\n<li><strong>index_of</strong>: qual posi\u00e7\u00e3o aparece X na fila pela\nprimeira vez?</li>\n<li><strong>find_if</strong>: qual a posi\u00e7\u00e3o do primeiro valor positivo\nda fila?</li>\n<li><strong>min_element</strong>: qual a posi\u00e7\u00e3o do menor valor da\nlista?</li>\n<li><strong>find_min_if</strong>: qual a posi\u00e7\u00e3o do menor valor\npositivo?</li>\n</ul>\n<hr />\n<h2 id=\"draft\">Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp\n<ul>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/busca/.cache/draft/cpp/shell.cpp\">shell.cpp</a></li>\n</ul></li>\n<li>java\n<ul>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/busca/.cache/draft/java/Shell.java\">Shell.java</a></li>\n</ul></li>\n<li>ts\n<ul>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/busca/.cache/draft/ts/shell.ts\">shell.ts</a>\n<!-- links --></li>\n</ul></li>\n</ul>\n<h2 id=\"shell\">Shell</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE in</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$in</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,3,4</span><span class=\"pp\">]</span> 4</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">true</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$in</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,3,5</span><span class=\"pp\">]</span> 1</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">true</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$in</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,5,9</span><span class=\"pp\">]</span> 7</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">false</span></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE index_of</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$index_of</span> <span class=\"pp\">[-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">50,</span><span class=\"pp\">-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">99</span><span class=\"pp\">]</span> <span class=\"at\">-50</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">1</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$index_of</span> <span class=\"pp\">[-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">50,</span><span class=\"pp\">-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">99</span><span class=\"pp\">]</span> <span class=\"at\">-99</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">3</span></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$index_of</span> <span class=\"pp\">[-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">50,</span><span class=\"pp\">-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">99</span><span class=\"pp\">]</span> 10</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">-1</span></span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE find_if</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$find_if</span> <span class=\"pp\">[</span><span class=\"ss\">5,3,</span><span class=\"pp\">-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">50,</span><span class=\"pp\">-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">99</span><span class=\"pp\">]</span></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">0</span></span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$find_if</span> <span class=\"pp\">[-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">50,</span><span class=\"pp\">-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">99,</span><span class=\"pp\">-</span><span class=\"ss\">444</span><span class=\"pp\">]</span></span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">-1</span></span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE min_element</span></span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$min_element</span> <span class=\"pp\">[</span><span class=\"ss\">5,3,</span><span class=\"pp\">-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">50,</span><span class=\"pp\">-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">99</span><span class=\"pp\">]</span></span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">5</span></span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$min_element</span> <span class=\"pp\">[-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">50,</span><span class=\"pp\">-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">99,</span><span class=\"pp\">-</span><span class=\"ss\">444</span><span class=\"pp\">]</span></span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">4</span></span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$min_element</span> <span class=\"pp\">[-</span><span class=\"ss\">2,5,3,</span><span class=\"pp\">-</span><span class=\"ss\">1,50,</span><span class=\"pp\">-</span><span class=\"ss\">1</span><span class=\"pp\">]</span></span>\n<span id=\"cb4-7\"><a href=\"#cb4-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">0</span></span>\n<span id=\"cb4-8\"><a href=\"#cb4-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$min_element</span> []</span>\n<span id=\"cb4-9\"><a href=\"#cb4-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">-1</span></span>\n<span id=\"cb4-10\"><a href=\"#cb4-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE find_min_if</span></span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$find_min_if</span> <span class=\"pp\">[</span><span class=\"ss\">5,3,</span><span class=\"pp\">-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">50,</span><span class=\"pp\">-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">99</span><span class=\"pp\">]</span></span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">1</span></span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$find_min_if</span> <span class=\"pp\">[-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">50,</span><span class=\"pp\">-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">99,</span><span class=\"pp\">-</span><span class=\"ss\">444</span><span class=\"pp\">]</span></span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">-1</span></span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<h2 id=\"alien\">Alien</h2>\n<p><a href=\"https://www.youtube.com/watch?v=2b3WvsJHa0Y\"><img\nsrc=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/busca/../../wiki/images/alien3.jpg\"\nalt=\"_\" /></a></p>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT in\nin [1,2,3,4] 4\nin [1,2,3,5] 1\nin [1,2,5,9] 7\nend\n======== EXPECT\n$in [1,2,3,4] 4\ntrue\n$in [1,2,3,5] 1\ntrue\n$in [1,2,5,9] 7\nfalse\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT index_of\nindex_of [-1,-50,-1,-99] -50\nindex_of [-1,-50,-1,-99] -99\nindex_of [-1,-50,-1,-99] 10\nend\n======== EXPECT\n$index_of [-1,-50,-1,-99] -50\n1\n$index_of [-1,-50,-1,-99] -99\n3\n$index_of [-1,-50,-1,-99] 10\n-1\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT find_if\nfind_if [5,3,-1,-50,-1,-99]\nfind_if [-1,-50,-1,-99,-444]\nend\n======== EXPECT\n$find_if [5,3,-1,-50,-1,-99]\n0\n$find_if [-1,-50,-1,-99,-444]\n-1\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT min_element\nmin_element [5,3,-1,-50,-1,-99]\nmin_element [-1,-50,-1,-99,-444]\nmin_element [-2,5,3,-1,50,-1]\nmin_element []\nend\n======== EXPECT\n$min_element [5,3,-1,-50,-1,-99]\n5\n$min_element [-1,-50,-1,-99,-444]\n4\n$min_element [-2,5,3,-1,50,-1]\n0\n$min_element []\n-1\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT find_min_if\nfind_min_if [5,3,-1,-50,-1,-99]\nfind_min_if [-1,-50,-1,-99,-444]\nend\n======== EXPECT\n$find_min_if [5,3,-1,-50,-1,-99]\n1\n$find_min_if [-1,-50,-1,-99,-444]\n-1\n$end\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "function input(): string { let X: any = input; X.L = X.L || require(\"fs\").readFileSync(0).toString().split(/\\r?\\n/); return X.L.shift(); } // _TEST_ONLY_\n// function input(): string { let X: any = input; X.P = X.P || require(\"readline-sync\"); return X.P.question() } // _FREE_ONLY_\nfunction write(text: any, endl=\"\\n\") { process.stdout.write(\"\" + text + endl); }\n\n\nfunction inside(vet: number[], value: number): boolean {\n    return false;\n}\n\nfunction index_of(vet: number[], value: number): number {\n    return 0;\n}\n\nfunction find_if(vet: number[]): number {\n    return 0;\n}\n\nfunction min_element(vet: number[]): number {\n    return 0;\n}\n\nfunction find_min_if(vet: number[]): number {\n    return 0;\n}\n\n\nfunction main() {\n    while (true) {\n        write(\"$\", \"\");\n        let line = input();\n        write(line);\n        \n        let args = line.split(\" \");\n\n        if (args[0] === \"end\")   { \n            break;\n        }\n        else if (args[0] === \"in\"){\n            let result = inside(to_vet(args[1]), +args[2]);\n            write(result ? \"true\" : \"false\");\n        }\n        else if (args[0] === \"index_of\"){\n            let result = index_of(to_vet(args[1]), +args[2]);\n            write(result);\n        }\n        else if (args[0] === \"find_if\"){\n            let result = find_if(to_vet(args[1]));\n            write(result);\n        }\n        else if (args[0] === \"min_element\"){\n            let result = min_element(to_vet(args[1]));\n            write(result);\n        }\n        else if (args[0] === \"find_min_if\"){\n            let result = find_min_if(to_vet(args[1]));\n            write(result);\n        }\n        else {\n            write(\"fail: Comando inv\u00e1lido\");\n        }\n    }\n}\n\nmain();\n\n// Fun\u00e7\u00e3o auxiliar para converter de string para vetor\n// \"[1,2,3,4]\" para [1, 2, 3, 4]\nfunction to_vet(token: string): number[] {\n    let size = token.length;\n    let inside = token.substring(1, size - 1);\n    return inside === \"\" ? [] : inside.split(\",\").map(x => +x)\n}\n",
                "encoding": 0
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.List;\nimport java.util.Arrays;\nimport java.util.Scanner;\nimport java.util.ArrayList;\n\nclass Student {\n    static boolean in(List<Integer> vet, int x) {\n        return false;\n    }\n\n    static int indexOf(List<Integer> vet, int x) {\n        return 0;\n    }\n\n    static int findIf(List<Integer> vet) {\n        return 0;\n    }\n\n    static int minElement(List<Integer> vet) {\n        return 0;\n    }\n\n    static int findMinIf(List<Integer> vet) {\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Rodando o arquivo do estudante\");\n    }\n}\n\n\npublic class Shell {\n    public static void main(String[] _args) {\n        while (true) {\n            String line = input();\n            String[] args = line.split(\" \");\n            write('$' + line);\n\n            if      (\"end\".equals(args[0])        ) {\n                break;\n            }\n            else if (\"in\".equals(args[0])         ) {\n                var result = Student.in(strToVet(args[1]), number(args[2])); \n                write(result ? \"true\" : \"false\");\n            }\n            else if (\"index_of\".equals(args[0])   ) {\n                var result = Student.indexOf(strToVet(args[1]), number(args[2]));\n                write(\"\" + result);\n            }\n            else if (\"find_if\".equals(args[0])    ) {\n                var result = Student.findIf(strToVet(args[1]));\n                write(\"\" + result);\n            }\n            else if (\"min_element\".equals(args[0])) {\n                var result = Student.minElement(strToVet(args[1]));\n                write(\"\" + result);\n            }\n            else if (\"find_min_if\".equals(args[0])) {\n                var result = Student.findMinIf(strToVet(args[1]));\n                write(\"\" + result);\n            }\n            else { \n                write(\"fail: comando invalido\");\n            }\n        }\n    }\n\n    public static List<Integer> strToVet(String s) {\n        if(s.length() == 2) return new ArrayList<>();\n        List<String> parts = Arrays.asList(s.substring(1, s.length() - 1).split(\",\"));\n        List<Integer> result = new ArrayList<>();\n        for (String part : parts)\n            result.add(Integer.parseInt(part.trim()));\n        return result;\n    }\n\n    static Scanner scanner = new Scanner(System.in);\n    public static String input()           { return scanner.nextLine();    }\n    public static void write(String value) { System.out.println(value);    }\n    public static int number(String str)   { return Integer.parseInt(str); }\n}",
                "encoding": 0
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <sstream>\nusing namespace std;\n\ninline bool in(vector<int> vet, int x) {\n    (void) vet;\n    (void) x;\n    return false;\n}\n\ninline int index_of(vector<int> vet, int x) {\n    (void) vet;\n    (void) x;\n    return 0;\n}\n\ninline int find_if(const vector<int>& vet) {\n    (void) vet;\n    return 0;\n}\n\ninline int min_element(const vector<int>& vet) {\n    (void) vet;\n    return 0;\n}\n\ninline int find_min_if(const vector<int>& vet) {\n    (void) vet;\n    return 0;\n}\n\nvector<int> str2vet(string s) {\n    auto sub = s.substr(1, s.size() - 2);\n    stringstream ss(sub);\n    vector<int> vet;\n    string token;\n    while (getline(ss, token, ',')) {\n        vet.push_back(stoi(token));\n    }\n    return vet;\n}\n\nint main() {\n    while (true) {\n        string line, cmd, svet, value;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"in\") {\n            ss >> svet >> value;\n            cout << (in(str2vet(svet), stoi(value)) ? \"true\" : \"false\") << endl;\n        } else if (cmd == \"index_of\") {\n            ss >> svet >> value;\n            cout << index_of(str2vet(svet), stoi(value)) << endl;\n        } else if (cmd == \"find_if\") {\n            ss >> svet;\n            cout << find_if(str2vet(svet)) << endl;\n        } else if (cmd == \"min_element\") {\n            ss >> svet;\n            cout << min_element(str2vet(svet)) << endl;\n        } else if (cmd == \"find_min_if\") {\n            ss >> svet;\n            cout << find_min_if(str2vet(svet)) << endl;\n        } else {\n            cout << \"fail: unknown command\" << endl;\n        }\n    }\n}\n",
                "encoding": 0
            }
        ]
    }
}
