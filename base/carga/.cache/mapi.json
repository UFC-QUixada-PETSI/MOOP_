{
    "title": "Um trem com vag\u00f5es de @carga",
    "description": "# Um trem com vag\u00f5es de @carga\n\n<!-- toch -->\n[Intro](#intro) | [Guide](#guide)\n-- | --\n<!-- toch -->\n\n![cover](cover.jpg)\n\nVamos ampliar a atividade do trem colocando vag\u00f5es de carga para carregar bagagens.\n\n## Intro\n\n### Parte 1 - Trem e Vag\u00f5es\n\n- Um vag\u00e3o de pessoas possui uma quantidade de cadeiras.\n- Um vag\u00e3o de carga tem um limite de peso.\n- O trem possui um m\u00e1ximo de vag\u00f5es que ele pode carregar.\n- Ao mostrar um vag\u00e3o de pessoas, coloque [], e para cada cadeira livre coloque um \"-\".\n- Ao mostrar um vag\u00e3o de carga, use um (), coloque os identificadores de carga e mostre quando de peso livre ainda existe.\n\n- Uma carga possui um peso e um identificador.\n- Um passageiro possui um identificador.\n\n```\n  # init _maxVagoes  #inicia o trem\n  # nwvp _capacidade #novo vagao de pessoa\n  # nwvc _pesoMax    #novo vagao de carga\ninit 3\n  done\nnwvp 2\n  done\nla\n  Trem [ - - ]\nnwvc 350.0\n  done\nla\n  Trem [ - - ]( _350.0 )\nnwvp 2\n  done\nla\n  Trem [ - - ]( _350.0 )[ - - ]\nnwvc 1\n  fail: limite de vag\u00f5es atingido\n```\n\n### Parte 2 - Embarque e Desembarque\n\n- Embarcar um novo item.\n  - Ao tentar embarcar, o trem vai procurar o primeiro vag\u00e3o livre para inserir o item.\n  - Se n\u00e3o houver espa\u00e7o livre em nenhum vag\u00e3o ent\u00e3o n\u00e3o haver\u00e1 embarque.\n  - N\u00e3o deve ser poss\u00edvel embarcar duas vezes o mesmo passageiro ou a mesma carga no trem.\n- Desembarcar um passageiro ou carga\n  - Se o item estiver no trem, ele sai do trem liberando sua vaga.\n\n```\n\n# addp _idPass #tenta embarcar uma pessoa\n# addc _idCarga _peso #tenta embarcar uma carga\n\naddp goku\nla\n  Trem [ goku - ]( _350.0 )[ - - ]\naddp kate\naddp sara\naddp goku\n  fail: goku j\u00e1 est\u00e1 no trem\nla\n  Trem [ goku kate ]( _350.0 )[ sara - ]\naddp tina\naddp james\n  fail: trem lotado\nla\n  Trem [ goku kate ]( _350.0 )[ sara james ]\naddc xilitos 200.0\nla\n  Trem [ goku kate ]( xilitos:200.0 _150.0 )[ sara james ]\naddc pipoca 100.0\nla\n  Trem [ goku kate ]( xilitos:200.0 pipoca:100.0 _50.0 )[ sara james ]\naddc cebolitos 100.0\n  fail: trem lotado\nsair kate\nsair sara\nsair rufus\n  fail: rufus nao esta no trem\nsair xilitos\nla\n  Trem [ goku - ]( pipoca:100.0 _50.0 )[ james ]\n```\n\n### Parte 3 - Cadastro de Passeiros e Registro de Embarque\n\n- Mostrar a lista de itens cadastrados.\n  - Quando um item tenta embarcar, ele \u00e9 cadastrado no sistema, independente de conseguir ou n\u00e3o embarcar, independente se \u00e9 passageiro ou carga.\n  - Mostre a lista ordenada pelo id do passageiro.\n- Mostrar a sequ\u00eancia de embarque e desembarque.\n\n```\n\ncadastro\n  alex\n  cebolitos:100.0\n  goku\n  james\n  kate\n  pipoca:100.0\n  sara\n  tina\n  xilitos:200.0\n\nmovimentacao\n  goku in\n  kate in\n  sara in\n  tina in\n  james in\n  xilitos:200.0 in\n  pipoca:100.0 in\n  kate out\n  sara out\n  xilitos:200.0 out\n```\n\n***\n\n## Guide\n\n```java\n\ninterface Pass:\n  getId(): string\n\n\nclass Pessoa implements Pass\n- id: string\n\nclass Carga implements Pass\n- id: string\n- peso: float\n\ninterface class Vagao\n- elementos: Passageiro[]\n--\n+ embarcar(pass: Pass)\n+ desembarcar(idPass: String)\n+ exists(idPass): boolean\n\nclass Trem\n- maxVagoes: number\n- vagoes: Vagao[]\n--\n+ addVagao(vagao: Vagao)\n+ embarcar(pass: Passageiro)\n+ desembarcar(idPass: string)\n+ exists(idPass): bool\n--\n+ constructor(maxVagoes: number)\n\nenum Direcao\nIN\nOUT\n\nclass Movimento\n- pass: Passageiro\n- dir: Direcao\n\nclass Registro\n- repPassageiros: Passageiro[]\n- movimentacao: Movimento[]\n--\n+ cadastrar(pass: Passageiro)\n+ movimentar(mov: Movimento)\n--\n+ constructor(maxVagoes: number)\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
