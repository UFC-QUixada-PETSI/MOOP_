'--
@startuml

skinparam defaultFontName Hasklig
skinparam dpi 150

'==
class Account {
  - balanceManager : BalanceManager
  - id : int
  __
  + Account(id : int)

  ' adiciona valor à conta
  + deposit(value : int) : void

  ' retira o dinheiro, mesmo que o balance fique negativo
  + fee(value : int) : void

  ' se o índice for válido e representar uma operação de tarifa
  ' adicione o mesmo valor tarifado, mas com label de reverse(extorno)
  + reverse(index : int) : void

  ' só realiza a operação se houver dinheiro suficiente na conta
  + withdraw(value : int) : void
  + toString() : String
  __
  ' em c++, retorne a referencia
  + getBalanceManager() : BalanceManager
}

' nessa classe são efetivadas e registradas as alterações no saldo
class BalanceManager {

  ' saldo do cliente
  - balance : int 

  ' extrato
  - extract : List<Operation>
  
  ' id da próxima operação
  - nextId : int
  __
  + BalanceManager()

  ' adiciona value ao balance
  ' crie operação e adicione ao vetor de operações
  ' incrementa o nextId
  + addOperation(label : Label, value : int)
  + toString() : String
  __
  + getBalance() : int

  ' se qtdOp for 0, valor default, retornar todo o extrato
  + getExtract(qtdOp : int) : List<Operation>
}
'
' essa enumeração guarda possíveis labels para as operações
enum Label {
  + deposit {static}
  + fee {static}
  + opening {static}
  + reverse {static}
  + withdraw {static}
}
'
' operação guarda os dados de uma única operação
class Operation {
  - index : int

  - label : Label

  ' valor em negativo se estiver diminuindo o saldo
  - value : int

  ' saldo residual apos operação
  - balance : int
  __
  + Operation(index : int, label : Label, value : int, balance : int)

  + toString() : String
  __
  + getBalance() : int
  + getIndex() : int
  + getLabel() : Label
  + getValue() : int
}

'--
Account "1" -->  "1" BalanceManager
BalanceManager "1" -->  "0..*" Operation
Operation "1" -->  "1" Label
@enduml