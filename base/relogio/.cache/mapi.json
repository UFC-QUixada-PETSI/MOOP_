{
    "title": "@relogio: Garante uma hora v\u00e1lida no rel\u00f3gio",
    "description": "# Garante uma hora v\u00e1lida no rel\u00f3gio\n\n<!-- toch -->\n[Intro](#intro) | [Guide](#guide) | [Shell](#shell) | [Draft](#draft)\n-- | -- | -- | --\n<!-- toch -->\n\n![cover](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/relogio/cover.jpg)\n\n## Intro\n\nSeu objetivo \u00e9 construtir uma Classe Rel\u00f3gio `Watch` que garanta que a hora, minuto e segundo sejam v\u00e1lidos.\n\n- Construtor\n  - O construtor deve receber 3 par\u00e2metros, hora, minuto e segundo.\n  - Para fazer a inicializa\u00e7\u00e3o dos 3 par\u00e2metros, utilize os m\u00e9todos set.\n- Crie os m\u00e9todos getters e setters para cada atributo.\n  - Os m\u00e9todos set devem garantir que os valor atribu\u00eddo sempre seja v\u00e1lido, ou n\u00e3o realize nenhuma mudan\u00e7a.\n- `toString`\n  - Crie um m\u00e9todo que imprime a hora no formato HH:MM:SS.\n  - Voc\u00ea precisar\u00e1 pesquisar como formatar n\u00fameros menores que 10 com 2 d\u00edgitos (ex: 01, 02, 03).\n- Nos m\u00e9todos set, realize a valida\u00e7\u00e3o dos valores.\n  - Hora deve ser entre 0 e 23.\n  - Minuto e segundo devem ser entre 0 e 59.\n- Pr\u00f3ximo Segundo `nextSecond`\n  - Crie um m\u00e9todo nextSecond que incrementa o segundo em 1.\n  - Se o segundo for 59, ele deve ser zerado e o minuto incrementado.\n  - Se o minuto for 59, ele deve ser zerado e a hora incrementada.\n  - Se a hora for 23, ela deve ser zerada.\n\n![diagrama](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/relogio/diagrama.png)\n\n## Guide\n\nPara formatar com 2 d\u00edgitos utilize a seguinte estrat\u00e9gia:\n\n```java\n//java\npublic String toString() {\n  return String.format(\"%02d:%02d:%02d\", hora, minuto, segundo);\n}\n```\n\n```cpp\n//cpp\n//strinstream \u00e9 uma classe da biblioteca sstream\n//setfill e setw s\u00e3o fun\u00e7\u00f5es da biblioteca iomanip\nstd::string str() const {\n    stringstream ss;\n    ss << setfill('0') << setw(2) << hour << \":\";\n    ss << setfill('0') << setw(2) << minute << \":\";\n    ss << setfill('0') << setw(2) << second;\n    return ss.str();\n}\n```\n\n```ts\n//typescript\npublic toString(): string {\n  let hora = String(this.hora).padStart(2, '0');\n  let minuto = String(this.minuto).padStart(2, '0');\n  let segundo = String(this.segundo).padStart(2, '0');\n  return `${hora}:${minuto}:${segundo}`;\n}\n```\n\n## Shell\n\n```bash\n#TEST_CASE set\n$show\n00:00:00\n\n#TEST_CASE set\n\n$set 10 02 30\n$show \n10:02:30\n\n#TEST_CASE set2\n$set 15 50 59\n$show\n15:50:59\n\n#TEST_CASE error\n\n$set 25 10 30\nfail: hora invalida\n\n$show\n15:10:30\n\n#TEST_CASE error2\n$set 1 70 50\nfail: minuto invalido\n$show\n01:10:50\n\n#TEST_CASE error3\n$set 23 59 70\nfail: segundo invalido\n$show\n23:59:50\n\n#TEST_CASE next\n$set 15 59 59\n$show\n15:59:59\n\n#TEST_CASE next2\n\n$next\n$show\n16:00:00\n\n$end\n```\n\n***\n\n```bash\n#TEST_CASE set\n$set 23 59 59\n$show\n23:59:59\n\n#TEST_CASE next3\n\n$next\n$show\n00:00:00\n\n$end\n```\n\n***\n\n```bash\n#TEST_CASE init\n$init 10 20 30\n$show\n10:20:30\n\n#TEST_CASE init2\n\n$init 90 20 30\nfail: hora invalida\n\n$show\n00:20:30\n\n#TEST_CASE init3\n$init 90 100 60\nfail: hora invalida\nfail: minuto invalido\nfail: segundo invalido\n\n$show\n00:00:00\n\n$end\n```\n\n## Draft\n\n<!-- links .cache/draft -->\n- cpp\n  - [shell.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/relogio/.cache/draft/cpp/shell.cpp)\n- java\n  - [Shell.java](https://github.com/qxcodepoo/arcade/blob/master/base/relogio/.cache/draft/java/Shell.java)\n- ts\n  - [shell.ts](https://github.com/qxcodepoo/arcade/blob/master/base/relogio/.cache/draft/ts/shell.ts)\n<!-- links -->\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT set\nshow\nend\n======== EXPECT\n$show\n00:00:00\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT set\nshow\nset 10 02 30\nshow \nend\n======== EXPECT\n$show\n00:00:00\n$set 10 02 30\n$show \n10:02:30\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT set2\nshow\nset 10 02 30\nshow \nset 15 50 59\nshow\nend\n======== EXPECT\n$show\n00:00:00\n$set 10 02 30\n$show \n10:02:30\n$set 15 50 59\n$show\n15:50:59\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT error\nshow\nset 10 02 30\nshow \nset 15 50 59\nshow\nset 25 10 30\nshow\nend\n======== EXPECT\n$show\n00:00:00\n$set 10 02 30\n$show \n10:02:30\n$set 15 50 59\n$show\n15:50:59\n$set 25 10 30\nfail: hora invalida\n$show\n15:10:30\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT error2\nshow\nset 10 02 30\nshow \nset 15 50 59\nshow\nset 25 10 30\nshow\nset 1 70 50\nshow\nend\n======== EXPECT\n$show\n00:00:00\n$set 10 02 30\n$show \n10:02:30\n$set 15 50 59\n$show\n15:50:59\n$set 25 10 30\nfail: hora invalida\n$show\n15:10:30\n$set 1 70 50\nfail: minuto invalido\n$show\n01:10:50\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT error3\nshow\nset 10 02 30\nshow \nset 15 50 59\nshow\nset 25 10 30\nshow\nset 1 70 50\nshow\nset 23 59 70\nshow\nend\n======== EXPECT\n$show\n00:00:00\n$set 10 02 30\n$show \n10:02:30\n$set 15 50 59\n$show\n15:50:59\n$set 25 10 30\nfail: hora invalida\n$show\n15:10:30\n$set 1 70 50\nfail: minuto invalido\n$show\n01:10:50\n$set 23 59 70\nfail: segundo invalido\n$show\n23:59:50\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT next\nshow\nset 10 02 30\nshow \nset 15 50 59\nshow\nset 25 10 30\nshow\nset 1 70 50\nshow\nset 23 59 70\nshow\nset 15 59 59\nshow\nend\n======== EXPECT\n$show\n00:00:00\n$set 10 02 30\n$show \n10:02:30\n$set 15 50 59\n$show\n15:50:59\n$set 25 10 30\nfail: hora invalida\n$show\n15:10:30\n$set 1 70 50\nfail: minuto invalido\n$show\n01:10:50\n$set 23 59 70\nfail: segundo invalido\n$show\n23:59:50\n$set 15 59 59\n$show\n15:59:59\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT next2\nshow\nset 10 02 30\nshow \nset 15 50 59\nshow\nset 25 10 30\nshow\nset 1 70 50\nshow\nset 23 59 70\nshow\nset 15 59 59\nshow\nnext\nshow\nend\n======== EXPECT\n$show\n00:00:00\n$set 10 02 30\n$show \n10:02:30\n$set 15 50 59\n$show\n15:50:59\n$set 25 10 30\nfail: hora invalida\n$show\n15:10:30\n$set 1 70 50\nfail: minuto invalido\n$show\n01:10:50\n$set 23 59 70\nfail: segundo invalido\n$show\n23:59:50\n$set 15 59 59\n$show\n15:59:59\n$next\n$show\n16:00:00\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT set\nset 23 59 59\nshow\nend\n======== EXPECT\n$set 23 59 59\n$show\n23:59:59\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT next3\nset 23 59 59\nshow\nnext\nshow\nend\n======== EXPECT\n$set 23 59 59\n$show\n23:59:59\n$next\n$show\n00:00:00\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT init\ninit 10 20 30\nshow\nend\n======== EXPECT\n$init 10 20 30\n$show\n10:20:30\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT init2\ninit 10 20 30\nshow\ninit 90 20 30\nshow\nend\n======== EXPECT\n$init 10 20 30\n$show\n10:20:30\n$init 90 20 30\nfail: hora invalida\n$show\n00:20:30\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT init3\ninit 10 20 30\nshow\ninit 90 20 30\nshow\ninit 90 100 60\nshow\nend\n======== EXPECT\n$init 10 20 30\n$show\n10:20:30\n$init 90 20 30\nfail: hora invalida\n$show\n00:20:30\n$init 90 100 60\nfail: hora invalida\nfail: minuto invalido\nfail: segundo invalido\n$show\n00:00:00\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\nfunction main() {\n    // CRIE SEU REL\u00d3GIO AQUI\n    while (true) {\n        let line = input();\n        console.log(\"$\" + line);\n\n        const args = line.split(\" \");\n        const cmd = args[0];\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"show\") {\n            // MOSTRE SEU REL\u00d3GIO AQUI\n        } else if (cmd == \"init\") {\n            // INICIE SEU REL\u00d3GIO AQUI UTILIZANDO O CONSTRUTOR\n            // const hour = parseInt(args[1]);\n            // const minute = parseInt(args[2]);\n            // const second = parseInt(args[3]);\n        } else if (cmd == \"set\") {\n            // AJUSTE SEU REL\u00d3GIO AQUI CHAMANDO OS M\u00c9TODOS setHour, setMinute e setSecond\n            // const hour = parseInt(args[1]);\n            // const minute = parseInt(args[2]);\n            // const second = parseInt(args[3]);\n        } else if (cmd == \"next\") {\n            // AVANCE SEU REL\u00d3GIO AQUI CHAMANDO O M\u00c9TODO nextSecond\n        } else {\n            console.log(\"fail: comando invalido\");\n        }\n    }\n}\n\nmain()\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.*;\n\n\npublic class Shell {\n    public static void main(String[] a) {\n        // CRIE SEU REL\u00d3GIO AQUI\n        \n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"show\")) {\n                // MOSTRE O REL\u00d3GIO AQUI\n            }\n            else if (cmd.equals(\"init\")) {\n                // INICIE O REL\u00d3GIO AQUI utilizando o construtor\n                // int hour = Integer.parseInt(par[1]);\n                // int minute = Integer.parseInt(par[2]);\n                // int second = Integer.parseInt(par[3]);\n            }\n            else if (cmd.equals(\"set\")) {\n                // CHAME OS M\u00c9TODOS SET AQUI\n                // int hour = Integer.parseInt(par[1]);\n                // int minute = Integer.parseInt(par[2]);\n                // int second = Integer.parseInt(par[3]);\n            }\n            else if (cmd.equals(\"next\")) {\n                // CHAME O M\u00c9TODO nextSecond AQUI\n            }\n            else {\n                System.out.println(\"fail: comando invalido\");\n            }\n        }\n    }\n\n    private static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <sstream>\n#include <iomanip> // std::setfill, std::setw\nusing namespace std;\n\nint main() {\n    // CRIE SEU REL\u00d3GIO AQUI\n\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"set\") {\n            \n            // Chame os m\u00e9todos setHour, setMinute e setSecond\n            // int hour {}, minute {}, second {};\n            // ss >> hour >> minute >> second;\n        } else if (cmd == \"init\") {\n            \n            // Chame o construtor para inicializar o rel\u00f3gio\n            // int hour {}, minute {}, second {};\n            // ss >> hour >> minute >> second;\n        } else if (cmd == \"show\") {\n            \n            // Chame o m\u00e9todo str e imprima o hor\u00e1rio\n            // cout << time.str() << endl;\n        } else if (cmd == \"next\") {\n            \n            // Chame o m\u00e9todo nextSecond\n            // time.nextSecond();\n        } else {\n            cout << \"fail: comando invalido\" << endl;\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
