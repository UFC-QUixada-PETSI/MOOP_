{
    "title": "Garante uma hora v\u00e1lida no @relogio",
    "description": "# Garante uma hora v\u00e1lida no @relogio\n\n<!-- toch -->\n[Intro](#intro) | [Treino](#treino) | [Guide](#guide) | [Shell](#shell)\n-- | -- | -- | --\n<!-- toch -->\n\n![cover](cover.jpg)\n\n## Intro\n\nUtilizando os comandos set para manter a hora correta\n\nO sistema dever\u00e1:\n\n- Gerenciar uma classe que guarda a hora, minuto e segundo.\n- Ao iniciar a classe, hora, minuto e segundo devem ser setados para 0.\n  - O construtor deve receber 3 par\u00e2metros, hora, minuto e segundo.\n  - Para fazer a inicializa\u00e7\u00e3o dos 3 par\u00e2metros, utilize os m\u00e9todos set.\n- Crie os m\u00e9todos getters e setters para cada atributo.\n  - Os m\u00e9todos set devem garantir que os valor atribu\u00faido sempre seja v\u00e1lido, ou n\u00e3o realize nenhuma mudan\u00e7a.\n- Crie um m\u00e9todo que imprime a hora no formato HH:MM:SS.\n- Crie um m\u00e9todo que incrementa o segundo em 1.\n\n***\n\n## Treino\n\n- Parte 1: atributos p\u00fablicos\n  - Crie a classe rel\u00f3gio com os atributos p\u00fablicos hora, minuto e segundo.\n  - Crie o m\u00e9todo construtor que inicializa os atributos com 0.\n  - Crie o m\u00e9todo toString que retorna a hora no formato HH:MM:SS.\n  - Crie um objeto rel\u00f3gio, atribua valores para hora, minuto e segundo e imprima a hora.\n  - Atribua valores inv\u00e1lidos para hora, minuto e segundo e imprima a hora.\n- Parte 2: atributos privados\n  - Torne os atributos hora, minuto e segundo privados.\n  - Crie os m\u00e9todos getters e setters para cada atributo.\n    - Nos m\u00e9todos set, N\u00c3O realize nenhuma valida\u00e7\u00e3o.\n  - Crie um objeto rel\u00f3gio, atribua valores para hora, minuto e segundo e imprima a hora.\n  - Atribua valores inv\u00e1lidos para hora, minuto e segundo e imprima a hora.\n- Parte 3: valida\u00e7\u00e3o\n  - Nos m\u00e9todos set, realize a valida\u00e7\u00e3o dos valores.\n    - Hora deve ser entre 0 e 23. Minuto e segundo devem ser entre 0 e 59.\n  - Crie um objeto rel\u00f3gio, atribua valores para hora, minuto e segundo e imprima a hora.\n  - Tente atribuir valores inv\u00e1lidos para hora, minuto e segundo e verifique se a hora permaneceu a mesma.\n- Parte 4: construtor\n  - Crie um m\u00e9todo construtor que recebe hora, minuto e segundo.\n  - Utilize os m\u00e9todos set para fazer a inicializa\u00e7\u00e3o dos atributos.\n  - Tente atribuir valores inv\u00e1lidos para hora, minuto e segundo atrav\u00e9s do construtor e verifique se a hora permaneceu a mesma.\n- Parte 5: nextSecond\n  - Crie um m\u00e9todo nextSecond que incrementa o segundo em 1.\n  - Crie um objeto rel\u00f3gio, atribua valores para hora, minuto e segundo e imprima a hora.\n  - Teste o m\u00e9todo nextSecond criando horas com os seguintes valores e testando:\n    - 10:02:30\n    - 15:50:59\n    - 21:59:59\n    - 23:59:59\n\n## Guide\n\n- [Solver.java](.cache/draft.java)\n- [solver.cpp](.cache/draft.cpp)\n- [solver.ts](.cache/draft.ts)\n\n![diagrama](diagrama.png)\n\n<!-- load diagrama.puml fenced=ts:filter -->\n\n```ts\nclass Time {\n  - hour   : int\n  - minute : int\n  - second : int\n  __\n  \n  ' inicializa os atributos todos para 0\n  ' invoca os m\u00e9todos setHour, setMinute e setSecond\n  ' para tentar atribuir valores v\u00e1lidos\n  + Time(hour : int, minute : int, second : int)\n  \n  ' retorna string no formato hh:mm:ss\n  + toString() : string\n  __\n  \n  ' apenas retorna o valor dos atributos\n  + getHour()   : int\n  + getMinute() : int\n  + getSecond() : int\n  __\n  \n  ' se valor for v\u00e1lido\n  '  atribui ao atributo hour\n  ' emite erro se for inv\u00e1lido\n  + setHour  (value   : int)\n  \n  ' se valor for v\u00e1lido\n  '   atribui ao atributo minute\n  ' emite erro se for inv\u00e1lido\n  + setMinute(value : int)\n  \n  ' se valor for v\u00e1lido\n  '   atribui ao atributo second\n  ' emite erro se for inv\u00e1lido\n  + setSecond(value : int)\n  __\n  \n  ' incrementa o atributo second em um segundo\n  ' ent\u00e3o, se necess\u00e1rio, incrementa o atributo minute\n  ' e, se necess\u00e1rio, incrementa o atributo hour\n  + nextSecond()\n}\n\nclass Legenda {\n  + atributoPublic\n  - atributoPrivate\n  # atributoProtected\n  __\n  + m\u00e9todoPublic()\n  - m\u00e9todoPrivate()\n  # m\u00e9todoProtected()\n}\n\n```\n\n<!-- load -->\n\n***\n\n## Shell\n\n```bash\n#__case set\n$show\n00:00:00\n\n#__case set\n\n$set 10 02 30\n$show \n10:02:30\n\n#__case set2\n$set 15 50 59\n$show\n15:50:59\n\n#__case error\n\n$set 25 10 30\nfail: hora invalida\n\n$show\n15:10:30\n\n#__case error2\n$set 1 70 50\nfail: minuto invalido\n$show\n01:10:50\n\n#__case error3\n$set 23 59 70\nfail: segundo invalido\n$show\n23:59:50\n\n#__case next\n$set 15 59 59\n$show\n15:59:59\n\n#__case next2\n\n$next\n$show\n16:00:00\n\n$end\n```\n\n***\n\n```bash\n#__case set\n$set 23 59 59\n$show\n23:59:59\n\n#__case next3\n\n$next\n$show\n00:00:00\n\n$end\n```\n\n***\n\n```bash\n#__case init\n$init 10 20 30\n$show\n10:20:30\n\n#__case init2\n\n$init 90 20 30\nfail: hora invalida\n\n$show\n00:20:30\n\n#__case init3\n$init 90 100 60\nfail: hora invalida\nfail: minuto invalido\nfail: segundo invalido\n\n$show\n00:00:00\n\n$end\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> set\nshow\nend\n========\n$show\n00:00:00\n$end\n<<<<<<<<\n\n>>>>>>>> set\nshow\nset 10 02 30\nshow \nend\n========\n$show\n00:00:00\n$set 10 02 30\n$show \n10:02:30\n$end\n<<<<<<<<\n\n>>>>>>>> set2\nshow\nset 10 02 30\nshow \nset 15 50 59\nshow\nend\n========\n$show\n00:00:00\n$set 10 02 30\n$show \n10:02:30\n$set 15 50 59\n$show\n15:50:59\n$end\n<<<<<<<<\n\n>>>>>>>> error\nshow\nset 10 02 30\nshow \nset 15 50 59\nshow\nset 25 10 30\nshow\nend\n========\n$show\n00:00:00\n$set 10 02 30\n$show \n10:02:30\n$set 15 50 59\n$show\n15:50:59\n$set 25 10 30\nfail: hora invalida\n$show\n15:10:30\n$end\n<<<<<<<<\n\n>>>>>>>> error2\nshow\nset 10 02 30\nshow \nset 15 50 59\nshow\nset 25 10 30\nshow\nset 1 70 50\nshow\nend\n========\n$show\n00:00:00\n$set 10 02 30\n$show \n10:02:30\n$set 15 50 59\n$show\n15:50:59\n$set 25 10 30\nfail: hora invalida\n$show\n15:10:30\n$set 1 70 50\nfail: minuto invalido\n$show\n01:10:50\n$end\n<<<<<<<<\n\n>>>>>>>> error3\nshow\nset 10 02 30\nshow \nset 15 50 59\nshow\nset 25 10 30\nshow\nset 1 70 50\nshow\nset 23 59 70\nshow\nend\n========\n$show\n00:00:00\n$set 10 02 30\n$show \n10:02:30\n$set 15 50 59\n$show\n15:50:59\n$set 25 10 30\nfail: hora invalida\n$show\n15:10:30\n$set 1 70 50\nfail: minuto invalido\n$show\n01:10:50\n$set 23 59 70\nfail: segundo invalido\n$show\n23:59:50\n$end\n<<<<<<<<\n\n>>>>>>>> next\nshow\nset 10 02 30\nshow \nset 15 50 59\nshow\nset 25 10 30\nshow\nset 1 70 50\nshow\nset 23 59 70\nshow\nset 15 59 59\nshow\nend\n========\n$show\n00:00:00\n$set 10 02 30\n$show \n10:02:30\n$set 15 50 59\n$show\n15:50:59\n$set 25 10 30\nfail: hora invalida\n$show\n15:10:30\n$set 1 70 50\nfail: minuto invalido\n$show\n01:10:50\n$set 23 59 70\nfail: segundo invalido\n$show\n23:59:50\n$set 15 59 59\n$show\n15:59:59\n$end\n<<<<<<<<\n\n>>>>>>>> next2\nshow\nset 10 02 30\nshow \nset 15 50 59\nshow\nset 25 10 30\nshow\nset 1 70 50\nshow\nset 23 59 70\nshow\nset 15 59 59\nshow\nnext\nshow\nend\n========\n$show\n00:00:00\n$set 10 02 30\n$show \n10:02:30\n$set 15 50 59\n$show\n15:50:59\n$set 25 10 30\nfail: hora invalida\n$show\n15:10:30\n$set 1 70 50\nfail: minuto invalido\n$show\n01:10:50\n$set 23 59 70\nfail: segundo invalido\n$show\n23:59:50\n$set 15 59 59\n$show\n15:59:59\n$next\n$show\n16:00:00\n$end\n<<<<<<<<\n\n>>>>>>>> set\nset 23 59 59\nshow\nend\n========\n$set 23 59 59\n$show\n23:59:59\n$end\n<<<<<<<<\n\n>>>>>>>> next3\nset 23 59 59\nshow\nnext\nshow\nend\n========\n$set 23 59 59\n$show\n23:59:59\n$next\n$show\n00:00:00\n$end\n<<<<<<<<\n\n>>>>>>>> init\ninit 10 20 30\nshow\nend\n========\n$init 10 20 30\n$show\n10:20:30\n$end\n<<<<<<<<\n\n>>>>>>>> init2\ninit 10 20 30\nshow\ninit 90 20 30\nshow\nend\n========\n$init 10 20 30\n$show\n10:20:30\n$init 90 20 30\nfail: hora invalida\n$show\n00:20:30\n$end\n<<<<<<<<\n\n>>>>>>>> init3\ninit 10 20 30\nshow\ninit 90 20 30\nshow\ninit 90 100 60\nshow\nend\n========\n$init 10 20 30\n$show\n10:20:30\n$init 90 20 30\nfail: hora invalida\n$show\n00:20:30\n$init 90 100 60\nfail: hora invalida\nfail: minuto invalido\nfail: segundo invalido\n$show\n00:00:00\n$end\n<<<<<<<<\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
