{
    "title": "@enxugar: Toalha com testes",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@enxugar: Toalha com testes</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Toalha com testes</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#testes\">Testes</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/enxugar/cover.jpg\" /></p>\n<h2>Intro</h2>\n<ul>\n<li>Crie uma classe Toalha <code>Towel</code> com os atributos cor <code>color</code>, tamanho <code>size</code> e umidade <code>wetness</code>.</li>\n<li>Crie um construtor que inicialize todos os atributos cor e tamanho com valores recebidos como par\u00e2metro e umidade com 0.</li>\n<li>Crie um m\u00e9todo enxugar <code>dry</code> que recebe um valor inteiro quantidade <code>amout</code> e AUMENTA o atributo umidade da toalha.</li>\n<li>Crie um m\u00e9todo torcer <code>wringOut</code> que zera o atributo umidade da towel.</li>\n<li>Crie um m\u00e9todo para pegar m\u00e1ximo de umidade <code>getMaxWetness</code> que retorna o valor m\u00e1ximo de umidade que essa toalha pode ter.</li>\n<li>O m\u00e1ximo de umidade que uma toalha pode ter \u00e9 de acordo com o tamanho dela:<ul>\n<li><code>P</code> -&gt; 10</li>\n<li><code>M</code> -&gt; 20</li>\n<li><code>G</code> -&gt; 30</li>\n</ul>\n</li>\n<li>Crie um m\u00e9todo que retorna se a toalha esta seca <code>isDry</code>, que retorna <code>true</code> se a umidade da toalha for 0 e <code>false</code> caso contr\u00e1rio.</li>\n</ul>\n<h2>Guide</h2>\n<p><a href=\"https://youtu.be/S956ep2PSzI?si=q9IYxafhWjaDVHTp\"><img alt=\"youtube icon\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/enxugar/../youguide.png\" /></a></p>\n<p><img alt=\"diagrama\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/enxugar/diagrama.png\" /></p>\n<h2>Testes</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE cria\u00e7\u00e3o</span>\n<span class=\"nv\">$criar</span><span class=\"w\"> </span>azul<span class=\"w\"> </span>P\n<span class=\"nv\">$mostrar</span>\nCor:<span class=\"w\"> </span>azul,<span class=\"w\"> </span>Tamanho:<span class=\"w\"> </span>P,<span class=\"w\"> </span>Umidade:<span class=\"w\"> </span><span class=\"m\">0</span>\n\n<span class=\"c1\">#TEST_CASE esta_seca</span>\n<span class=\"nv\">$seca</span>\nsim\n\n<span class=\"c1\">#TEST_CASE enxugar</span>\n<span class=\"nv\">$enxugar</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$mostrar</span>\nCor:<span class=\"w\"> </span>azul,<span class=\"w\"> </span>Tamanho:<span class=\"w\"> </span>P,<span class=\"w\"> </span>Umidade:<span class=\"w\"> </span><span class=\"m\">5</span>\n\n<span class=\"c1\">#TEST_CASE nao esta seca</span>\n<span class=\"nv\">$seca</span>\nnao\n\n<span class=\"c1\">#TEST_CASE toalha encharcada</span>\n<span class=\"nv\">$enxugar</span><span class=\"w\"> </span><span class=\"m\">5</span>\ntoalha<span class=\"w\"> </span>encharcada\n\n<span class=\"c1\">#TEST_CASE umidade maxima alcan\u00e7ada</span>\n<span class=\"nv\">$mostrar</span>\nCor:<span class=\"w\"> </span>azul,<span class=\"w\"> </span>Tamanho:<span class=\"w\"> </span>P,<span class=\"w\"> </span>Umidade:<span class=\"w\"> </span><span class=\"m\">10</span>\n\n<span class=\"nv\">$enxugar</span><span class=\"w\"> </span><span class=\"m\">5</span>\ntoalha<span class=\"w\"> </span>encharcada\n\n<span class=\"nv\">$mostrar</span>\nCor:<span class=\"w\"> </span>azul,<span class=\"w\"> </span>Tamanho:<span class=\"w\"> </span>P,<span class=\"w\"> </span>Umidade:<span class=\"w\"> </span><span class=\"m\">10</span>\n\n<span class=\"c1\">#TEST_CASE torcer</span>\n<span class=\"nv\">$torcer</span>\n<span class=\"nv\">$mostrar</span>\nCor:<span class=\"w\"> </span>azul,<span class=\"w\"> </span>Tamanho:<span class=\"w\"> </span>P,<span class=\"w\"> </span>Umidade:<span class=\"w\"> </span><span class=\"m\">0</span>\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<hr />\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE cria\u00e7\u00e3o</span>\n<span class=\"nv\">$criar</span><span class=\"w\"> </span>verde<span class=\"w\"> </span>G\n\n<span class=\"nv\">$mostrar</span>\nCor:<span class=\"w\"> </span>verde,<span class=\"w\"> </span>Tamanho:<span class=\"w\"> </span>G,<span class=\"w\"> </span>Umidade:<span class=\"w\"> </span><span class=\"m\">0</span>\n\n<span class=\"c1\">#TEST_CASE limite de 30 e encharcada</span>\n\n<span class=\"nv\">$enxugar</span><span class=\"w\"> </span><span class=\"m\">30</span>\ntoalha<span class=\"w\"> </span>encharcada\n<span class=\"nv\">$mostrar</span>\nCor:<span class=\"w\"> </span>verde,<span class=\"w\"> </span>Tamanho:<span class=\"w\"> </span>G,<span class=\"w\"> </span>Umidade:<span class=\"w\"> </span><span class=\"m\">30</span>\n\n<span class=\"c1\">#TEST_CASE n\u00e3o passa do limite</span>\n<span class=\"nv\">$enxugar</span><span class=\"w\"> </span><span class=\"m\">1</span>\ntoalha<span class=\"w\"> </span>encharcada\n<span class=\"nv\">$mostrar</span>\nCor:<span class=\"w\"> </span>verde,<span class=\"w\"> </span>Tamanho:<span class=\"w\"> </span>G,<span class=\"w\"> </span>Umidade:<span class=\"w\"> </span><span class=\"m\">30</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<h2>Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/enxugar/.cache/draft/cpp/shell.cpp\">shell.cpp</a></li>\n</ul>\n</li>\n<li>java<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/enxugar/.cache/draft/java/Shell.java\">Shell.java</a></li>\n</ul>\n</li>\n<li>ts<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/enxugar/.cache/draft/ts/shell.ts\">shell.ts</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT cria\u00e7\u00e3o\ncriar azul P\nmostrar\nend\n======== EXPECT\n$criar azul P\n$mostrar\nCor: azul, Tamanho: P, Umidade: 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT esta_seca\ncriar azul P\nmostrar\nseca\nend\n======== EXPECT\n$criar azul P\n$mostrar\nCor: azul, Tamanho: P, Umidade: 0\n$seca\nsim\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT enxugar\ncriar azul P\nmostrar\nseca\nenxugar 5\nmostrar\nend\n======== EXPECT\n$criar azul P\n$mostrar\nCor: azul, Tamanho: P, Umidade: 0\n$seca\nsim\n$enxugar 5\n$mostrar\nCor: azul, Tamanho: P, Umidade: 5\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT nao esta seca\ncriar azul P\nmostrar\nseca\nenxugar 5\nmostrar\nseca\nend\n======== EXPECT\n$criar azul P\n$mostrar\nCor: azul, Tamanho: P, Umidade: 0\n$seca\nsim\n$enxugar 5\n$mostrar\nCor: azul, Tamanho: P, Umidade: 5\n$seca\nnao\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT toalha encharcada\ncriar azul P\nmostrar\nseca\nenxugar 5\nmostrar\nseca\nenxugar 5\nend\n======== EXPECT\n$criar azul P\n$mostrar\nCor: azul, Tamanho: P, Umidade: 0\n$seca\nsim\n$enxugar 5\n$mostrar\nCor: azul, Tamanho: P, Umidade: 5\n$seca\nnao\n$enxugar 5\ntoalha encharcada\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT umidade maxima alcan\u00e7ada\ncriar azul P\nmostrar\nseca\nenxugar 5\nmostrar\nseca\nenxugar 5\nmostrar\nenxugar 5\nmostrar\nend\n======== EXPECT\n$criar azul P\n$mostrar\nCor: azul, Tamanho: P, Umidade: 0\n$seca\nsim\n$enxugar 5\n$mostrar\nCor: azul, Tamanho: P, Umidade: 5\n$seca\nnao\n$enxugar 5\ntoalha encharcada\n$mostrar\nCor: azul, Tamanho: P, Umidade: 10\n$enxugar 5\ntoalha encharcada\n$mostrar\nCor: azul, Tamanho: P, Umidade: 10\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT torcer\ncriar azul P\nmostrar\nseca\nenxugar 5\nmostrar\nseca\nenxugar 5\nmostrar\nenxugar 5\nmostrar\ntorcer\nmostrar\nend\n======== EXPECT\n$criar azul P\n$mostrar\nCor: azul, Tamanho: P, Umidade: 0\n$seca\nsim\n$enxugar 5\n$mostrar\nCor: azul, Tamanho: P, Umidade: 5\n$seca\nnao\n$enxugar 5\ntoalha encharcada\n$mostrar\nCor: azul, Tamanho: P, Umidade: 10\n$enxugar 5\ntoalha encharcada\n$mostrar\nCor: azul, Tamanho: P, Umidade: 10\n$torcer\n$mostrar\nCor: azul, Tamanho: P, Umidade: 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT cria\u00e7\u00e3o\ncriar verde G\nmostrar\nend\n======== EXPECT\n$criar verde G\n$mostrar\nCor: verde, Tamanho: G, Umidade: 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT limite de 30 e encharcada\ncriar verde G\nmostrar\nenxugar 30\nmostrar\nend\n======== EXPECT\n$criar verde G\n$mostrar\nCor: verde, Tamanho: G, Umidade: 0\n$enxugar 30\ntoalha encharcada\n$mostrar\nCor: verde, Tamanho: G, Umidade: 30\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT n\u00e3o passa do limite\ncriar verde G\nmostrar\nenxugar 30\nmostrar\nenxugar 1\nmostrar\nend\n======== EXPECT\n$criar verde G\n$mostrar\nCor: verde, Tamanho: G, Umidade: 0\n$enxugar 30\ntoalha encharcada\n$mostrar\nCor: verde, Tamanho: G, Umidade: 30\n$enxugar 1\ntoalha encharcada\n$mostrar\nCor: verde, Tamanho: G, Umidade: 30\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "function input() { return \"\"; }\nexport {};\n\nfunction main() {\n    // CRIE SUA TOALHA AQUI\n    // let toalha = new Toalha();\n    while (true) {\n        let line = input();\n        console.log(\"$\" + line);\n        \n        let par = line.split(\" \");\n        let cmd = par[0];\n\n        if (cmd == \"end\") {\n            break;\n        } \n        else if (cmd == \"criar\") { // ATUALIZE SUA TOALHA UTILIZANDO O CONSTRUTOR\n            // const cor = par[1];\n            // const tamanho = par[2];\n        } \n        else if (cmd == \"mostrar\") { // MOSTRE SUA TOALHA\n        } \n        else if (cmd == \"enxugar\") { // CHAME O METODO ENXUGAR\n            // const quantidade = +par[1];\n        } \n        else if (cmd == \"seca\") { // UTILIZE O METODO PARA OBTER SE ESTA SECA E IMPRIMIR SIM OU NAO\n        } \n        else if (cmd == \"torcer\") { // CHAME O METODO TORCER\n        } \n        else {\n            console.log(\"comando invalido\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.Scanner;\n\n\npublic class Shell {\n    \n    public static void main(String[] a) {\n        // CRIE SUA TOALHA AQUI\n        // Toalha toalha = new Toalha();\n        \n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"criar\")) { // ATUALIZE SUA TOALHA USANDO O CONSTRUTOR\n                // var cor = par[1];\n                // var tamanho = par[2];\n            }\n            else if (cmd.equals(\"mostrar\")) { // MOSTRE SUA TOALHA\n            }\n            else if (cmd.equals(\"enxugar\")) { // ENXUGUE\n                // var quantidade = Integer.parseInt(par[1]);\n            }\n            else if (cmd.equals(\"seca\")) { // OBTENHA SE ESTA SECA E IMPRIMA SIM OU NAO\n            }\n            else if (cmd.equals(\"torcer\")) { // CHAME O METODO TORCER\n            }\n            else {\n                System.out.println(\"comando invalido\");\n            }\n        }\n    }\n    private static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <sstream>\nusing namespace std;\n\nint main() {\n    // CRIE SUA TOALHA AQUI\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n\n        stringstream par(line);\n        par >> cmd;\n\n        if (cmd == \"mostrar\") { // MOSTRE A TOALHA\n        } \n        else if (cmd == \"criar\") { // ATUALIZE A TOALHA UTILIZAND O CONSTRUTOR\n            // string cor, tamanho;\n            // par >> cor >> tamanho;\n        } \n        else if (cmd == \"enxugar\") { // USE O METODO ENXUGAR\n            // int umidade {};\n            // par >> umidade;\n        } \n        else if (cmd == \"torcer\") { // USE O METODO TORCER\n        } \n        else if (cmd == \"seca\") { // VERIFIQUE SE ESTA SECA E IMPRIMA \"sim\" OU \"nao\"\n        } \n        else if (cmd == \"end\") {\n            break;\n        } \n        else {\n            cout << \"fail: comando invalido\" << endl;\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
