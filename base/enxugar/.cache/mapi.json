{
    "title": "@enxugar: Toalha com testes",
    "description": "# Toalha com testes\n\n<!-- toch -->\n[Intro](#intro) | [Guide](#guide) | [Testes](#testes) | [Draft](#draft)\n-- | -- | -- | --\n<!-- toch -->\n\n![_](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/enxugar/cover.jpg)\n\n## Intro\n\n- Crie uma classe Toalha `Towel` com os atributos cor `color`, tamanho `size` e umidade `wetness`.\n- Crie um construtor que inicialize todos os atributos cor e tamanho com valores recebidos como par\u00e2metro e umidade com 0.\n- Crie um m\u00e9todo enxugar `dry` que recebe um valor inteiro quantidade `amout` e AUMENTA o atributo umidade da toalha.\n- Crie um m\u00e9todo torcer `wringOut` que zera o atributo umidade da towel.\n- Crie um m\u00e9todo para pegar m\u00e1ximo de umidade `getMaxWetness` que retorna o valor m\u00e1ximo de umidade que essa toalha pode ter.\n- O m\u00e1ximo de umidade que uma toalha pode ter \u00e9 de acordo com o tamanho dela:\n  - `P` -> 10\n  - `M` -> 20\n  - `G` -> 30\n- Crie um m\u00e9todo que retorna se a toalha esta seca `isDry`, que retorna `true` se a umidade da toalha for 0 e `false` caso contr\u00e1rio.\n\n## Guide\n\n[![youtube icon](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/enxugar/../youguide.png)](https://youtu.be/S956ep2PSzI?si=q9IYxafhWjaDVHTp)\n\n![diagrama](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/enxugar/diagrama.png)\n\n## Testes\n\n```bash\n#TEST_CASE cria\u00e7\u00e3o\n$criar azul P\n$mostrar\nCor: azul, Tamanho: P, Umidade: 0\n\n#TEST_CASE esta_seca\n$seca\nsim\n\n#TEST_CASE enxugar\n$enxugar 5\n$mostrar\nCor: azul, Tamanho: P, Umidade: 5\n\n#TEST_CASE nao esta seca\n$seca\nnao\n\n#TEST_CASE toalha encharcada\n$enxugar 5\ntoalha encharcada\n\n#TEST_CASE umidade maxima alcan\u00e7ada\n$mostrar\nCor: azul, Tamanho: P, Umidade: 10\n\n$enxugar 5\ntoalha encharcada\n\n$mostrar\nCor: azul, Tamanho: P, Umidade: 10\n\n#TEST_CASE torcer\n$torcer\n$mostrar\nCor: azul, Tamanho: P, Umidade: 0\n\n$end\n\n```\n\n---\n\n```bash\n\n#TEST_CASE cria\u00e7\u00e3o\n$criar verde G\n\n$mostrar\nCor: verde, Tamanho: G, Umidade: 0\n\n#TEST_CASE limite de 30 e encharcada\n\n$enxugar 30\ntoalha encharcada\n$mostrar\nCor: verde, Tamanho: G, Umidade: 30\n\n#TEST_CASE n\u00e3o passa do limite\n$enxugar 1\ntoalha encharcada\n$mostrar\nCor: verde, Tamanho: G, Umidade: 30\n$end\n```\n\n## Draft\n\n<!-- links .cache/draft -->\n- cpp\n  - [shell.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/enxugar/.cache/draft/cpp/shell.cpp)\n- java\n  - [Shell.java](https://github.com/qxcodepoo/arcade/blob/master/base/enxugar/.cache/draft/java/Shell.java)\n- ts\n  - [shell.ts](https://github.com/qxcodepoo/arcade/blob/master/base/enxugar/.cache/draft/ts/shell.ts)\n<!-- links -->\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT cria\u00e7\u00e3o\ncriar azul P\nmostrar\nend\n======== EXPECT\n$criar azul P\n$mostrar\nCor: azul, Tamanho: P, Umidade: 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT esta_seca\ncriar azul P\nmostrar\nseca\nend\n======== EXPECT\n$criar azul P\n$mostrar\nCor: azul, Tamanho: P, Umidade: 0\n$seca\nsim\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT enxugar\ncriar azul P\nmostrar\nseca\nenxugar 5\nmostrar\nend\n======== EXPECT\n$criar azul P\n$mostrar\nCor: azul, Tamanho: P, Umidade: 0\n$seca\nsim\n$enxugar 5\n$mostrar\nCor: azul, Tamanho: P, Umidade: 5\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT nao esta seca\ncriar azul P\nmostrar\nseca\nenxugar 5\nmostrar\nseca\nend\n======== EXPECT\n$criar azul P\n$mostrar\nCor: azul, Tamanho: P, Umidade: 0\n$seca\nsim\n$enxugar 5\n$mostrar\nCor: azul, Tamanho: P, Umidade: 5\n$seca\nnao\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT toalha encharcada\ncriar azul P\nmostrar\nseca\nenxugar 5\nmostrar\nseca\nenxugar 5\nend\n======== EXPECT\n$criar azul P\n$mostrar\nCor: azul, Tamanho: P, Umidade: 0\n$seca\nsim\n$enxugar 5\n$mostrar\nCor: azul, Tamanho: P, Umidade: 5\n$seca\nnao\n$enxugar 5\ntoalha encharcada\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT umidade maxima alcan\u00e7ada\ncriar azul P\nmostrar\nseca\nenxugar 5\nmostrar\nseca\nenxugar 5\nmostrar\nenxugar 5\nmostrar\nend\n======== EXPECT\n$criar azul P\n$mostrar\nCor: azul, Tamanho: P, Umidade: 0\n$seca\nsim\n$enxugar 5\n$mostrar\nCor: azul, Tamanho: P, Umidade: 5\n$seca\nnao\n$enxugar 5\ntoalha encharcada\n$mostrar\nCor: azul, Tamanho: P, Umidade: 10\n$enxugar 5\ntoalha encharcada\n$mostrar\nCor: azul, Tamanho: P, Umidade: 10\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT torcer\ncriar azul P\nmostrar\nseca\nenxugar 5\nmostrar\nseca\nenxugar 5\nmostrar\nenxugar 5\nmostrar\ntorcer\nmostrar\nend\n======== EXPECT\n$criar azul P\n$mostrar\nCor: azul, Tamanho: P, Umidade: 0\n$seca\nsim\n$enxugar 5\n$mostrar\nCor: azul, Tamanho: P, Umidade: 5\n$seca\nnao\n$enxugar 5\ntoalha encharcada\n$mostrar\nCor: azul, Tamanho: P, Umidade: 10\n$enxugar 5\ntoalha encharcada\n$mostrar\nCor: azul, Tamanho: P, Umidade: 10\n$torcer\n$mostrar\nCor: azul, Tamanho: P, Umidade: 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT cria\u00e7\u00e3o\ncriar verde G\nmostrar\nend\n======== EXPECT\n$criar verde G\n$mostrar\nCor: verde, Tamanho: G, Umidade: 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT limite de 30 e encharcada\ncriar verde G\nmostrar\nenxugar 30\nmostrar\nend\n======== EXPECT\n$criar verde G\n$mostrar\nCor: verde, Tamanho: G, Umidade: 0\n$enxugar 30\ntoalha encharcada\n$mostrar\nCor: verde, Tamanho: G, Umidade: 30\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT n\u00e3o passa do limite\ncriar verde G\nmostrar\nenxugar 30\nmostrar\nenxugar 1\nmostrar\nend\n======== EXPECT\n$criar verde G\n$mostrar\nCor: verde, Tamanho: G, Umidade: 0\n$enxugar 30\ntoalha encharcada\n$mostrar\nCor: verde, Tamanho: G, Umidade: 30\n$enxugar 1\ntoalha encharcada\n$mostrar\nCor: verde, Tamanho: G, Umidade: 30\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "function input() { return \"\"; }\nexport {};\n\nfunction main() {\n    // CRIE SUA TOALHA AQUI\n    // let toalha = new Toalha();\n    while (true) {\n        let line = input();\n        console.log(\"$\" + line);\n        \n        let par = line.split(\" \");\n        let cmd = par[0];\n\n        if (cmd == \"end\") {\n            break;\n        } \n        else if (cmd == \"criar\") { // ATUALIZE SUA TOALHA UTILIZANDO O CONSTRUTOR\n            // const cor = par[1];\n            // const tamanho = par[2];\n        } \n        else if (cmd == \"mostrar\") { // MOSTRE SUA TOALHA\n        } \n        else if (cmd == \"enxugar\") { // CHAME O METODO ENXUGAR\n            // const quantidade = +par[1];\n        } \n        else if (cmd == \"seca\") { // UTILIZE O METODO PARA OBTER SE ESTA SECA E IMPRIMIR SIM OU NAO\n        } \n        else if (cmd == \"torcer\") { // CHAME O METODO TORCER\n        } \n        else {\n            console.log(\"comando invalido\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.Scanner;\n\n\npublic class Shell {\n    \n    public static void main(String[] a) {\n        // CRIE SUA TOALHA AQUI\n        // Toalha toalha = new Toalha();\n        \n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"criar\")) { // ATUALIZE SUA TOALHA USANDO O CONSTRUTOR\n                // var cor = par[1];\n                // var tamanho = par[2];\n            }\n            else if (cmd.equals(\"mostrar\")) { // MOSTRE SUA TOALHA\n            }\n            else if (cmd.equals(\"enxugar\")) { // ENXUGUE\n                // var quantidade = Integer.parseInt(par[1]);\n            }\n            else if (cmd.equals(\"seca\")) { // OBTENHA SE ESTA SECA E IMPRIMA SIM OU NAO\n            }\n            else if (cmd.equals(\"torcer\")) { // CHAME O METODO TORCER\n            }\n            else {\n                System.out.println(\"comando invalido\");\n            }\n        }\n    }\n    private static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <sstream>\nusing namespace std;\n\nint main() {\n    // CRIE SUA TOALHA AQUI\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n\n        stringstream par(line);\n        par >> cmd;\n\n        if (cmd == \"mostrar\") { // MOSTRE A TOALHA\n        } \n        else if (cmd == \"criar\") { // ATUALIZE A TOALHA UTILIZAND O CONSTRUTOR\n            // string cor, tamanho;\n            // par >> cor >> tamanho;\n        } \n        else if (cmd == \"enxugar\") { // USE O METODO ENXUGAR\n            // int umidade {};\n            // par >> umidade;\n        } \n        else if (cmd == \"torcer\") { // USE O METODO TORCER\n        } \n        else if (cmd == \"seca\") { // VERIFIQUE SE ESTA SECA E IMPRIMA \"sim\" OU \"nao\"\n        } \n        else if (cmd == \"end\") {\n            break;\n        } \n        else {\n            cout << \"fail: comando invalido\" << endl;\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
