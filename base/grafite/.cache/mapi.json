{
    "title": "@grafite: Porta minas de um grafite s\u00f3",
    "description": "# Porta minas de um grafite s\u00f3\n\n<!-- toch -->\n[Intro](#intro) | [Guide](#guide) | [Shell](#shell) | [Draft](#draft)\n-- | -- | -- | --\n<!-- toch -->\n\n![cover](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/grafite/cover.jpg)\n\nFa\u00e7a o modelo de uma lapiseira que pode conter um \u00fanico grafite.\n\n[![explica\u00e7\u00e3o](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/grafite/../../wiki/images/explicacao.png)](https://youtu.be/LvZODN2rL6s)\n\n## Intro\n\nO objetivo dessa atividade \u00e9 implementar uma lapiseira que permite inserir, remover grafite e escrever em uma folha, considerando a dureza e tamanho do grafite.\n\n- Descri\u00e7\u00e3o\n  - A lapiseira \u00e9 capaz de iniciar, inserir e remover grafite, al\u00e9m de escrever em uma folha.\n  - Para inserir um grafite, \u00e9 necess\u00e1rio especificar o calibre (float), a dureza (string) e o tamanho em mm (int).\n  - A remo\u00e7\u00e3o do grafite s\u00f3 \u00e9 poss\u00edvel se houver algum na lapiseira.\n  - A escrita na folha s\u00f3 \u00e9 poss\u00edvel se houver grafite suficiente e se o tamanho do grafite for superior a 10mm.\n  - A quantidade de grafite gasto varia de acordo com a dureza do grafite. Quanto mais macio, mais ele se desgasta.\n  - Quando o tamanho do grafite atinge 10mm, n\u00e3o \u00e9 mais poss\u00edvel escrever.\n  - Se n\u00e3o houver grafite suficiente para terminar a escrita na folha, \u00e9 emitido um aviso de texto incompleto.\n\n- Responsabilidades\n  - A classe Grafite `Lead` \u00e9 respons\u00e1vel por armazenar as informa\u00e7\u00f5es do grafite.\n    - `thickness` \u00e9 a espessura e ter\u00e1 valores como 0.3, 0.5, 0.7.\n    - `hardness` \u00e9 a dureza e poder\u00e1 ter os seguintes valores: `HB, 2B, 4B, 6B`.\n    - O m\u00e9todo `usagePerSheet` retorna a quantidade de grafite gasto por folha.\n      - Um grafite `HB` gasta `1mm` por folha.\n      - Um grafite `2B` gasta `2mm` por folha.\n      - Um grafite `4B` gasta `4mm` por folha.\n      - Um grafite `6B` gasta `6mm` por folha.\n    - `size` representa o tamanho do grafite em `mil\u00edmetros`.\n  - A classe `Pencil` \u00e9 respons\u00e1vel por gerenciar as opera\u00e7\u00f5es de inser\u00e7\u00e3o, remo\u00e7\u00e3o de grafite e escrita na folha.\n    - Ela referencia um \u00fanico objeto lapiseira como atributo.\n    - E tamb\u00e9m possui um indicador de espessura `thickness`.\n- Comandos\n  - Todos os comandos seguem o modelo `$comando arg1 arg2 ...`.\n  - `$iniciar calibre` - Inicializa a lapiseira com um determinado calibre.\n  - `$inserir calibre dureza tamanho` - Insere um grafite com o calibre, dureza e tamanho especificados.\n    - erros:\n      - `fail: calibre incompativel` - Se o calibre do grafite for diferente do calibre da lapiseira.\n      - `fail: ja existe grafite` - Se j\u00e1 houver um grafite na lapiseira.\n  - `$remover` - Remove o grafite da lapiseira, se houver.\n    - erros:\n      - `fail: nao existe grafite` - Se n\u00e3o houver grafite na lapiseira.\n  - `$escrever` - Escreve na folha, considerando o grafite presente na lapiseira.\n    - O grafite \u00e9 gasto de acordo com a dureza.\n    - erros:\n      - `fail: nao existe grafite` - Se n\u00e3o houver grafite na lapiseira.\n      - `fail: tamanho insuficiente` - Se o tamanho do grafite for insuficiente para come\u00e7ar a escrita.\n      - `fail: folha incompleta` - Se o grafite n\u00e3o for suficiente para terminar a escrita.\n\n## Guide\n\n![diagrama](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/grafite/diagrama.png)\n\n- Parte 1: Inserir\n  - Crie a classe Grafite `Lead` com o atributo tamanho `size`.\n  - Crie a classe Lapiseira `Pencil` com o atributo ponta `tip` inicializado como `null`.\n  - Implemente o m\u00e9todo tem grafite `hasGrafite` que retorna `true` se houver grafite na lapiseira.\n  - Implemente o m\u00e9todo inserir `insert` que insere um grafite na lapiseira, se n\u00e3o houver grafite.\n  - Implemente o m\u00e9todo `toString` que mostra a lapiseira e o grafite presente.\n\n- Parte 2: Remover Grafite\n  - Implemente o m\u00e9todo `remove` que retira o grafite da lapiseira, se houver.\n  - Verifique se o m\u00e9todo `remove` retorna o grafite removido ou `null` se n\u00e3o havia grafite.\n\n- Parte 3: Escrever na Folha\n  - Implemente o m\u00e9todo `writePage` que escreve na folha.\n  - Implemente o m\u00e9todo `usagePerSheet` que retorna a quantidade de grafite gasto por folha.\n  - Verifique se a lapiseira consegue escrever na folha.\n  - Fa\u00e7a as verifica\u00e7\u00f5es antes de escrever na folha.\n  - Para ver se o grafite ser\u00e1 suficiente para escrever na folha, verifique qual o tamanho final que ele teria se fizesse a folha completa.\n    - Se esse tamanho for menor que 10mm, ele deve gastar o que for poss\u00edvel e parar a folha pela metade.\n\n## Shell\n\n```bash\n\n#TEST_CASE inserindo grafites\n\n$init 0.5\n$show\ncalibre: 0.5, grafite: null\n\n#TEST_CASE incompativel\n\n$insert 0.7 2B 50\nfail: calibre incompativel\n$insert 0.5 2B 50\n$show\ncalibre: 0.5, grafite: [0.5:2B:50]\n$end\n```\n\n***\n\n```bash\n\n#TEST_CASE inserindo\n\n$init 0.3\n$insert 0.3 2B 50\n$show\ncalibre: 0.3, grafite: [0.3:2B:50]\n\n#TEST_CASE ja existe\n\n$insert 0.3 4B 70\nfail: ja existe grafite\n$show\ncalibre: 0.3, grafite: [0.3:2B:50]\n\n#TEST_CASE removendo\n\n$remove\n$show\ncalibre: 0.3, grafite: null\n\n#TEST_CASE reinserindo\n\n$insert 0.3 4B 70\n$show\ncalibre: 0.3, grafite: [0.3:4B:70]\n$end\n```\n\n***\n\n```bash\n\n#TEST_CASE sem grafite\n\n$init 0.9\n$write\nfail: nao existe grafite\n\n#TEST_CASE escrevendo 1\n\n$insert 0.9 4B 14\n$write\n$write\nfail: tamanho insuficiente\n$show\ncalibre: 0.9, grafite: [0.9:4B:10]\n$end\n```\n\n***\n\n```bash\n\n#TEST_CASE escrevendo 2\n\n$init 0.9\n$insert 0.9 4B 16\n$write\n$show\ncalibre: 0.9, grafite: [0.9:4B:12]\n\n#TEST_CASE escrevendo 3\n\n$write\nfail: folha incompleta\n$show\ncalibre: 0.9, grafite: [0.9:4B:10]\n$end\n```\n\n## Draft\n\n<!-- links .cache/draft -->\n- cpp\n  - [shell.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/grafite/.cache/draft/cpp/shell.cpp)\n- java\n  - [Shell.java](https://github.com/qxcodepoo/arcade/blob/master/base/grafite/.cache/draft/java/Shell.java)\n- ts\n  - [shell.ts](https://github.com/qxcodepoo/arcade/blob/master/base/grafite/.cache/draft/ts/shell.ts)\n<!-- links -->\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT inserindo grafites\ninit 0.5\nshow\nend\n======== EXPECT\n$init 0.5\n$show\ncalibre: 0.5, grafite: null\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT incompativel\ninit 0.5\nshow\ninsert 0.7 2B 50\ninsert 0.5 2B 50\nshow\nend\n======== EXPECT\n$init 0.5\n$show\ncalibre: 0.5, grafite: null\n$insert 0.7 2B 50\nfail: calibre incompativel\n$insert 0.5 2B 50\n$show\ncalibre: 0.5, grafite: [0.5:2B:50]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT inserindo\ninit 0.3\ninsert 0.3 2B 50\nshow\nend\n======== EXPECT\n$init 0.3\n$insert 0.3 2B 50\n$show\ncalibre: 0.3, grafite: [0.3:2B:50]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT ja existe\ninit 0.3\ninsert 0.3 2B 50\nshow\ninsert 0.3 4B 70\nshow\nend\n======== EXPECT\n$init 0.3\n$insert 0.3 2B 50\n$show\ncalibre: 0.3, grafite: [0.3:2B:50]\n$insert 0.3 4B 70\nfail: ja existe grafite\n$show\ncalibre: 0.3, grafite: [0.3:2B:50]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT removendo\ninit 0.3\ninsert 0.3 2B 50\nshow\ninsert 0.3 4B 70\nshow\nremove\nshow\nend\n======== EXPECT\n$init 0.3\n$insert 0.3 2B 50\n$show\ncalibre: 0.3, grafite: [0.3:2B:50]\n$insert 0.3 4B 70\nfail: ja existe grafite\n$show\ncalibre: 0.3, grafite: [0.3:2B:50]\n$remove\n$show\ncalibre: 0.3, grafite: null\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT reinserindo\ninit 0.3\ninsert 0.3 2B 50\nshow\ninsert 0.3 4B 70\nshow\nremove\nshow\ninsert 0.3 4B 70\nshow\nend\n======== EXPECT\n$init 0.3\n$insert 0.3 2B 50\n$show\ncalibre: 0.3, grafite: [0.3:2B:50]\n$insert 0.3 4B 70\nfail: ja existe grafite\n$show\ncalibre: 0.3, grafite: [0.3:2B:50]\n$remove\n$show\ncalibre: 0.3, grafite: null\n$insert 0.3 4B 70\n$show\ncalibre: 0.3, grafite: [0.3:4B:70]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT sem grafite\ninit 0.9\nwrite\nend\n======== EXPECT\n$init 0.9\n$write\nfail: nao existe grafite\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT escrevendo 1\ninit 0.9\nwrite\ninsert 0.9 4B 14\nwrite\nwrite\nshow\nend\n======== EXPECT\n$init 0.9\n$write\nfail: nao existe grafite\n$insert 0.9 4B 14\n$write\n$write\nfail: tamanho insuficiente\n$show\ncalibre: 0.9, grafite: [0.9:4B:10]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT escrevendo 2\ninit 0.9\ninsert 0.9 4B 16\nwrite\nshow\nend\n======== EXPECT\n$init 0.9\n$insert 0.9 4B 16\n$write\n$show\ncalibre: 0.9, grafite: [0.9:4B:12]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT escrevendo 3\ninit 0.9\ninsert 0.9 4B 16\nwrite\nshow\nwrite\nshow\nend\n======== EXPECT\n$init 0.9\n$insert 0.9 4B 16\n$write\n$show\ncalibre: 0.9, grafite: [0.9:4B:12]\n$write\nfail: folha incompleta\n$show\ncalibre: 0.9, grafite: [0.9:4B:10]\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "function input() { return \"\"; }\nexport {};\n\nfunction main() {\n\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(\" \");\n        const cmd = par[0];\n\n        if (cmd == \"end\") {\n            break;\n        }\n        // else if (cmd == \"init\") { \n        //     const thickness = parseFloat(par[1]);\n        // }\n        // else if (cmd == \"show\") { \n        // }\n        // else if (cmd == \"insert\") { \n        //     const thickness = parseFloat(par[1]);\n        //     const hardness = par[2];\n        //     const size = parseInt(par[3]);\n        // }\n        // else if (cmd == \"remove\") { \n        // }\n        // else if (cmd == \"write\") { \n        // }\n        else {\n            console.log(\"fail: comando invalido\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.Scanner;\nimport java.text.DecimalFormat;\n\n\npublic class Shell {\n    public static void main(String[] args) {\n\n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            // else if (cmd.equals(\"init\")) { \n            //     var thickness = Double.parseDouble(par[1]);\n            // }\n            // else if (cmd.equals(\"show\")) { \n            // }\n            // else if (cmd.equals(\"insert\")) { \n            //     var thickness = Double.parseDouble(par[1]);\n            //     var hardness = par[2];\n            //     var size = Integer.parseInt(par[3]);\n            // }\n            // else if (cmd.equals(\"remove\")) { \n            // }\n            // else if (cmd.equals(\"write\")) { \n            // }\n            else {\n                System.out.println(\"fail: comando invalido\");\n            }\n        }\n    }\n\n    static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <memory>\n#include <utility> //exchange\n#include <sstream>\nusing namespace std;\n\nint main() {\n    \n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } \n        // else if (cmd == \"show\") { \n        // }\n        // else if (cmd == \"init\") { \n        //     float thickness;\n        //     ss >> thickness;\n        // }\n        // else if (cmd == \"insert\") { \n        //     float thickness;\n        //     string hardness;\n        //     int size;\n        //     ss >> thickness >> hardness >> size;\n        // }\n        // else if (cmd == \"remove\") { \n        // }\n        // else if (cmd == \"write\") { \n        // }\n        else {\n            cout << \"fail: comando invalido\" << endl;\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
