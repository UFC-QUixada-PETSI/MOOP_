{
    "title": "@tamagotchi: Alimente, brinque e mate",
    "description": "# Alimente, brinque e mate\n\n<!-- toch -->\n[Intro](#intro) | [Guide](#guide) | [Shell](#shell) | [Draft](#draft)\n-- | -- | -- | --\n<!-- toch -->\n\n![cover](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/tamagotchi/cover.jpg)\n\nVoc\u00ea deve implementar um simulador de bichinho virtual. Ele poder\u00e1 brincar, dormir e tomar banho. E eventualmente morrer\u00e1, se voc\u00ea n\u00e3o cuidar bem dele.\n\n***\n\n## Intro\n\nSeu sistema dever\u00e1:\n\n- Classe `Tamagochi`\n  - \u00c9 respons\u00e1vel por armazenar os dados relativos ao bichinho, controlar os limites permitidos para os atributos e registrar a morte.\n  - Construtor\n    - Recebe energia m\u00e1xima`energyMax` e limpeza m\u00e1xima `cleanMax` do pet que representam os valores m\u00e1ximo de energia e limpeza.\n    - Energia `energy` e limpeza `clean` devem ser iniciados no m\u00e1ximo.\n    - Idade `age` inicia em zero e aumenta a cada turno.\n    - Vivo `alive` inicia como `true` porque o bichinho inicia vivo.\n  - Os m\u00e9todos `set` alteram os valores dentro dos limites de 0 at\u00e9 o m\u00e1ximo permitido e se o valor em algum momento for 0, muda o valor de vivo para false.\n- Classe `Game`\n  - \u00c9 respons\u00e1vel por armazenar o bichinho.\n  - \u00c9 onde est\u00e3o localizadas as l\u00f3gicas sobre as a\u00e7\u00f5es de brincar `play`, dar banho `shower` e dormir `sleep`.\n  - Cada opera\u00e7\u00e3o causa aumento e redu\u00e7\u00f5es nos atributos utilizando-se os m\u00e9todos `set` e `get` do `Tamagotchi`.\n  - Antes de qualquer a\u00e7\u00e3o, \u00e9 necess\u00e1rio verificar se o bicho est\u00e1 vivo. Pois brincar com bichos mortos n\u00e3o \u00e9 recomendado.\n\n## Guide\n\n![diagrama](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/tamagotchi/diagrama.png)\n\n***\n\n## Shell\n\n```bash\n#TEST_CASE inicio\n# O comando \"$init energia limpeza\" recebe os valores do pet.\n# O pet inicia com 0 de idade.\n# Toda vez que $init \u00e9 chamado, um novo pet \u00e9 criado.\n$init 20 15\n# O comando \"$show\" mostra os par\u00e2metros do Pet na seguinte ordem\n# Energia/Max, Limpeza/Max, Idade\n$show\nE:20/20, L:15/15, I:0\n$init 10 50\n$show\nE:10/10, L:50/50, I:0\n$end\n```\n\n***\n\n```bash\n#TEST_CASE play - Brincar \n# O comando \"$play\" altera em -2 energia, -3 limpeza, +1 idade.\n$init 20 15\n$play\n$show\nE:18/20, L:12/15, I:1\n$play\n$play\n$show\nE:14/20, L:6/15, I:3\n\n#TEST_CASE dormir\n# O Comando \"$sleep\" aumenta energia at\u00e9 o m\u00e1ximo e idade aumenta do n\u00famero de turnos que o pet dormiu.\n$sleep\n$show\nE:20/20, L:6/15, I:9\n\n#TEST_CASE tomar banho\n# O comando \"$shower\" alteram em -3 energia, MAX na limpeza, +2 na idade.\n$shower\n$show\nE:17/20, L:15/15, I:11\n\n#TEST_CASE dormir sem sono\n# Para dormir, precisa ter perdido pelo menos 5 unidades de energia\n$sleep\nfail: nao esta com sono\n\n#TEST_CASE morrer\n# Se algum atributo atingir 0, o pet morre e n\u00e3o poder\u00e1 executar nenhuma a\u00e7\u00e3o\n$play\n$play\n$play\n$play\n$show\nE:9/20, L:3/15, I:15\n$play\nfail: pet morreu de sujeira\n$show\nE:7/20, L:0/15, I:16\n$play\nfail: pet esta morto\n$shower\nfail: pet esta morto\n$sleep\nfail: pet esta morto\n$end\n```\n\n***\n\n```bash\n#TEST_CASE fraqueza\n$init 5 10\n$play\n$play\n$play\nfail: pet morreu de fraqueza\n\n#TEST_CASE morto de fraqueza\n$play\nfail: pet esta morto\n$show\nE:0/5, L:1/10, I:3\n$end\n```\n\n## Draft\n\n<!-- links .cache/draft -->\n- cpp\n  - [shell.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/tamagotchi/.cache/draft/cpp/shell.cpp)\n- java\n  - [Shell.java](https://github.com/qxcodepoo/arcade/blob/master/base/tamagotchi/.cache/draft/java/Shell.java)\n- ts\n  - [shell.ts](https://github.com/qxcodepoo/arcade/blob/master/base/tamagotchi/.cache/draft/ts/shell.ts)\n<!-- links -->\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT inicio\ninit 20 15\nshow\ninit 10 50\nshow\nend\n======== EXPECT\n$init 20 15\n$show\nE:20/20, L:15/15, I:0\n$init 10 50\n$show\nE:10/10, L:50/50, I:0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT play - Brincar \ninit 20 15\nplay\nshow\nplay\nplay\nshow\nend\n======== EXPECT\n$init 20 15\n$play\n$show\nE:18/20, L:12/15, I:1\n$play\n$play\n$show\nE:14/20, L:6/15, I:3\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dormir\ninit 20 15\nplay\nshow\nplay\nplay\nshow\nsleep\nshow\nend\n======== EXPECT\n$init 20 15\n$play\n$show\nE:18/20, L:12/15, I:1\n$play\n$play\n$show\nE:14/20, L:6/15, I:3\n$sleep\n$show\nE:20/20, L:6/15, I:9\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT tomar banho\ninit 20 15\nplay\nshow\nplay\nplay\nshow\nsleep\nshow\nshower\nshow\nend\n======== EXPECT\n$init 20 15\n$play\n$show\nE:18/20, L:12/15, I:1\n$play\n$play\n$show\nE:14/20, L:6/15, I:3\n$sleep\n$show\nE:20/20, L:6/15, I:9\n$shower\n$show\nE:17/20, L:15/15, I:11\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dormir sem sono\ninit 20 15\nplay\nshow\nplay\nplay\nshow\nsleep\nshow\nshower\nshow\nsleep\nend\n======== EXPECT\n$init 20 15\n$play\n$show\nE:18/20, L:12/15, I:1\n$play\n$play\n$show\nE:14/20, L:6/15, I:3\n$sleep\n$show\nE:20/20, L:6/15, I:9\n$shower\n$show\nE:17/20, L:15/15, I:11\n$sleep\nfail: nao esta com sono\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT morrer\ninit 20 15\nplay\nshow\nplay\nplay\nshow\nsleep\nshow\nshower\nshow\nsleep\nplay\nplay\nplay\nplay\nshow\nplay\nshow\nplay\nshower\nsleep\nend\n======== EXPECT\n$init 20 15\n$play\n$show\nE:18/20, L:12/15, I:1\n$play\n$play\n$show\nE:14/20, L:6/15, I:3\n$sleep\n$show\nE:20/20, L:6/15, I:9\n$shower\n$show\nE:17/20, L:15/15, I:11\n$sleep\nfail: nao esta com sono\n$play\n$play\n$play\n$play\n$show\nE:9/20, L:3/15, I:15\n$play\nfail: pet morreu de sujeira\n$show\nE:7/20, L:0/15, I:16\n$play\nfail: pet esta morto\n$shower\nfail: pet esta morto\n$sleep\nfail: pet esta morto\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT fraqueza\ninit 5 10\nplay\nplay\nplay\nend\n======== EXPECT\n$init 5 10\n$play\n$play\n$play\nfail: pet morreu de fraqueza\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT morto de fraqueza\ninit 5 10\nplay\nplay\nplay\nplay\nshow\nend\n======== EXPECT\n$init 5 10\n$play\n$play\n$play\nfail: pet morreu de fraqueza\n$play\nfail: pet esta morto\n$show\nE:0/5, L:1/10, I:3\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\nfunction main() {\n    // CRIE SEU JOGO AQUI COM UM PET ZERADO\n\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(\" \");\n        const cmd = par[0];\n\n        if (cmd == \"end\") {\n            break;\n        } \n        // else if (cmd == \"init\") {\n        //     // CRIE UM NOVO JOGO COM UM NOVO PET\n        //     const energy = parseInt(par[1]);\n        //     const clean = parseInt(par[2]);\n        // } \n        // else if (cmd == \"play\") { \n        // } \n        // else if (cmd == \"shower\") { \n        // } \n        // else if (cmd == \"sleep\") { \n        // } \n        // else if (cmd == \"show\") { \n        // } \n        else {\n            console.log(\"fail: comando invalido\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.*;\n\npublic class Shell {\n    public static void main(String[] a) {\n        \n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            // else if (cmd.equals(\"init\")) {\n            //     // CRIE UM NOVO JOGO COM UM NOVO PET\n            //     var energy = Integer.parseInt(par[1]);\n            //     var clean = Integer.parseInt(par[2]);\n            // }\n            // else if (cmd.equals(\"show\")) { \n            // }\n            // else if (cmd.equals(\"play\")) { \n            // }\n            // else if (cmd.equals(\"shower\")) { \n            // }\n            // else if (cmd.equals(\"sleep\")) { \n            // }\n            else {\n                System.out.println(\"fail: comando invalido\");\n            }\n        }\n    }\n\n    private static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <sstream>\n#include <string>\nusing namespace std;\n\nint main() {\n\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } \n        // else if (cmd == \"init\") {\n        //     // CRIE UM NOVO JOGO COM UM NOVO PET\n        //     int energy, clean;\n        //     ss >> energy >> clean;\n        // }\n        // else if (cmd == \"show\") { \n        // } \n        // else if (cmd == \"play\") { \n        // } \n        // else if (cmd == \"shower\") { \n        // } \n        // else if (cmd == \"eat\") { \n        // } \n        // else if (cmd == \"sleep\") { \n        // } \n        else {\n            cout << \"fail: comando invalido\" << endl;\n        }\n    }\n    return 0;\n}\n",
                "type": "show"
            }
        ]
    }
}
