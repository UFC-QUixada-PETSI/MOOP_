{
    "title": "@tabuleiro: Jogo de tabuleiro e armadilhas",
    "description": "# Jogo de tabuleiro e armadilhas\n\n<!-- toch -->\n[Intro](#intro) | [Draft](#draft) | [Guide](#guide) | [Shell](#shell)\n-- | -- | -- | --\n<!-- toch -->\n\n![cover](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/tabuleiro/cover.jpg)\n\n## Intro\n\nNosso jogo consiste em um tabuleiro contendo uma trilha de quadrados e um conjunto de pe\u00e7as coloridas. No in\u00edcio do jogo, cada jogador recebe uma pe\u00e7a; todas as pe\u00e7as s\u00e3o inicialmente posicionadas na posi\u00e7\u00e3o 0 da trilha.\n\nO jogo prossegue em rodadas. Em cada rodada, os jogadores rolam um D20 (dado de 20 faces) e movem suas pe\u00e7as para frente um n\u00famero de quadrados igual ao resultado obtido pelos dados. Os jogadores rolam os dados sempre na mesma ordem (jogador A, depois jogador B, etc.) nas rodadas.\n\nA maioria dos quadrados no tabuleiro s\u00e3o quadrados simples, mas alguns s\u00e3o \u201carmadilhas\u201d. Se a pe\u00e7a de um jogador cair em um quadrado da armadilha no final do movimento do jogador. O jogador ficar\u00e1 preso na armadilha at\u00e9 que na sua rodada jogue um n\u00famero par se libertando da armadilha. Ao rolar um n\u00famero par e se libertar da armadilha, sua pe\u00e7a n\u00e3o se move nessa rodada, mas na pr\u00f3xima poder\u00e1 se mover normalmente.\n\n![_](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/tabuleiro/tabuleiro.png)\n\nHaver\u00e1 exatamente tr\u00eas armadilhas na trilha.\n\nO vencedor do jogo \u00e9 o jogador cuja pe\u00e7a chega primeiro ao final da trilha. O fim da trilha \u00e9 depois da \u00faltima casa do tabuleiro. Considere, por exemplo, a placa da figura acima, que tem quadrados numerados de 1 a 48. No in\u00edcio, as pe\u00e7as s\u00e3o posicionadas no local marcado como 'In\u00edcio', ou seja, antes do quadrado n\u00famero 1. Portanto, se um jogador rolar um 7, sua pe\u00e7a \u00e9 posicionada na casa n\u00famero 7 no final da primeira rodada do jogo.\nAl\u00e9m disso, se a pe\u00e7a de um jogador estiver posicionada na casa 41, o jogador precisa de um resultado de rolagem de pelo menos 8 para chegar ao final da trilha e ganhar o jogo. Observe tamb\u00e9m que n\u00e3o haver\u00e1 empate no jogo.\n\n___\n\nQuest\u00e3o adaptada da maratona ACM 2003 por @WladimirTavares\n\n___\n\n## Draft\n\n- [solver.ts](https://github.com/qxcodepoo/arcade/blob/master/base/tabuleiro/.cache/draft.ts)\n- [solver.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/tabuleiro/.cache/draft.cpp)\n  \n## Guide\n\n![diagrama](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/tabuleiro/diagrama.png)\n\n<!-- load diagrama.puml fenced=ts:filter -->\n\n```ts\n\n@startuml\n\nskinparam defaultFontName \"Source Code Pro\"\nskinparam dpi 150\nleft to right direction\nclass Player {\n  - label: number  \n  - pos  : number\n  - free : boolean\n  __\n  + Player(label: number)\n  + isFree()   : boolean\n  + toString() : string\n  __\n  + getLabel(): number\n  + getPos()  : number\n  + setPos(pos: number)\n  + setFree(free : boolean): void\n}\n\nclass Board {\n  - trapList : Array<number>\n  - players  : Array<Player>\n  - running  : boolean\n  - boardSize: number\n  __\n  + Board(nPlayers: number, boardSize: number)\n  + toString(): string\n  __\n  + addTrap (pos  : number): void\n  + rollDice(value: number): void\n}\n\nBoard \"1\" *--  \"2..*\" Player : > has\n@enduml\n\n```\n\n<!-- load -->\n\n___\n\n## Shell\n\n```s\n#TEST_CASE init\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n\n#TEST_CASE move\n$roll 1\nplayer1 andou para 1\n\n#TEST_CASE trap\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n\n#TEST_CASE show\n$show\nplayer1: .1.........\nplayer2: ..2........\ntraps__: ..x.x...x..\n\n#TEST_CASE keep trapped\n$roll 4\nplayer1 andou para 5\n$roll 3\nplayer2 continua preso\n\n$show\nplayer1: .....1.....\nplayer2: ..2........\ntraps__: ..x.x...x..\n\n#TEST_CASE trap\n$roll 3\nplayer1 andou para 8\nplayer1 caiu em uma armadilha\n\n#TEST_CASE release\n$roll 6\nplayer2 se libertou\n\n$show\nplayer1: ........1..\nplayer2: ..2........\ntraps__: ..x.x...x..\n\n#TEST_CASE win\n$roll 2\nplayer1 se libertou\n$roll 10\nplayer2 ganhou\n\n#TEST_CASE boundary\n$show\nplayer1: ........1..\nplayer2: ..........2\ntraps__: ..x.x...x..\n\n#TEST_CASE game over\n$roll 1\ngame is over\n$end\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT init\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nend\n======== EXPECT\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT move\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nend\n======== EXPECT\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT trap\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nend\n======== EXPECT\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT show\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nshow\nend\n======== EXPECT\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$show\nplayer1: .1.........\nplayer2: ..2........\ntraps__: ..x.x...x..\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT keep trapped\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nshow\nroll 4\nroll 3\nshow\nend\n======== EXPECT\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$show\nplayer1: .1.........\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 4\nplayer1 andou para 5\n$roll 3\nplayer2 continua preso\n$show\nplayer1: .....1.....\nplayer2: ..2........\ntraps__: ..x.x...x..\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT trap\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nshow\nroll 4\nroll 3\nshow\nroll 3\nend\n======== EXPECT\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$show\nplayer1: .1.........\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 4\nplayer1 andou para 5\n$roll 3\nplayer2 continua preso\n$show\nplayer1: .....1.....\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 3\nplayer1 andou para 8\nplayer1 caiu em uma armadilha\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT release\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nshow\nroll 4\nroll 3\nshow\nroll 3\nroll 6\nshow\nend\n======== EXPECT\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$show\nplayer1: .1.........\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 4\nplayer1 andou para 5\n$roll 3\nplayer2 continua preso\n$show\nplayer1: .....1.....\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 3\nplayer1 andou para 8\nplayer1 caiu em uma armadilha\n$roll 6\nplayer2 se libertou\n$show\nplayer1: ........1..\nplayer2: ..2........\ntraps__: ..x.x...x..\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT win\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nshow\nroll 4\nroll 3\nshow\nroll 3\nroll 6\nshow\nroll 2\nroll 10\nend\n======== EXPECT\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$show\nplayer1: .1.........\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 4\nplayer1 andou para 5\n$roll 3\nplayer2 continua preso\n$show\nplayer1: .....1.....\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 3\nplayer1 andou para 8\nplayer1 caiu em uma armadilha\n$roll 6\nplayer2 se libertou\n$show\nplayer1: ........1..\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 2\nplayer1 se libertou\n$roll 10\nplayer2 ganhou\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT boundary\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nshow\nroll 4\nroll 3\nshow\nroll 3\nroll 6\nshow\nroll 2\nroll 10\nshow\nend\n======== EXPECT\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$show\nplayer1: .1.........\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 4\nplayer1 andou para 5\n$roll 3\nplayer2 continua preso\n$show\nplayer1: .....1.....\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 3\nplayer1 andou para 8\nplayer1 caiu em uma armadilha\n$roll 6\nplayer2 se libertou\n$show\nplayer1: ........1..\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 2\nplayer1 se libertou\n$roll 10\nplayer2 ganhou\n$show\nplayer1: ........1..\nplayer2: ..........2\ntraps__: ..x.x...x..\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT game over\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nshow\nroll 4\nroll 3\nshow\nroll 3\nroll 6\nshow\nroll 2\nroll 10\nshow\nroll 1\nend\n======== EXPECT\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$show\nplayer1: .1.........\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 4\nplayer1 andou para 5\n$roll 3\nplayer2 continua preso\n$show\nplayer1: .....1.....\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 3\nplayer1 andou para 8\nplayer1 caiu em uma armadilha\n$roll 6\nplayer2 se libertou\n$show\nplayer1: ........1..\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 2\nplayer1 se libertou\n$roll 10\nplayer2 ganhou\n$show\nplayer1: ........1..\nplayer2: ..........2\ntraps__: ..x.x...x..\n$roll 1\ngame is over\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\n\nfunction main() {\n\n    while (true) {\n        let line = input();\n        console.log(\"$\" + line);\n\n        let args = line.split(\" \");\n        let cmd = args[0];\n        \n        if (cmd == \"end\") {\n            break;\n        }\n        else if (cmd == \"init\") {\n            // let nPlayers = parseInt(args[1]);\n            // let size = parseInt(args[2]);\n        }\n        else if (cmd == \"addTrap\") {\n            // let pos = parseInt(args[1]);\n        }\n        else if (cmd == \"roll\") {\n            // let value = parseInt(args[1]);\n        }\n        else if (cmd == \"show\") {\n        }  \n        else {\n            console.log(\"Comando inv\u00e1lido\");\n        }\n    }\n}\n\nmain()\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.*;\n\n// }\n\npublic class Shell {\n    private static Scanner scanner = new Scanner(System.in);\n    public static void main(String[] args) {\n\n        while (true) {\n            String line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n            \n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"init\")) {\n                // var nPlayers = Integer.parseInt(par[1]);\n                // var size = Integer.parseInt(par[2]);\n            }\n            else if (cmd.equals(\"addTrap\")) {\n                // var pos = Integer.parseInt(par[1]);\n            }\n            else if (cmd.equals(\"roll\")) {\n                // var value = Integer.parseInt(par[1]);\n            }\n            else if (cmd.equals(\"show\")) {\n            }\n            else {\n                System.out.println(\"invalid command\");\n            }\n        }\n        scanner.close();\n    }\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nint main() {\n\n    while(true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"init\") {\n            // int nPlayers, size;\n            // ss >> nPlayers >> size;\n            // board = Board(nPlayers, size);\n        } else if (cmd == \"addTrap\") {\n            // int pos;\n            // ss >> pos;\n            // board.addTrap(pos);\n        } else if (cmd == \"roll\") {\n            // int value;\n            // ss >> value;\n        } else if (cmd == \"show\") {\n        } else {\n            cout << \"fail: command not found\" << endl;\n        }\n\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
