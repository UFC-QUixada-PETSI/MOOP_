{
    "title": "Cuidado com as armadilhas, ou n\u00e3o chegar\u00e1 no final do @tabuleiro",
    "description": "# Cuidado com as armadilhas, ou n\u00e3o chegar\u00e1 no final do @tabuleiro\n\n<!-- toch -->\n[Intro](#intro) | [Draft](#draft) | [Guide](#guide) | [Shell](#shell)\n-- | -- | -- | --\n<!-- toch -->\n\n![cover](cover.jpg)\n\n## Intro\n\nNosso jogo consiste em um tabuleiro contendo uma trilha de quadrados e um conjunto de pe\u00e7as coloridas. No in\u00edcio do jogo, cada jogador recebe uma pe\u00e7a; todas as pe\u00e7as s\u00e3o inicialmente posicionadas na posi\u00e7\u00e3o 0 da trilha.\n\nO jogo prossegue em rodadas. Em cada rodada, os jogadores rolam um D20 (dado de 20 faces) e movem suas pe\u00e7as para frente um n\u00famero de quadrados igual ao resultado obtido pelos dados. Os jogadores rolam os dados sempre na mesma ordem (jogador A, depois jogador B, etc.) nas rodadas.\n\nA maioria dos quadrados no tabuleiro s\u00e3o quadrados simples, mas alguns s\u00e3o \u201carmadilhas\u201d. Se a pe\u00e7a de um jogador cair em um quadrado da armadilha no final do movimento do jogador. O jogador ficar\u00e1 preso na armadilha at\u00e9 que na sua rodada jogue um n\u00famero par se libertando da armadilha. Ao rolar um n\u00famero par e se libertar da armadilha, sua pe\u00e7a n\u00e3o se move nessa rodada, mas na pr\u00f3xima poder\u00e1 se mover normalmente.\n\n![_](tabuleiro.png)\n\nHaver\u00e1 exatamente tr\u00eas armadilhas na trilha.\n\nO vencedor do jogo \u00e9 o jogador cuja pe\u00e7a chega primeiro ao final da trilha. O fim da trilha \u00e9 depois da \u00faltima casa do tabuleiro. Considere, por exemplo, a placa da figura acima, que tem quadrados numerados de 1 a 48. No in\u00edcio, as pe\u00e7as s\u00e3o posicionadas no local marcado como 'In\u00edcio', ou seja, antes do quadrado n\u00famero 1. Portanto, se um jogador rolar um 7, sua pe\u00e7a \u00e9 posicionada na casa n\u00famero 7 no final da primeira rodada do jogo.\nAl\u00e9m disso, se a pe\u00e7a de um jogador estiver posicionada na casa 41, o jogador precisa de um resultado de rolagem de pelo menos 8 para chegar ao final da trilha e ganhar o jogo. Observe tamb\u00e9m que n\u00e3o haver\u00e1 empate no jogo.\n\n___\n\nQuest\u00e3o adaptada da maratona ACM 2003 por @WladimirTavares\n\n___\n\n## Draft\n\n- [solver.ts](.cache/draft.ts)\n- [solver.cpp](.cache/draft.cpp)\n  \n## Guide\n\n![diagrama](diagrama.png)\n\n<!-- load diagrama.puml fenced=ts:filter -->\n\n```ts\n  class Player {\n\n    ' numero do jogador\n    - label: int  \n\n    ' posi\u00e7\u00e3o dele no tabuleiro\n    - pos  : int\n\n    ' se ele poder\u00e1 andar no proximo roll ou ainda esta preso\n    - free : boolean\n    __\n\n    ' inicialize o jogador\n    + Player(label: int)\n\n    ' retorna this.free\n    + isFree()   : boolean\n\n    + toString() : string\n    __\n    + getLabel() : int\n    + getPos()   : int\n    + setPos(pos : int)\n    + setFree(free : boolean)\n  }\n\n  class Board {\n    \n    ' lista com as posi\u00e7\u00f5es do tabuleiro que tem armadilhas\n    - trapList  : Array<int>\n\n    ' lista com os jogadores\n    - players   : Array<Player>\n\n    ' se o jogo ainda esta acontecendo ou ja acabou\n    - running   : boolean\n\n    ' o tamanho do tabuleiro\n    - boardSize : int\n    __\n    \n    ' inicialize o tabuleiro\n    ' crie uma lista vazia para as armadilhas\n    ' crie uma lista vazia para os jogadores\n    ' fa\u00e7a um la\u00e7o criando os jogadores e adicionado \u00e0 lista de jogadores\n    ' inicialize o tamanho do tabuleiro em boardSize + 1\n    ' esse +1 \u00e9 para o fim do tabuleiro, o ponto de chegada\n    ' pois o tabuleiro come\u00e7a em 0\n    + Board(nPlayers : int, boardSize : int)\n\n    ' imprime o tabuleiro\n    + toString() : string\n    __\n    ' adiciona uma armadilha na posi\u00e7\u00e3o pos\n    ' trapList.push(pos)\n    + addTrap(pos : int)\n\n    ' faz toda a l\u00f3gica da jogada\n    ' verifique se o jogo ainda est\u00e1 em andamento\n    ' pegue o primeiro jogador\n    ' se ele estiver preso\n    '   veja se a jogada \u00e9 par e liberta ele\n    ' se ele estiver livre\n    '   fa\u00e7a ele andar\n    '   veja se ele caiu em uma armadilha\n    '   ou se ele chegou no final do tabuleiro\n    ' mande o player par o fim da lista de jogadores\n    + rollDice(value : int)\n  }\n```\n\n<!-- load -->\n\n___\n\n## Shell\n\n```s\n#__case init\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n\n#__case move\n$roll 1\nplayer1 andou para 1\n\n#__case trap\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n\n#__case show\n$show\nplayer1: .1.........\nplayer2: ..2........\ntraps__: ..x.x...x..\n\n#__case keep trapped\n$roll 4\nplayer1 andou para 5\n$roll 3\nplayer2 continua preso\n\n$show\nplayer1: .....1.....\nplayer2: ..2........\ntraps__: ..x.x...x..\n\n#__case trap\n$roll 3\nplayer1 andou para 8\nplayer1 caiu em uma armadilha\n\n#__case release\n$roll 6\nplayer2 se libertou\n\n$show\nplayer1: ........1..\nplayer2: ..2........\ntraps__: ..x.x...x..\n\n#__case win\n$roll 2\nplayer1 se libertou\n$roll 10\nplayer2 ganhou\n\n#__case boundary\n$show\nplayer1: ........1..\nplayer2: ..........2\ntraps__: ..x.x...x..\n\n#__case game over\n$roll 1\ngame is over\n$end\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> init\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nend\n========\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$end\n<<<<<<<<\n\n>>>>>>>> move\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nend\n========\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$end\n<<<<<<<<\n\n>>>>>>>> trap\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nend\n========\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$end\n<<<<<<<<\n\n>>>>>>>> show\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nshow\nend\n========\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$show\nplayer1: .1.........\nplayer2: ..2........\ntraps__: ..x.x...x..\n$end\n<<<<<<<<\n\n>>>>>>>> keep trapped\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nshow\nroll 4\nroll 3\nshow\nend\n========\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$show\nplayer1: .1.........\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 4\nplayer1 andou para 5\n$roll 3\nplayer2 continua preso\n$show\nplayer1: .....1.....\nplayer2: ..2........\ntraps__: ..x.x...x..\n$end\n<<<<<<<<\n\n>>>>>>>> trap\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nshow\nroll 4\nroll 3\nshow\nroll 3\nend\n========\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$show\nplayer1: .1.........\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 4\nplayer1 andou para 5\n$roll 3\nplayer2 continua preso\n$show\nplayer1: .....1.....\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 3\nplayer1 andou para 8\nplayer1 caiu em uma armadilha\n$end\n<<<<<<<<\n\n>>>>>>>> release\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nshow\nroll 4\nroll 3\nshow\nroll 3\nroll 6\nshow\nend\n========\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$show\nplayer1: .1.........\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 4\nplayer1 andou para 5\n$roll 3\nplayer2 continua preso\n$show\nplayer1: .....1.....\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 3\nplayer1 andou para 8\nplayer1 caiu em uma armadilha\n$roll 6\nplayer2 se libertou\n$show\nplayer1: ........1..\nplayer2: ..2........\ntraps__: ..x.x...x..\n$end\n<<<<<<<<\n\n>>>>>>>> win\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nshow\nroll 4\nroll 3\nshow\nroll 3\nroll 6\nshow\nroll 2\nroll 10\nend\n========\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$show\nplayer1: .1.........\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 4\nplayer1 andou para 5\n$roll 3\nplayer2 continua preso\n$show\nplayer1: .....1.....\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 3\nplayer1 andou para 8\nplayer1 caiu em uma armadilha\n$roll 6\nplayer2 se libertou\n$show\nplayer1: ........1..\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 2\nplayer1 se libertou\n$roll 10\nplayer2 ganhou\n$end\n<<<<<<<<\n\n>>>>>>>> boundary\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nshow\nroll 4\nroll 3\nshow\nroll 3\nroll 6\nshow\nroll 2\nroll 10\nshow\nend\n========\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$show\nplayer1: .1.........\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 4\nplayer1 andou para 5\n$roll 3\nplayer2 continua preso\n$show\nplayer1: .....1.....\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 3\nplayer1 andou para 8\nplayer1 caiu em uma armadilha\n$roll 6\nplayer2 se libertou\n$show\nplayer1: ........1..\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 2\nplayer1 se libertou\n$roll 10\nplayer2 ganhou\n$show\nplayer1: ........1..\nplayer2: ..........2\ntraps__: ..x.x...x..\n$end\n<<<<<<<<\n\n>>>>>>>> game over\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nshow\nroll 4\nroll 3\nshow\nroll 3\nroll 6\nshow\nroll 2\nroll 10\nshow\nroll 1\nend\n========\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$show\nplayer1: .1.........\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 4\nplayer1 andou para 5\n$roll 3\nplayer2 continua preso\n$show\nplayer1: .....1.....\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 3\nplayer1 andou para 8\nplayer1 caiu em uma armadilha\n$roll 6\nplayer2 se libertou\n$show\nplayer1: ........1..\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 2\nplayer1 se libertou\n$roll 10\nplayer2 ganhou\n$show\nplayer1: ........1..\nplayer2: ..........2\ntraps__: ..x.x...x..\n$roll 1\ngame is over\n$end\n<<<<<<<<\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
