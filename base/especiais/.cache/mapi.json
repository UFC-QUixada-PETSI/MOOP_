{
    "title": "@especiais: Estressados Opera\u00e7\u00f5es IV",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@especiais: Estressados Opera\u00e7\u00f5es IV</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Estressados Opera\u00e7\u00f5es IV</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"cover\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/especiais/cover.jpg\" /></p>\n<hr />\n<h2>Intro</h2>\n<h3>pares</h3>\n<ul>\n<li><strong>occurr</strong>: Fa\u00e7a uma contagem de quantas vezes cada n\u00edvel de stress aparece e retorne essa contagem ordenado pelo n\u00edvel de stress.</li>\n<li><strong>times</strong> Uma ou mais pessoas de mesmo stress seguidas formam um time. Gere um vetor compactado indicando o n\u00edvel de stress e quantas pessoas tem em cada time?</li>\n</ul>\n<h3>proximidade</h3>\n<ul>\n<li><strong>mnext</strong>: Apresente um mapa colocando 1 nas posi\u00e7\u00f5es que existem homens ao lado de pelo menos uma mulher.</li>\n<li><strong>alone</strong>: quais posi\u00e7\u00f5es existem homens que n\u00e3o est\u00e3o do lado de nenhuma mulher?</li>\n</ul>\n<h3>duplo for</h3>\n<ul>\n<li><strong>couple</strong>: Casais s\u00e3o formados quando quando um homem e uma mulher com o mesmo n\u00edvel de stress se encontram. Retorne a quantidade de casais que podem ser formados.</li>\n<li><strong>subseq</strong>: Dada uma sequ\u00eancia de valores, procure essa sequ\u00eancia na fila e retorne a primeira posi\u00e7\u00e3o onde ela come\u00e7ar.</li>\n</ul>\n<h3>remo\u00e7\u00f5es</h3>\n<ul>\n<li><strong>clear</strong>: dado um valor, remova todas as vezes que esse valor aparece na lista.</li>\n<li><strong>erase</strong>: dado a lista com os \u00edndices de todas as pessoas que sa\u00edram da fila, qual a fila resultante?</li>\n</ul>\n<hr />\n<h2>Draft</h2>\n<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/especiais/.cache/draft.cpp\">solver.cpp</a></li>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/especiais/.cache/draft.java\">solver.java</a></li>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/especiais/.cache/draft.ts\">solver.ts</a></li>\n</ul>\n<h2>Shell</h2>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE occur</span>\n<span class=\"nv\">$occurr</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,3,-1<span class=\"o\">]</span>\n<span class=\"o\">[(</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span><span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">)]</span>\n<span class=\"nv\">$occurr</span><span class=\"w\"> </span><span class=\"o\">[</span>-2,1,-2,4<span class=\"o\">]</span>\n<span class=\"o\">[(</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">2</span><span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">)]</span>\n<span class=\"nv\">$occurr</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,5,9,-1,-1,5,5<span class=\"o\">]</span>\n<span class=\"o\">[(</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">3</span><span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">3</span><span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">9</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">)]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE teams</span>\n<span class=\"nv\">$teams</span><span class=\"w\"> </span><span class=\"o\">[]</span>\n<span class=\"o\">[]</span>\n<span class=\"nv\">$teams</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"o\">[(</span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">)]</span>\n<span class=\"nv\">$teams</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,5<span class=\"o\">]</span>\n<span class=\"o\">[(</span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">2</span><span class=\"o\">)]</span>\n<span class=\"nv\">$teams</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">3</span>,5,5,5<span class=\"o\">]</span>\n<span class=\"o\">[(</span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">3</span><span class=\"o\">)]</span>\n<span class=\"nv\">$teams</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,5,2,2,2,4,4<span class=\"o\">]</span>\n<span class=\"o\">[(</span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">2</span><span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span><span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">2</span><span class=\"o\">)]</span>\n<span class=\"nv\">$teams</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,5,7,1,5<span class=\"o\">]</span>\n<span class=\"o\">[(</span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">2</span><span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">7</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">)]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE mnext</span>\n<span class=\"nv\">$mnext</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span>\n<span class=\"nv\">$mnext</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,2<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">0</span><span class=\"o\">]</span>\n<span class=\"nv\">$mnext</span><span class=\"w\"> </span><span class=\"o\">[</span>-1,-3,5<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"nv\">$mnext</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,5,9,-1,-1,5,5<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">0</span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE alone</span>\n<span class=\"nv\">$alone</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"nv\">$alone</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,3<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"nv\">$alone</span><span class=\"w\"> </span><span class=\"o\">[</span>-1,-3,5<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">0</span><span class=\"o\">]</span>\n<span class=\"nv\">$alone</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,-3,5<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">0</span><span class=\"o\">]</span>\n<span class=\"nv\">$alone</span><span class=\"w\"> </span><span class=\"o\">[</span>-1,3,-5<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">0</span><span class=\"o\">]</span>\n<span class=\"nv\">$alone</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,5,9,-1,-1,5,5<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE couple</span>\n<span class=\"nv\">$couple</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"m\">0</span>\n<span class=\"nv\">$couple</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,3<span class=\"o\">]</span>\n<span class=\"m\">0</span>\n<span class=\"nv\">$couple</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,-5<span class=\"o\">]</span>\n<span class=\"m\">1</span>\n<span class=\"nv\">$couple</span><span class=\"w\"> </span><span class=\"o\">[</span>-5,-5<span class=\"o\">]</span>\n<span class=\"m\">0</span>\n<span class=\"nv\">$couple</span><span class=\"w\"> </span><span class=\"o\">[</span>-5,5<span class=\"o\">]</span>\n<span class=\"m\">1</span>\n<span class=\"nv\">$couple</span><span class=\"w\"> </span><span class=\"o\">[</span>-5,5,-5,-5<span class=\"o\">]</span>\n<span class=\"m\">1</span>\n<span class=\"nv\">$couple</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>,-2,4,2,-4,-4<span class=\"o\">]</span>\n<span class=\"m\">2</span>\n<span class=\"nv\">$couple</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>,-2,4,2,-4,-4,4<span class=\"o\">]</span>\n<span class=\"m\">3</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE subseq</span>\n<span class=\"nv\">$subseq</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,4,3<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">8</span><span class=\"o\">]</span>\n-1\n<span class=\"nv\">$subseq</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,4,3<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2<span class=\"o\">]</span>\n<span class=\"m\">0</span>\n<span class=\"nv\">$subseq</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,4,3<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>,4,3<span class=\"o\">]</span>\n<span class=\"m\">1</span>\n<span class=\"nv\">$subseq</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">3</span>,5,5,5<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,5<span class=\"o\">]</span>\n<span class=\"m\">1</span>\n<span class=\"nv\">$subseq</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,5,2,2,2,4,4<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>,2,4<span class=\"o\">]</span>\n<span class=\"m\">3</span>\n<span class=\"nv\">$subseq</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,5,2,2,2,4,4<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>,2,4,4,3<span class=\"o\">]</span>\n-1\n<span class=\"nv\">$subseq</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,5,2,2,2,4,4<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">9</span><span class=\"o\">]</span>\n-1\n<span class=\"nv\">$subseq</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,5,2,2,2,4,4<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">4</span>,4,4<span class=\"o\">]</span>\n-1\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE erase</span>\n<span class=\"nv\">$erase</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,4,3<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">0</span>,1,2,3<span class=\"o\">]</span>\n<span class=\"o\">[]</span>\n<span class=\"nv\">$erase</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,4,3<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">3</span><span class=\"o\">]</span>\n<span class=\"nv\">$erase</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,4,3<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>,1,3<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"nv\">$erase</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">3</span>,5,5,5<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">3</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE clear</span>\n<span class=\"nv\">$clear</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>,2,2,2,2<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"o\">[]</span>\n<span class=\"nv\">$clear</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,4,3<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"o\">[</span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">3</span><span class=\"o\">]</span>\n<span class=\"nv\">$clear</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,2,3,2,2<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">3</span><span class=\"o\">]</span>\n<span class=\"nv\">$clear</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,5,3,5,5,5<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"o\">[</span><span class=\"m\">3</span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT occur\noccurr [1,3,-1]\noccurr [-2,1,-2,4]\noccurr [1,2,5,9,-1,-1,5,5]\nend\n======== EXPECT\n$occurr [1,3,-1]\n[(1, 2), (3, 1)]\n$occurr [-2,1,-2,4]\n[(1, 1), (2, 2), (4, 1)]\n$occurr [1,2,5,9,-1,-1,5,5]\n[(1, 3), (2, 1), (5, 3), (9, 1)]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT teams\nteams []\nteams [5]\nteams [5,5]\nteams [3,5,5,5]\nteams [5,5,2,2,2,4,4]\nteams [5,5,7,1,5]\nend\n======== EXPECT\n$teams []\n[]\n$teams [5]\n[(5, 1)]\n$teams [5,5]\n[(5, 2)]\n$teams [3,5,5,5]\n[(3, 1), (5, 3)]\n$teams [5,5,2,2,2,4,4]\n[(5, 2), (2, 3), (4, 2)]\n$teams [5,5,7,1,5]\n[(5, 2), (7, 1), (1, 1), (5, 1)]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT mnext\nmnext [5]\nmnext [5,2]\nmnext [-1,-3,5]\nmnext [1,2,5,9,-1,-1,5,5]\nend\n======== EXPECT\n$mnext [5]\n[0]\n$mnext [5,2]\n[0, 0]\n$mnext [-1,-3,5]\n[0, 0, 1]\n$mnext [1,2,5,9,-1,-1,5,5]\n[0, 0, 0, 1, 0, 0, 1, 0]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT alone\nalone [5]\nalone [5,3]\nalone [-1,-3,5]\nalone [1,-3,5]\nalone [-1,3,-5]\nalone [1,2,5,9,-1,-1,5,5]\nend\n======== EXPECT\n$alone [5]\n[1]\n$alone [5,3]\n[1, 1]\n$alone [-1,-3,5]\n[0, 0, 0]\n$alone [1,-3,5]\n[0, 0, 0]\n$alone [-1,3,-5]\n[0, 0, 0]\n$alone [1,2,5,9,-1,-1,5,5]\n[1, 1, 1, 0, 0, 0, 0, 1]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT couple\ncouple [5]\ncouple [5,3]\ncouple [5,-5]\ncouple [-5,-5]\ncouple [-5,5]\ncouple [-5,5,-5,-5]\ncouple [2,-2,4,2,-4,-4]\ncouple [2,-2,4,2,-4,-4,4]\nend\n======== EXPECT\n$couple [5]\n0\n$couple [5,3]\n0\n$couple [5,-5]\n1\n$couple [-5,-5]\n0\n$couple [-5,5]\n1\n$couple [-5,5,-5,-5]\n1\n$couple [2,-2,4,2,-4,-4]\n2\n$couple [2,-2,4,2,-4,-4,4]\n3\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT subseq\nsubseq [1,2,4,3] [8]\nsubseq [1,2,4,3] [1,2]\nsubseq [1,2,4,3] [2,4,3]\nsubseq [3,5,5,5] [5,5]\nsubseq [5,5,2,2,2,4,4] [2,2,4]\nsubseq [5,5,2,2,2,4,4] [2,2,4,4,3]\nsubseq [5,5,2,2,2,4,4] [9]\nsubseq [5,5,2,2,2,4,4] [4,4,4]\nend\n======== EXPECT\n$subseq [1,2,4,3] [8]\n-1\n$subseq [1,2,4,3] [1,2]\n0\n$subseq [1,2,4,3] [2,4,3]\n1\n$subseq [3,5,5,5] [5,5]\n1\n$subseq [5,5,2,2,2,4,4] [2,2,4]\n3\n$subseq [5,5,2,2,2,4,4] [2,2,4,4,3]\n-1\n$subseq [5,5,2,2,2,4,4] [9]\n-1\n$subseq [5,5,2,2,2,4,4] [4,4,4]\n-1\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT erase\nerase [1,2,4,3] [0,1,2,3]\nerase [1,2,4,3] [1,2]\nerase [1,2,4,3] [2,1,3]\nerase [3,5,5,5] [3]\nend\n======== EXPECT\n$erase [1,2,4,3] [0,1,2,3]\n[]\n$erase [1,2,4,3] [1,2]\n[1, 3]\n$erase [1,2,4,3] [2,1,3]\n[1]\n$erase [3,5,5,5] [3]\n[3, 5, 5]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT clear\nclear [2,2,2,2,2] 2\nclear [1,2,4,3] 1\nclear [1,2,2,3,2,2] 2\nclear [5,5,3,5,5,5] 5\nend\n======== EXPECT\n$clear [2,2,2,2,2] 2\n[]\n$clear [1,2,4,3] 1\n[2, 4, 3]\n$clear [1,2,2,3,2,2] 2\n[1, 3]\n$clear [5,5,3,5,5,5] 5\n[3]\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "//retorna um vetor de pares\nfunction occurr(vet: number[]): number[][] {\n    return [];\n}\n\n//retorna um vetor de pares\nfunction teams(vet: number[]): number[][] {\n    return [];\n}\n\nfunction mnext(vet: number[]): number[] {\n    return [];\n}\n\nfunction alone(vet: number[]): number[] {\n    return [];\n}\n\nfunction couple(vet: number[]): number {\n    return 0;\n}\n\nfunction has_subseq(vet: number[], seq: number[], pos: number): boolean {\n    return true;\n}\n\nfunction subseq(vet: number[], seq: number[]) {\n    return 0;\n}\n\nfunction erase(vet: number[], pos_list: number[]): number[] {\n    return [];\n}\n\nfunction clear(vet: number[], value: number): number[] {\n    return [];\n}\n\n\nconst input = () => \"\"; \nexport {};\n\nfunction main() {\n    while (true) {\n        let line = input();\n        console.log(\"$\" + line);\n        let args = line.split(\" \");\n\n        if      (args[0] === \"end\")   {\n            break; \n        }\n        else if (args[0] === \"occurr\") {\n            console.log(fmtpair(occurr(to_vet(args[1]))));\n        }\n        else if (args[0] === \"teams\") {\n            console.log(fmtpair(teams(to_vet(args[1]))));\n        }\n        else if (args[0] === \"mnext\") {\n            console.log(fmt(mnext(to_vet(args[1]))));\n        }\n        else if (args[0] === \"alone\") {\n            console.log(fmt(alone(to_vet(args[1]))));\n        }\n        else if (args[0] === \"couple\") {\n            console.log(couple(to_vet(args[1])));\n        }\n        else if (args[0] === \"subseq\") {\n            console.log(subseq(to_vet(args[1]), to_vet(args[2])));\n        }\n        else if (args[0] === \"erase\") {\n            console.log(fmt(erase(to_vet(args[1]), to_vet(args[2]))));\n        }\n        else if (args[0] === \"clear\") {\n            console.log(fmt(clear(to_vet(args[1]), +args[2])));\n        }\n        else {\n            console.log(\"Comando invalido\");\n        }\n    }\n}\n\n// Fun\u00e7\u00e3o auxiliar para converter de string para vetor\n// \"[1,2,3,4]\" para [1, 2, 3, 4]\nfunction to_vet(token: string): number[] {\n    let size = token.length;\n    let inside = token.substring(1, size - 1);\n    return inside === \"\" ? [] : inside.split(\",\").map(x => +x)\n}\n\n//Converte de vetor para string sem inserir os espa\u00e7os\n//[1, 2, 3, 4] => \"[1,2,3,4]\"\nfunction fmt(vet: any[]): string {\n    return \"[\" + vet?.join(\", \") + \"]\";\n}\n\nfunction fmtpair(vet: number[][]): string {\n    return fmt(vet?.map((x: number[]) => {\n        let [key, value] = x;\n        return \"(\" + key + \", \" + value + \")\";\n    }));\n}\n\n\nmain()\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.Scanner;\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\n\nclass Pair {\n    Integer first;\n    Integer second;\n\n    Pair(Integer first, Integer second) {\n        this.first = first;\n        this.second = second;\n    }\n\n    public String toString() {\n        return \"(\" + first + \", \" + second + \")\";\n    }\n};\n\nclass Student {\n    public static List<Pair> occurr(List<Integer> vet) {\n        return new ArrayList<Pair>();\n    }\n\n    public static List<Pair> teams(List<Integer> vet) {\n        return new ArrayList<Pair>();\n    }\n\n    public static List<Integer> mnext(List<Integer> vet) {\n        return new ArrayList<Integer>();\n    }\n\n    private static boolean hasWoman(List<Integer> vet, int size, int index) {\n        return true;\n    }\n\n    public static List<Integer> alone(List<Integer> vet) {\n        return new ArrayList<Integer>();\n    }\n\n    public static int couple(List<Integer> vet) {\n        return 0;\n    }\n\n    public static boolean hasSubseq(List<Integer> vet, List<Integer> seq, int pos) {\n        return true;\n    }\n\n    public static int subseq(List<Integer> vet, List<Integer> seq) {\n        return -1;\n    }\n\n    public static List<Integer> erase(List<Integer> vet, List<Integer> pos_list) {\n        return new ArrayList<Integer>();\n    }\n\n    public static List<Integer> clear(List<Integer> vet, int value) {\n        return new ArrayList<Integer>();\n    }\n}\n\npublic class Shell {\n    public static void main(String[] _args) {\n        while (true) {\n            var line = scanner.nextLine();\n            var args = line.split(\" \");\n            System.out.println('$' + line);\n\n            if (args[0].equals(\"end\")) {\n                break;\n            }\n            else if (args[0].equals(\"occurr\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + Student.occurr(array));\n            }\n            else if (args[0].equals(\"teams\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + Student.teams(array));\n            }\n            else if (args[0].equals(\"mnext\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + Student.mnext(array));\n            }\n            else if (args[0].equals(\"alone\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + Student.alone(array));\n            }\n            else if (args[0].equals(\"erase\")) {\n                var array = strToVet(args[1]);\n                var positions = strToVet(args[2]);\n                System.out.println(\"\" + Student.erase(array, positions));\n            }\n            else if (args[0].equals(\"clear\")) {\n                var array = strToVet(args[1]);\n                var value = Integer.parseInt(args[2]);\n                System.out.println(\"\" + Student.clear(array, value));\n            }\n            else if (args[0].equals(\"subseq\")) {\n                var array = strToVet(args[1]);\n                var seq = strToVet(args[2]);\n                System.out.println(\"\" + Student.subseq(array, seq));\n            }\n            else if (args[0].equals(\"couple\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + Student.couple(array));\n            }\n            else {\n                System.out.println(\"Invalid command\");\n            }\n        }\n    }\n\n    public static List<Integer> strToVet(String s) {\n        if (s.equals(\"[]\"))\n            return new ArrayList<>();\n        List<String> parts = Arrays.asList(s.substring(1, s.length() - 1).split(\",\"));\n        List<Integer> result = new ArrayList<>();\n        for (String part : parts)\n            result.add(Integer.parseInt(part.trim()));\n        return result;\n    }\n\n    static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <map>\n#include <algorithm>\n#include <vector>\n#include <sstream>\n#include <iostream>\n\nusing namespace std;\n\nvector<pair<int, int>> occurr(vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nvector<pair<int, int>> teams(vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nvector<int> mnext(vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nvector<int> alone(vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nint couple(vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nbool has_subseq(vector<int> vet, vector<int> seq, int pos) {\n    (void) vet;\n    (void) seq;\n    (void) pos;\n    return {};\n}\n\nint subseq(vector<int> vet, vector<int> seq) {\n    (void) vet;\n    (void) seq;\n    return {};\n}\n\nvector<int> erase(vector<int> vet, vector<int> pos_list) {\n    (void) vet;\n    (void) pos_list;\n    return {};\n}\n\nvector<int> clear(vector<int> vet, int value) {\n    (void) vet;\n    (void) value;\n    return {};\n}\n\n\nvector<string> split(string str, char delim) {\n    vector<string> tokens;\n    stringstream ss(str);\n    string token;\n    while (getline(ss, token, delim))\n        tokens.push_back(token);\n    return tokens;\n}\n\nvector<int> str2vet(string str) {\n    vector<int> vet;\n    stringstream ss(str.substr(1, str.size() - 2));\n    string token;\n    while (getline(ss, token, ','))\n        vet.push_back(stoi(token));\n    return vet;\n}\n\nvoid print(vector<pair<int, int>> output) {\n    cout << \"[\";\n    for (int i = 0; i < (int) output.size(); i++) {\n        cout << \"(\" << output[i].first << \", \" << output[i].second << \")\";\n        if (i != (int) output.size() - 1)\n            cout << \", \";\n    }\n    cout << \"]\" << endl;\n}\nvoid print(vector<int> output) {\n    cout << \"[\";\n    for (int i = 0; i < (int) output.size(); i++) {\n        cout << output[i];\n        if (i != (int) output.size() - 1)\n            cout << \", \";\n    }\n    cout << \"]\" << endl;\n}\nvoid print(string output) {\n    cout << output << endl;\n}\nvoid print(int output) {\n    cout << output << endl;\n}\n\nint main(){\n \n    \n    while(true) {\n        string line;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n        auto args = split(line, ' ');\n\n        if     (args[0] == \"occurr\" ) { print(occurr(str2vet(args[1])));                   }\n        else if(args[0] == \"teams\"  ) { print(teams(str2vet(args[1])));                    }\n        else if(args[0] == \"mnext\"  ) { print(mnext(str2vet(args[1])));                    }\n        else if(args[0] == \"alone\"  ) { print(alone(str2vet(args[1])));                    }\n        else if(args[0] == \"erase\"  ) { print(erase(str2vet(args[1]), str2vet(args[2])));  }\n        else if(args[0] == \"clear\"  ) { print(clear(str2vet(args[1]), stoi(args[2])));     }\n        else if(args[0] == \"subseq\" ) { print(subseq(str2vet(args[1]), str2vet(args[2]))); }\n        else if(args[0] == \"couple\" ) { print(couple(str2vet(args[1])));                   }\n        else if(args[0] == \"end\"    ) { break;                                             }\n        else                          { print(\"Invalid command\");                          }\n    }\n}\n",
                "type": "show"
            }
        ],
        "go": [
            {
                "name": "shell.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype Pair struct {\n\tOne int\n\tTwo int\n}\n\nfunc occurr(vet []int) []Pair {\n\t_ = vet\n\treturn nil\n}\n\nfunc teams(vet []int) []Pair {\n\t_ = vet\n\treturn nil\n}\n\nfunc mnext(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc alone(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc couple(vet []int) int {\n\t_ = vet\n\treturn 0\n}\n\nfunc hasSubseq(vet []int, seq []int, pos int) bool {\n\t_ = vet\n\t_ = seq\n\t_ = pos\n\treturn false\n}\n\nfunc subseq(vet []int, seq []int) int {\n\t_ = vet\n\t_ = seq\n\treturn -1\n}\n\nfunc erase(vet []int, posList []int) []int {\n\t_ = vet\n\t_ = posList\n\treturn nil\n}\n\nfunc clear(vet []int, value int) []int {\n\t_ = vet\n\t_ = value\n\treturn nil\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tfor {\n\t\tfmt.Print(\"$\")\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline := scanner.Text()\n\t\targs := strings.Split(line, \" \")\n\t\tfmt.Println(line)\n\n\t\tswitch args[0] {\n\t\tcase \"occurr\":\n\t\t\tprintSlice(occurr(str2vet(args[1])))\n\t\tcase \"teams\":\n\t\t\tprintSlice(teams(str2vet(args[1])))\n\t\tcase \"mnext\":\n\t\t\tprintSlice(mnext(str2vet(args[1])))\n\t\tcase \"alone\":\n\t\t\tprintSlice(alone(str2vet(args[1])))\n\t\tcase \"erase\":\n\t\t\tprintSlice(erase(str2vet(args[1]), str2vet(args[2])))\n\t\tcase \"clear\":\n\t\t\tval, _ := strconv.Atoi(args[2])\n\t\t\tprintSlice(clear(str2vet(args[1]), val))\n\t\tcase \"subseq\":\n\t\t\tfmt.Println(subseq(str2vet(args[1]), str2vet(args[2])))\n\t\tcase \"couple\":\n\t\t\tfmt.Println(couple(str2vet(args[1])))\n\t\tcase \"end\":\n\t\t\treturn\n\t\tdefault:\n\t\t\tfmt.Println(\"Invalid command\")\n\t\t}\n\t}\n}\n\n// Fun\u00e7\u00f5es auxiliares\n\nfunc str2vet(str string) []int {\n\tif str == \"[]\" {\n\t\treturn nil\n\t}\n\tstr = str[1 : len(str)-1]\n\tparts := strings.Split(str, \",\")\n\tvar vet []int\n\tfor _, part := range parts {\n\t\tnum, _ := strconv.Atoi(strings.TrimSpace(part))\n\t\tvet = append(vet, num)\n\t}\n\treturn vet\n}\n\nfunc printSlice[T any](vet []T) {\n\tfmt.Print(\"[\")\n\tfor i, x := range vet {\n\t\tif i > 0 {\n\t\t\tfmt.Print(\", \")\n\t\t}\n\t\tfmt.Print(x)\n\t}\n\tfmt.Println(\"]\")\n}\n\nfunc (p Pair) String() string {\n\treturn fmt.Sprintf(\"(%v, %v)\", p.One, p.Two)\n}\n",
                "type": "show"
            }
        ]
    }
}
