{
    "title": "@array: Manipula\u00e7\u00f5es em Arrays",
    "description": "# Manipula\u00e7\u00f5es em Arrays\n\n## Estruturas lineares em cada linguagem\n\n- python: list\n- java: ArrayList\n- c++: vector\n- typescript: Array\n\n## Compet\u00eancias b\u00e1sicas de manipula\u00e7\u00e3o de dados\n\nVoc\u00ea pode testar utilizando um array de inteiros ou um array de objetos.\n\n- Criar um array vazio\n- Criar um array preenchido\n- Adicionar e remover elementos ao final\n- Fazer impress\u00e3o formatada\n- Criar um array com elementos em sequ\u00eancia de zero a n\n- Criar um array com valores aleat\u00f3rios\n- Acessar elementos por \u00edndice\n- Percorrer os elementos utilizando for-range\n- Percorrer os elementos utilizando for indexado\n- Procurar um elemento X usando la\u00e7o\n- Criar um novo array com elementos filtrados, por exemplo, pares\n- Criar um novo array com elementos transformados, por exemplo, ao quadrado\n- Buscar e remover um elemento X\n- Remover todos os elementos X\n- Verificar quais fun\u00e7\u00f5es existem nativamente na linguagem\n  - busca\n  - remo\u00e7\u00e3o\n  - ordena\u00e7\u00e3o\n  - embaralhamento\n\n## Crie seu pr\u00f3prio c\u00f3digo de testes\n\n```py\n\nclass Foo:\n    def __init__(self, x: int):\n        self.x = x\n\n    def __str__(self):\n        return f'Foo({self.x})'\n\nlista_vazia: list[int] = []\nlista_preenchida: list[int] = [1, 2, 3, 4, 5]\nlista_preencida_objetos: list[Foo] = [Foo(1), Foo(2), Foo(3), Foo(4), Foo(5)]\n\nlista_vazia.append(1)\nlista_preenchida.append(Foo(6))\n\n# continue com seus pr\u00f3prios testes de manipula\u00e7\u00e3o de arrays\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "",
            "type": "hide"
        }
    ],
    "draft": {}
}
