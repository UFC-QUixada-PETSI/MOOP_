{
    "title": "@pula-pula: Gerenciando entradas e sa\u00eddas do pula pula",
    "description": "# Gerenciando entradas e sa\u00eddas do pula pula\n\n<!-- toch -->\n[Intro](#intro) | [Draft](#draft) | [Guide](#guide) | [Shell](#shell)\n-- | -- | -- | --\n<!-- toch -->\n\n![cover](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/pula-pula/cover.jpg)\n\nNosso objetivo no trabalho \u00e9 modelar um gestor de pula pulas em um parquinho, controlando as pessoas que entram e saem do pula pula, al\u00e9m de coordenar as pessoas que est\u00e3o na fila de espera.\n\n## Intro\n\n- Inserir crian\u00e7as na fila de espera do pula pula\n- Mover a primeira crian\u00e7a da fila de espera do pula pula para dentro do pula pula.\n- Mover a primeira crian\u00e7a que entrou no pula pula para o final da fila de espera.\n\n***\n\n## Draft\n\n<!-- links .cache/draft -->\n- cpp\n  - [shell.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/pula-pula/.cache/draft/cpp/shell.cpp)\n- java\n  - [Shell.java](https://github.com/qxcodepoo/arcade/blob/master/base/pula-pula/.cache/draft/java/Shell.java)\n- ts\n  - [shell.ts](https://github.com/qxcodepoo/arcade/blob/master/base/pula-pula/.cache/draft/ts/shell.ts)\n<!-- links -->\n\n## Guide\n\n![diagrama](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/pula-pula/diagrama.png)\n\n\n## Shell\n\n```bash\n#TEST_CASE unico\n# $chegou _nome _idade\n# insere uma crian\u00e7a na fila de entrada do brinquedo\n$arrive mario 5\n$arrive livia 4\n$arrive luana 3\n\n# show\n# mostra a fila de entrada e o pula pula\n$show\n[luana:3, livia:4, mario:5] => []\n\n#TEST_CASE entrando\n# entrar\n# tira a primeira crian\u00e7a da fila de entrada e insere no pula pula\n\n$enter\n$show\n[luana:3, livia:4] => [mario:5]\n\n#TEST_CASE segunda pessoa\n$enter\n$show\n[luana:3] => [livia:4, mario:5]\n\n#TEST_CASE saindo\n$leave\n$show\n[mario:5, luana:3] => [livia:4]\n\n#TEST_CASE remove\n$remove luana\n\n$show\n[mario:5] => [livia:4]\n$remove livia\n$show\n[mario:5] => []\n$end\n```\n\n***\n\n```bash\n#TEST_CASE 2\n$show\n[] => []\n$arrive mario 5\n$show\n[mario:5] => []\n\n#TEST_CASE empty enter\n$enter\n$show\n[] => [mario:5]\n\n#TEST_CASE empty leave\n$leave\n$show\n[mario:5] => []\n$leave\n$show\n[mario:5] => []\n\n#TEST_CASE remove from waiting\n$remove mario\n$show\n[] => []\n\n#TEST_CASE remove empty\n$remove rebeca\nfail: rebeca nao esta no pula-pula\n\n$show\n[] => []\n$end\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT unico\narrive mario 5\narrive livia 4\narrive luana 3\nshow\nend\n======== EXPECT\n$arrive mario 5\n$arrive livia 4\n$arrive luana 3\n$show\n[luana:3, livia:4, mario:5] => []\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT entrando\narrive mario 5\narrive livia 4\narrive luana 3\nshow\nenter\nshow\nend\n======== EXPECT\n$arrive mario 5\n$arrive livia 4\n$arrive luana 3\n$show\n[luana:3, livia:4, mario:5] => []\n$enter\n$show\n[luana:3, livia:4] => [mario:5]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT segunda pessoa\narrive mario 5\narrive livia 4\narrive luana 3\nshow\nenter\nshow\nenter\nshow\nend\n======== EXPECT\n$arrive mario 5\n$arrive livia 4\n$arrive luana 3\n$show\n[luana:3, livia:4, mario:5] => []\n$enter\n$show\n[luana:3, livia:4] => [mario:5]\n$enter\n$show\n[luana:3] => [livia:4, mario:5]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT saindo\narrive mario 5\narrive livia 4\narrive luana 3\nshow\nenter\nshow\nenter\nshow\nleave\nshow\nend\n======== EXPECT\n$arrive mario 5\n$arrive livia 4\n$arrive luana 3\n$show\n[luana:3, livia:4, mario:5] => []\n$enter\n$show\n[luana:3, livia:4] => [mario:5]\n$enter\n$show\n[luana:3] => [livia:4, mario:5]\n$leave\n$show\n[mario:5, luana:3] => [livia:4]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT remove\narrive mario 5\narrive livia 4\narrive luana 3\nshow\nenter\nshow\nenter\nshow\nleave\nshow\nremove luana\nshow\nremove livia\nshow\nend\n======== EXPECT\n$arrive mario 5\n$arrive livia 4\n$arrive luana 3\n$show\n[luana:3, livia:4, mario:5] => []\n$enter\n$show\n[luana:3, livia:4] => [mario:5]\n$enter\n$show\n[luana:3] => [livia:4, mario:5]\n$leave\n$show\n[mario:5, luana:3] => [livia:4]\n$remove luana\n$show\n[mario:5] => [livia:4]\n$remove livia\n$show\n[mario:5] => []\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 2\nshow\narrive mario 5\nshow\nend\n======== EXPECT\n$show\n[] => []\n$arrive mario 5\n$show\n[mario:5] => []\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT empty enter\nshow\narrive mario 5\nshow\nenter\nshow\nend\n======== EXPECT\n$show\n[] => []\n$arrive mario 5\n$show\n[mario:5] => []\n$enter\n$show\n[] => [mario:5]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT empty leave\nshow\narrive mario 5\nshow\nenter\nshow\nleave\nshow\nleave\nshow\nend\n======== EXPECT\n$show\n[] => []\n$arrive mario 5\n$show\n[mario:5] => []\n$enter\n$show\n[] => [mario:5]\n$leave\n$show\n[mario:5] => []\n$leave\n$show\n[mario:5] => []\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT remove from waiting\nshow\narrive mario 5\nshow\nenter\nshow\nleave\nshow\nleave\nshow\nremove mario\nshow\nend\n======== EXPECT\n$show\n[] => []\n$arrive mario 5\n$show\n[mario:5] => []\n$enter\n$show\n[] => [mario:5]\n$leave\n$show\n[mario:5] => []\n$leave\n$show\n[mario:5] => []\n$remove mario\n$show\n[] => []\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT remove empty\nshow\narrive mario 5\nshow\nenter\nshow\nleave\nshow\nleave\nshow\nremove mario\nshow\nremove rebeca\nshow\nend\n======== EXPECT\n$show\n[] => []\n$arrive mario 5\n$show\n[mario:5] => []\n$enter\n$show\n[] => [mario:5]\n$leave\n$show\n[mario:5] => []\n$leave\n$show\n[mario:5] => []\n$remove mario\n$show\n[] => []\n$remove rebeca\nfail: rebeca nao esta no pula-pula\n$show\n[] => []\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\n\nfunction main() {\n\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(\" \");\n        const cmd = par[0];\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"show\") { //TODO\n        } else if (cmd == \"arrive\") {\n            // const name = par[1];\n            // const age = parseInt(par[2]);\n        } else if (cmd == \"enter\") {\n        } else if (cmd == \"leave\") {\n        } else if (cmd == \"remove\") {\n            // const name = par[1];\n        } else {\n            console.log(\"fail: comando invalido\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.Scanner;\nimport java.util.LinkedList;\n\npublic class Shell {\n    public static void main(String[] args) {\n        while(true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"show\")) { \n            }\n            else if (cmd.equals(\"arrive\")) {\n                // var name = par[1];\n                // var age = Integer.parseInt(par[2]);\n            }\n            else if (cmd.equals(\"enter\")) {\n            }\n            else if (cmd.equals(\"leave\")) {\n            }\n            else if (cmd.equals(\"remove\")) {\n                // var name = par[1];\n            }\n            else {\n                System.out.println(\"fail: comando invalido\");\n            }\n        }\n    }\n\n    private static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <memory>\n#include <sstream>\n#include <list>\nusing namespace std;\n\ntemplate<class CONTAINER, class FUNC>\nstring map_join(const CONTAINER& c, FUNC f, string sep) {\n    stringstream ss;\n    for (auto it = c.begin(); it != c.end(); it++) {\n        ss << (it == c.begin() ? \"\" : sep);\n        ss << f(*it);\n    }\n    return ss.str();\n}\n\n\nint main() {\n\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"show\") {\n        } else if (cmd == \"arrive\") {\n            // string name;\n            // int age;\n            // ss >> name >> age;\n        } else if (cmd == \"enter\") {\n        } else if (cmd == \"leave\") {\n        } else if (cmd == \"remove\") {\n            // string name;\n            // ss >> name;\n        } else {\n            cout << \"fail: comando invalido\" << endl;\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
