'--
@startuml

skinparam defaultFontName Hasklig
skinparam dpi 150

'==

class Bilheteria {
  - repVendas: Venda[]
  - repPessoas: Map<string, Pessoa>
  - repEventos: Map<string, Evento>
  __

  + constructor()    

  ' retorna a lista das vendas
  + getVendas(): Venda[]

  ' retorna a lista das pessoas como array
  + getPessoas(): Pessoa[]

  ' retorna a lista dos eventos como array
  + getEventos(): Evento[]
  
  __

  ' lançar exceção se a pessoa não existir
  + getPessoa(nome: string): Pessoa

  ' lançar exceção se o evento não existir
  + getEvento(nome: string): Evento

  __

  ' lançar exceção se nome for repetido
  + addPessoa(nome: string, meia:bool):void 
  
  ' lançar exceção se nome for repetido
  + addEvento(nome: string, preco: valor):void 
  
  ' esse método usa os métodos getPessoa e getEvento
  ' para fazer a venda, não é necessário lançar exceção aqui
  + vender(nome_pessoa: string, nome_evento: string):void 
}

class Pessoa {
  - nome: string
  - meia: boolean
  __
  + constructor(nome:string, meia:boolean)
  + getNome():string
  + getMeia():boolean
  + toString():string
}

class Evento {
  - nome: string
  - preco: number
  __
  + constructor(nome: string, preco: number)
  + getNome():string
  + getPreco():number
  + toString():string
}

class Venda {
  - pessoa: Pessoa
  - evento: Evento
  - valor: number
  __

  ' o valor da venda é calculado no construtor
  + constructor(pessoa: Pessoa, evento: Evento)

  + getPessoa():Pessoa
  + getEvento():Evento
  + getValor():number
  + toString():string
}

'--

' Relações e multiplicidade

Bilheteria *-- Venda
Bilheteria *-- Pessoa
Bilheteria *-- Evento

Venda o-- Pessoa
Venda o-- Evento


'--
@enduml