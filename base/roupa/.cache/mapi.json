{
    "title": "@roupa: Roupa com testes",
    "description": "# Roupa com testes\n\n<!-- toch -->\n[Intro](#intro) | [Shell](#shell) | [Draft](#draft)\n-- | -- | --\n<!-- toch -->\n\n![_](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/roupa/cover.jpg)\n\n## Intro\n\n- Vamos implementar uma classe que controla os poss\u00edveis valores de tamanho para uma roupa.\n- Os tamanhos ser\u00e3o identificados como uma vari\u00e1vel tipo texto, e os valores v\u00e1lidos s\u00e3o \"PP\", \"P\", \"M\" e \"G\", \"GG\" e \"XG\".\n- Fa\u00e7a o objeto roupa iniciar o tamanho como uma string vazia, para expressar que nenhum tamanho foi atribu\u00eddo.\n- Crie um construtor que n\u00e3o recebe par\u00e2metros e inicializa o tamanho como uma string vazia.\n- Crie o m\u00e9todo setTamanho que apenas aceita os valores v\u00e1lidos de tamanho.\n  - Caso o valor seja inv\u00e1lido, avise e d\u00ea uma mensagem de erro informando quais os valores permitidos.\n- Coloque o atributo tamanho como privado e crie um m\u00e9todo getTamanho para acess\u00e1-lo e setTamanho para alter\u00e1-lo.\n\n## Shell\n\n```bash\n#TEST_CASE\n$show\nsize: ()\n\n$size F\nfail: Valor inv\u00e1lido, tente PP, P, M, G, GG ou XG\n\n$show\nsize: ()\n\n$size PP\n$show\nsize: (PP)\n\n$end\n\n```\n\n## Draft\n\n<!-- links .cache/draft -->\n- cpp\n  - [shell.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/roupa/.cache/draft/cpp/shell.cpp)\n- java\n  - [Shell.java](https://github.com/qxcodepoo/arcade/blob/master/base/roupa/.cache/draft/java/Shell.java)\n- ts\n  - [shell.ts](https://github.com/qxcodepoo/arcade/blob/master/base/roupa/.cache/draft/ts/shell.ts)\n<!-- links -->",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\nshow\nsize F\nshow\nsize PP\nshow\nend\n======== EXPECT\n$show\nsize: ()\n$size F\nfail: Valor inv\u00e1lido, tente PP, P, M, G, GG ou XG\n$show\nsize: ()\n$size PP\n$show\nsize: (PP)\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\nfunction main(): void {\n    // CRIE SEU OBJETO AQUI\n\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const args = line.split(\" \");\n        const cmd = args[0];\n\n        if (cmd == \"size\") { // TENTE ATRIBUIR UM TAMANHO A ROUPA\n            // const size = args[1];\n        } else if (cmd == \"show\") { // MOSTRE A ROUPA\n        } else if (cmd == \"end\") {\n            break;\n        } else {\n            console.log(\"fail: Comando inv\u00e1lido\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.*;\n\npublic class Shell {    \n    public static void main(String[] args) {\n        // CRIE SEU OBJETO AQUI\n        \n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n            \n            var par = line.split(\" \");\n            var cmd = par[0];\n            \n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"size\")) { // TENTE ATRIBUIR UM TAMANHO A ROUPA\n                // String size = par[1];\n            }\n            else if (cmd.equals(\"show\")) { // MOSTRE A ROUPA\n            }\n            else {\n                System.out.println(\"fail: Comando inv\u00e1lido\");\n            }\n        }\n    }\n    private static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nint main() {\n    // CRIE SEU OBJETO AQUI\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"size\") { // TENTE ATRIBUIR UM TAMANHO\n            // string size;\n            // ss >> size;\n        } else if (cmd == \"show\") { // MOSTRE AS INFORMA\u00c7\u00d5ES DO OBJETO\n        } else if (cmd == \"end\") {\n            break;\n        } else {\n            cout << \"fail: Comando inv\u00e1lido\" << endl;\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
