{
    "title": "@vetores: @vetores",
    "description": "# @vetores\n\n<!-- toch -->\n[Requisitos](#requisitos) | [Shell](#shell) | [Dica](#dica) | [Esqueleto](#esqueleto)\n-- | -- | -- | --\n<!-- toch -->\n\n![cover](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/vetores/cover.jpg)\n\nO objetivo da atividade \u00e9 treinar estrutura de dados.\n\n***\n\n## Requisitos\n\nRequisito:\n- Utilize uma estrutura de armazenamento linear que permita elementos duplicados e mantenha a ordem de inser\u00e7\u00e3o.\n- Sugest\u00e3o:\n    - C: array\n    - C++: vector\n    - Java: ArrayList\n\n\n## Shell\n\n```bash\n#TEST_CASE inicio\n# O comando \"$show\" mostra os valores do vetor.\n# O comando \"$add V [V ...]\" adiciona os valores no final da estrutura.\n$show\n[ ]\n$add 1 2 3 4\n$show\n[ 1 2 3 4 ]\n$end\n```\n\n***\n\n```bash\n#TEST_CASE inicio\n# O comando \"$get ind\" mostra o valor do vetor na posicao `ind`\n# O comando \"$set ind value\" muda o valor da posicao `ind` para o valor `value`.\n$show\n[ ]\n$add 1 2 3 4\n$get 0\n1\n$get 3\n4\n$set 0 9\n$show\n[ 9 2 3 4 ]\n$end\n```\n\n***\n\n```bash\n#TEST_CASE rshow\n# O comando \"$rshow\" mostra os valores da estrutura do \u00faltimo para o primeiro.\n$rshow\n[ ]\n$add 1\n$rshow\n[ 1 ]\n$add 2 3 5\n$rshow\n[ 5 3 2 1 ]\n$end\n```\n\n***\n\n```bash\n#TEST_CASE add_mais_elementos\n$add 4 5 6 8 1 2 2 9\n$add 2 2 2 8 9 0 1 4\n$add 3 3 2 1\n$show\n[ 4 5 6 8 1 2 2 9 2 2 2 8 9 0 1 4 3 3 2 1 ]\n\n#TEST_CASE find_elemento\n# O comando \"$find V [V ...]\" retorna o \u00edndice da primeira ocorr\u00eancia dos valores procurado ou -1 se ele n\u00e3o existir.\n$find 7\n[ -1 ]\n$find 6 8 9\n[ 2 3 7 ]\n$find 2 0 1 7 10\n[ 5 13 4 -1 -1 ]\n$end\n```\n```bash\n#TEST_CASE insert_indice\n# O comando \"$ins ind V\" insere esse valor V na posi\u00e7\u00e3o ind da estrutura.\n# Se o ind for menor que 0, n\u00e3o fa\u00e7a a inser\u00e7\u00e3o.\n# Se ind for maior que \u00faltimo \u00edndice v\u00e1lido, insira na \u00faltima posi\u00e7\u00e3o.\n# Se ind for um \u00edndice v\u00e1lido, desloque todos os elementos a partir dessa posi\u00e7\u00e3o, uma posi\u00e7\u00e3o \u00e0 frente.\n$add 3 7\n$show\n[ 3 7 ]\n$ins 0 2\n$show\n[ 2 3 7 ]\n$ins 3 1\n$show\n[ 2 3 7 1 ]\n$ins -2 5\n$show\n[ 2 3 7 1 ]\n$ins 9 5\n$show\n[ 2 3 7 1 5 ]\n$ins 2 6\n$show\n[ 2 3 6 7 1 5 ]\n$end\n```\n\n***\n\n```bash\n#TEST_CASE remover_por_indice\n# o comando \"$rmi ind\" remove o elemento dado o \u00edndice. \n# Se o \u00edndice n\u00e3o existir, informe a falha.\n$add 4 5 6 8 1 2 2 9\n$rmi 0\n$show\n[ 5 6 8 1 2 2 9 ]\n$rmi 5\n$show\n[ 5 6 8 1 2 9 ]\n$rmi 5\n$show\n[ 5 6 8 1 2 ]\n$rmi 2\n$show\n[ 5 6 1 2 ]\n$rmi -1\nfail\n$rmi 4\nfail\n$show\n[ 5 6 1 2 ]\n$end\n```\n\n***\n\n```bash\n#TEST_CASE remove_all\n# o comando \"$rma V\" remove todos os elemento que cont\u00e9m esse valor. \n$add 2 2 2 2\n$rma 2\n$show\n[ ]\n$add 4 4 4 4 2 2 2 4 4 4 1 2 3 4\n$rma 7\n$show\n[ 4 4 4 4 2 2 2 4 4 4 1 2 3 4 ]\n$rma 2\n$show\n[ 4 4 4 4 4 4 4 1 3 4 ]\n$rma 4\n$show\n[ 1 3 ]\n$end\n```\n\n***\n\n## Dica\n- **boolean add(Object element)**: Adiciona o elemento especificado no final da lista.\n- **void add(int index, Object element)**: Insere o elemento especificado na posi\u00e7\u00e3o indicada da lista.\n- **void clear()**: Remove todos os elementos da lista.\n- **boolean contains(Object element)**: Retorna verdadeiro se a lista cont\u00e9m o elemento especificado e falso caso contr\u00e1rio.\n- **Object get(int index)**: Retorna o i-\u00e9simo elemento da lista.\n- **int indexOf(Object element)**: Retorna a posi\u00e7\u00e3o da primeira ocorr\u00eancia do elemento especificado na lista.\n- **boolean isEmpty()**: Retorna verdadeiro se a lista estiver vazia e falso caso contr\u00e1rio.\n- **int lastIndexOf(Object element)**: Retorna a posi\u00e7\u00e3o da \u00faltima ocorr\u00eancia do elemento especificado na lista.\n- **Object remove(int index)**: Remove o i-\u00e9simo elemento da lista.\n- **Object set(int index, Object element)**: Substitui o i-\u00e9simo elemento da lista pelo elemento especificado.\n- int size(): Retorna o n\u00famero de elementos da lista.\n***\n\n## Esqueleto\n<!--FILTER Solver.java java-->\n```java\npublic class Solver{\t\n    \n    public static void main(String[] args) {\n        ArrayList<Integer> vet = new ArrayList<Integer>();\n        Scanner scan = new Scanner(System.in);\n\n        while(true) {\n            String line = scan.nextLine();\n            System.out.println(\"$\" + line);\n            String ui[] = line.split(\" \");\n            String cmd = ui[0];\n\n            if(line.equals(\"end\")) {\n                break;\n            } else if(cmd.equals(\"show\")) {\n                System.out.print(\"[ \");\n                for(Integer value : vet)\n                    System.out.print(value + \" \");\n                System.out.print(\"]\\n\");\n            } else if(cmd.equals(\"rshow\")) {\n            } else if(cmd.equals(\"add\")) {\n                for(int i = 1; i < ui.length; i++)\n                    vet.add(Integer.parseInt(ui[i]));\n            } else if(cmd.equals(\"find\")) {\n            } else if(cmd.equals(\"get\")) {\n            } else if(cmd.equals(\"set\")) {\n            } else if(cmd.equals(\"ins\")) {\n            } else if(cmd.equals(\"rmi\")) {\n            } else if(cmd.equals(\"rma\")) {\n            } else {\n                System.out.print(\"fail: command not found\\n\");\n            }\n        }\n        scan.close();\n    }\n}\n```\n<!--FILTER_END-->",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT inicio\nshow\nadd 1 2 3 4\nshow\nend\n======== EXPECT\n$show\n[ ]\n$add 1 2 3 4\n$show\n[ 1 2 3 4 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT inicio\nshow\nadd 1 2 3 4\nget 0\nget 3\nset 0 9\nshow\nend\n======== EXPECT\n$show\n[ ]\n$add 1 2 3 4\n$get 0\n1\n$get 3\n4\n$set 0 9\n$show\n[ 9 2 3 4 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT rshow\nrshow\nadd 1\nrshow\nadd 2 3 5\nrshow\nend\n======== EXPECT\n$rshow\n[ ]\n$add 1\n$rshow\n[ 1 ]\n$add 2 3 5\n$rshow\n[ 5 3 2 1 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT add_mais_elementos\nadd 4 5 6 8 1 2 2 9\nadd 2 2 2 8 9 0 1 4\nadd 3 3 2 1\nshow\nend\n======== EXPECT\n$add 4 5 6 8 1 2 2 9\n$add 2 2 2 8 9 0 1 4\n$add 3 3 2 1\n$show\n[ 4 5 6 8 1 2 2 9 2 2 2 8 9 0 1 4 3 3 2 1 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT find_elemento\nadd 4 5 6 8 1 2 2 9\nadd 2 2 2 8 9 0 1 4\nadd 3 3 2 1\nshow\nfind 7\nfind 6 8 9\nfind 2 0 1 7 10\nend\n======== EXPECT\n$add 4 5 6 8 1 2 2 9\n$add 2 2 2 8 9 0 1 4\n$add 3 3 2 1\n$show\n[ 4 5 6 8 1 2 2 9 2 2 2 8 9 0 1 4 3 3 2 1 ]\n$find 7\n[ -1 ]\n$find 6 8 9\n[ 2 3 7 ]\n$find 2 0 1 7 10\n[ 5 13 4 -1 -1 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT insert_indice\nadd 3 7\nshow\nins 0 2\nshow\nins 3 1\nshow\nins -2 5\nshow\nins 9 5\nshow\nins 2 6\nshow\nend\n======== EXPECT\n$add 3 7\n$show\n[ 3 7 ]\n$ins 0 2\n$show\n[ 2 3 7 ]\n$ins 3 1\n$show\n[ 2 3 7 1 ]\n$ins -2 5\n$show\n[ 2 3 7 1 ]\n$ins 9 5\n$show\n[ 2 3 7 1 5 ]\n$ins 2 6\n$show\n[ 2 3 6 7 1 5 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT remover_por_indice\nadd 4 5 6 8 1 2 2 9\nrmi 0\nshow\nrmi 5\nshow\nrmi 5\nshow\nrmi 2\nshow\nrmi -1\nrmi 4\nshow\nend\n======== EXPECT\n$add 4 5 6 8 1 2 2 9\n$rmi 0\n$show\n[ 5 6 8 1 2 2 9 ]\n$rmi 5\n$show\n[ 5 6 8 1 2 9 ]\n$rmi 5\n$show\n[ 5 6 8 1 2 ]\n$rmi 2\n$show\n[ 5 6 1 2 ]\n$rmi -1\nfail\n$rmi 4\nfail\n$show\n[ 5 6 1 2 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT remove_all\nadd 2 2 2 2\nrma 2\nshow\nadd 4 4 4 4 2 2 2 4 4 4 1 2 3 4\nrma 7\nshow\nrma 2\nshow\nrma 4\nshow\nend\n======== EXPECT\n$add 2 2 2 2\n$rma 2\n$show\n[ ]\n$add 4 4 4 4 2 2 2 4 4 4 1 2 3 4\n$rma 7\n$show\n[ 4 4 4 4 2 2 2 4 4 4 1 2 3 4 ]\n$rma 2\n$show\n[ 4 4 4 4 4 4 4 1 3 4 ]\n$rma 4\n$show\n[ 1 3 ]\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
