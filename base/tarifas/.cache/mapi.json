{
    "title": "@tarifas: Opera\u00e7\u00f5es de saque, dep\u00f3sito, extrato",
    "description": "# Opera\u00e7\u00f5es de saque, dep\u00f3sito, extrato\n\n<!-- toch -->\n[Intro](#intro) | [Draft](#draft) | [Guide](#guide) | [Shell](#shell)\n-- | -- | -- | --\n<!-- toch -->\n\n![cover](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/tarifas/cover.jpg)\n\nO objetivo dessa atividade \u00e9 implementar uma classe respons\u00e1vel por gerenciar a account banc\u00e1ria de um \u00fanico cliente. Faremos opera\u00e7\u00f5es de withdraw, dep\u00f3sito e extrato.\n\n## Intro\n\n- **Iniciar**\n  - Iniciar a account passando n\u00famero da account.\n  - Se a account j\u00e1 existir, resete todos os valores para uma nova account.\n  - Inicia a account com a opera\u00e7\u00e3o de \"abertura\".\n  - Para facilitar a visualiza\u00e7\u00e3o dos dados, utilize inteiros para registrar as opera\u00e7\u00f5es financeiras.\n- **Saque, Dep\u00f3sito e Tarifas**\n  - Verifique se o valor \u00e9 v\u00e1lido.\n  - No caso da tarifa, o valor final de saldo poder\u00e1 ser negativo.\n  - No caso do saque, verifique se h\u00e1 saldo suficiente efetuar a opera\u00e7\u00e3o.\n- **Retornar o extrato**.\n  - Retornar todas as movimenta\u00e7\u00f5es da conta.\n  - A descri\u00e7\u00e3o pode ser \"opening\", \"withdraw\", \"deposit\", \"fee\", \"reverse\", \"error\".\n  - Os saques devem ter valor negativo e os dep\u00f3sitos positivos.\n  - Se a quantidade for fornecida, retorne apenas as \u00faltimas movimenta\u00e7\u00f5es.\n- **Extornar tarifas**.\n  - Deve ser poss\u00edvel extornar, pagando de volta, tarifas passando uma lista de \u00edndices.\n  - Apenas efetue a opera\u00e7\u00e3o de extorno dos \u00edndices v\u00e1lidos que forem tarifas.\n\n***\n\n## Draft\n\n- [draft.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/tarifas/.cache/draft.cpp)\n- [draft.java](https://github.com/qxcodepoo/arcade/blob/master/base/tarifas/.cache/draft.java)\n- [draft.ts](https://github.com/qxcodepoo/arcade/blob/master/base/tarifas/.cache/draft.ts)\n\n## Guide\n\n![diagrama](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/tarifas/diagrama.png)\n\n<!-- load diagrama.puml fenced=ts:filter -->\n\n```ts\n\n@startuml\n\nskinparam defaultFontName \"Source Code Pro\"\nskinparam dpi 150\n\n\n\nenum Label {\n  + DEPOSIT {static}\n  + FEE {static}\n  + OPENING {static}\n  + REVERSE {static}\n  + WITHDRAW {static}\n  + ERROR {static}\n\n  __\n  - label: String\n  - Label(label : String)\n  __\n  + getLabel() : String\n}\n\n' opera\u00e7\u00e3o guarda os dados de uma \u00fanica opera\u00e7\u00e3o\nclass Operation {\n  - index : int\n  - label : Label\n  ' valor em negativo se estiver diminuindo o saldo\n  - value : int\n  ' saldo residual apos opera\u00e7\u00e3o\n  - balance : int\n  __\n  + Operation(index : int, label : Label, value : int, balance : int)\n\n  + toString() : String\n  __\n  + getBalance() : int\n  + getIndex() : int\n  + getLabel() : Label\n  + getValue() : int\n}\n\n' nessa classe s\u00e3o efetivadas e registradas as altera\u00e7\u00f5es no saldo\nclass BalanceManager {\n\n  ' saldo do cliente\n  - balance : int \n\n  ' extrato\n  - extract : List<Operation>\n  \n  ' id da pr\u00f3xima opera\u00e7\u00e3o\n  - nextId : int\n  __\n  + BalanceManager()\n\n  ' adiciona value ao balance\n  ' crie opera\u00e7\u00e3o e adicione ao vetor de opera\u00e7\u00f5es\n  ' incrementa o nextId\n  + addOperation(label : Label, value : int)\n  '\n  ' retorna a opera\u00e7\u00e3o caso o \u00edndice seja v\u00e1lido\n  ' retorna uma opera\u00e7\u00e3o com label ERROR caso contr\u00e1rio\n  + getOperation(index : int) : Operation\n  '\n  + toString() : String\n  __\n  '\n  ' retorna o saldo atual\n  + getBalance() : int\n\n  ' se qtdOp for 0, retorne todas as opera\u00e7\u00f5es\n  ' se qtdOp for positivo, retorne as \u00faltimas qtdOp opera\u00e7\u00f5es\n  + getExtract(qtdOp : int) : List<Operation>\n}\n\nclass Account {\n  - balanceManager : BalanceManager\n  - id : int\n  __\n  + Account(id : int)\n\n  ' adiciona valor \u00e0 conta\n  + deposit(value : int) : void\n\n  ' retira o dinheiro, mesmo que o balance fique negativo\n  + fee(value : int) : void\n\n  ' se o \u00edndice for v\u00e1lido e representar uma opera\u00e7\u00e3o de tarifa\n  ' adicione o mesmo valor tarifado, mas com label de reverse(extorno)\n  + reverse(index : int) : void\n\n  ' s\u00f3 realiza a opera\u00e7\u00e3o se houver dinheiro suficiente na conta\n  + withdraw(value : int) : void\n  + toString() : String\n  __\n  ' em c++, retorne a referencia\n  + getBalanceManager() : BalanceManager\n}\n\n\n\n\nOperation \"1\" *-->  \"1\" Label\nBalanceManager \"1\" *-->  \"0..*\" Operation\nAccount \"1\" *-->  \"1\" BalanceManager\n@enduml\n\n```\n\n<!-- load -->\n\n***\n\n## Shell\n\n```bash\n#TEST_CASE iniciar\n$init 100\n$show\naccount:100 balance:0\n\n#TEST_CASE depositar\n$deposit 100\n$show\naccount:100 balance:100\n\n#TEST_CASE deposito invalido\n$deposit -10\nfail: invalid value\n$show\naccount:100 balance:100\n\n#TEST_CASE saque\n$withdraw 20\n$show\naccount:100 balance:80\n\n#TEST_CASE taxa\n$fee 10\n$show\naccount:100 balance:70\n\n#TEST_CASE saque muito alto\n$withdraw 150\nfail: insufficient balance\n$show\naccount:100 balance:70\n\n$withdraw 30\n$show\naccount:100 balance:40\n\n#TEST_CASE taxa\n$fee 5\n$show\naccount:100 balance:35\n\n#__deposito\n$deposit 5\n$fee 1\n$show\naccount:100 balance:39\n\n#TEST_CASE extrato\n#extrato mostra todas as opera\u00e7\u00f5es desde a abertura da account\n$extract 0\n 0:  opening:    0:    0\n 1:  deposit:  100:  100\n 2: withdraw:  -20:   80\n 3:      fee:  -10:   70\n 4: withdraw:  -30:   40\n 5:      fee:   -5:   35\n 6:  deposit:    5:   40\n 7:      fee:   -1:   39\n\n#TEST_CASE extrato n\n#extrato mostra as ultimas N operacoes\n$extract 2\n 6:  deposit:    5:   40\n 7:      fee:   -1:   39\n\n#TEST_CASE extornar\n$reverse 1 5 7 50\nfail: index 1 is not a fee\nfail: index 50 invalid\n\n#TEST_CASE novo extrato\n$extract 0\n 0:  opening:    0:    0\n 1:  deposit:  100:  100\n 2: withdraw:  -20:   80\n 3:      fee:  -10:   70\n 4: withdraw:  -30:   40\n 5:      fee:   -5:   35\n 6:  deposit:    5:   40\n 7:      fee:   -1:   39\n 8:  reverse:    5:   44\n 9:  reverse:    1:   45\n\n#TEST_CASE extrato tarifa\n$fee 50\n$extract 2\n 9:  reverse:    1:   45\n10:      fee:  -50:   -5\n\n$end\n```\n\n***\n\n```bash\n#TEST_CASE fee\n$init 107\n$fee 10\n$show\naccount:107 balance:-10\n$extract 0\n 0:  opening:    0:    0\n 1:      fee:  -10:  -10\n$end\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT iniciar\ninit 100\nshow\nend\n======== EXPECT\n$init 100\n$show\naccount:100 balance:0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT depositar\ninit 100\nshow\ndeposit 100\nshow\nend\n======== EXPECT\n$init 100\n$show\naccount:100 balance:0\n$deposit 100\n$show\naccount:100 balance:100\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT deposito invalido\ninit 100\nshow\ndeposit 100\nshow\ndeposit -10\nshow\nend\n======== EXPECT\n$init 100\n$show\naccount:100 balance:0\n$deposit 100\n$show\naccount:100 balance:100\n$deposit -10\nfail: invalid value\n$show\naccount:100 balance:100\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT saque\ninit 100\nshow\ndeposit 100\nshow\ndeposit -10\nshow\nwithdraw 20\nshow\nend\n======== EXPECT\n$init 100\n$show\naccount:100 balance:0\n$deposit 100\n$show\naccount:100 balance:100\n$deposit -10\nfail: invalid value\n$show\naccount:100 balance:100\n$withdraw 20\n$show\naccount:100 balance:80\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT taxa\ninit 100\nshow\ndeposit 100\nshow\ndeposit -10\nshow\nwithdraw 20\nshow\nfee 10\nshow\nend\n======== EXPECT\n$init 100\n$show\naccount:100 balance:0\n$deposit 100\n$show\naccount:100 balance:100\n$deposit -10\nfail: invalid value\n$show\naccount:100 balance:100\n$withdraw 20\n$show\naccount:100 balance:80\n$fee 10\n$show\naccount:100 balance:70\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT saque muito alto\ninit 100\nshow\ndeposit 100\nshow\ndeposit -10\nshow\nwithdraw 20\nshow\nfee 10\nshow\nwithdraw 150\nshow\nwithdraw 30\nshow\nend\n======== EXPECT\n$init 100\n$show\naccount:100 balance:0\n$deposit 100\n$show\naccount:100 balance:100\n$deposit -10\nfail: invalid value\n$show\naccount:100 balance:100\n$withdraw 20\n$show\naccount:100 balance:80\n$fee 10\n$show\naccount:100 balance:70\n$withdraw 150\nfail: insufficient balance\n$show\naccount:100 balance:70\n$withdraw 30\n$show\naccount:100 balance:40\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT taxa\ninit 100\nshow\ndeposit 100\nshow\ndeposit -10\nshow\nwithdraw 20\nshow\nfee 10\nshow\nwithdraw 150\nshow\nwithdraw 30\nshow\nfee 5\nshow\ndeposit 5\nfee 1\nshow\nend\n======== EXPECT\n$init 100\n$show\naccount:100 balance:0\n$deposit 100\n$show\naccount:100 balance:100\n$deposit -10\nfail: invalid value\n$show\naccount:100 balance:100\n$withdraw 20\n$show\naccount:100 balance:80\n$fee 10\n$show\naccount:100 balance:70\n$withdraw 150\nfail: insufficient balance\n$show\naccount:100 balance:70\n$withdraw 30\n$show\naccount:100 balance:40\n$fee 5\n$show\naccount:100 balance:35\n$deposit 5\n$fee 1\n$show\naccount:100 balance:39\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT extrato\ninit 100\nshow\ndeposit 100\nshow\ndeposit -10\nshow\nwithdraw 20\nshow\nfee 10\nshow\nwithdraw 150\nshow\nwithdraw 30\nshow\nfee 5\nshow\ndeposit 5\nfee 1\nshow\nextract 0\nend\n======== EXPECT\n$init 100\n$show\naccount:100 balance:0\n$deposit 100\n$show\naccount:100 balance:100\n$deposit -10\nfail: invalid value\n$show\naccount:100 balance:100\n$withdraw 20\n$show\naccount:100 balance:80\n$fee 10\n$show\naccount:100 balance:70\n$withdraw 150\nfail: insufficient balance\n$show\naccount:100 balance:70\n$withdraw 30\n$show\naccount:100 balance:40\n$fee 5\n$show\naccount:100 balance:35\n$deposit 5\n$fee 1\n$show\naccount:100 balance:39\n$extract 0\n 0:  opening:    0:    0\n 1:  deposit:  100:  100\n 2: withdraw:  -20:   80\n 3:      fee:  -10:   70\n 4: withdraw:  -30:   40\n 5:      fee:   -5:   35\n 6:  deposit:    5:   40\n 7:      fee:   -1:   39\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT extrato n\ninit 100\nshow\ndeposit 100\nshow\ndeposit -10\nshow\nwithdraw 20\nshow\nfee 10\nshow\nwithdraw 150\nshow\nwithdraw 30\nshow\nfee 5\nshow\ndeposit 5\nfee 1\nshow\nextract 0\nextract 2\nend\n======== EXPECT\n$init 100\n$show\naccount:100 balance:0\n$deposit 100\n$show\naccount:100 balance:100\n$deposit -10\nfail: invalid value\n$show\naccount:100 balance:100\n$withdraw 20\n$show\naccount:100 balance:80\n$fee 10\n$show\naccount:100 balance:70\n$withdraw 150\nfail: insufficient balance\n$show\naccount:100 balance:70\n$withdraw 30\n$show\naccount:100 balance:40\n$fee 5\n$show\naccount:100 balance:35\n$deposit 5\n$fee 1\n$show\naccount:100 balance:39\n$extract 0\n 0:  opening:    0:    0\n 1:  deposit:  100:  100\n 2: withdraw:  -20:   80\n 3:      fee:  -10:   70\n 4: withdraw:  -30:   40\n 5:      fee:   -5:   35\n 6:  deposit:    5:   40\n 7:      fee:   -1:   39\n$extract 2\n 6:  deposit:    5:   40\n 7:      fee:   -1:   39\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT extornar\ninit 100\nshow\ndeposit 100\nshow\ndeposit -10\nshow\nwithdraw 20\nshow\nfee 10\nshow\nwithdraw 150\nshow\nwithdraw 30\nshow\nfee 5\nshow\ndeposit 5\nfee 1\nshow\nextract 0\nextract 2\nreverse 1 5 7 50\nend\n======== EXPECT\n$init 100\n$show\naccount:100 balance:0\n$deposit 100\n$show\naccount:100 balance:100\n$deposit -10\nfail: invalid value\n$show\naccount:100 balance:100\n$withdraw 20\n$show\naccount:100 balance:80\n$fee 10\n$show\naccount:100 balance:70\n$withdraw 150\nfail: insufficient balance\n$show\naccount:100 balance:70\n$withdraw 30\n$show\naccount:100 balance:40\n$fee 5\n$show\naccount:100 balance:35\n$deposit 5\n$fee 1\n$show\naccount:100 balance:39\n$extract 0\n 0:  opening:    0:    0\n 1:  deposit:  100:  100\n 2: withdraw:  -20:   80\n 3:      fee:  -10:   70\n 4: withdraw:  -30:   40\n 5:      fee:   -5:   35\n 6:  deposit:    5:   40\n 7:      fee:   -1:   39\n$extract 2\n 6:  deposit:    5:   40\n 7:      fee:   -1:   39\n$reverse 1 5 7 50\nfail: index 1 is not a fee\nfail: index 50 invalid\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT novo extrato\ninit 100\nshow\ndeposit 100\nshow\ndeposit -10\nshow\nwithdraw 20\nshow\nfee 10\nshow\nwithdraw 150\nshow\nwithdraw 30\nshow\nfee 5\nshow\ndeposit 5\nfee 1\nshow\nextract 0\nextract 2\nreverse 1 5 7 50\nextract 0\nend\n======== EXPECT\n$init 100\n$show\naccount:100 balance:0\n$deposit 100\n$show\naccount:100 balance:100\n$deposit -10\nfail: invalid value\n$show\naccount:100 balance:100\n$withdraw 20\n$show\naccount:100 balance:80\n$fee 10\n$show\naccount:100 balance:70\n$withdraw 150\nfail: insufficient balance\n$show\naccount:100 balance:70\n$withdraw 30\n$show\naccount:100 balance:40\n$fee 5\n$show\naccount:100 balance:35\n$deposit 5\n$fee 1\n$show\naccount:100 balance:39\n$extract 0\n 0:  opening:    0:    0\n 1:  deposit:  100:  100\n 2: withdraw:  -20:   80\n 3:      fee:  -10:   70\n 4: withdraw:  -30:   40\n 5:      fee:   -5:   35\n 6:  deposit:    5:   40\n 7:      fee:   -1:   39\n$extract 2\n 6:  deposit:    5:   40\n 7:      fee:   -1:   39\n$reverse 1 5 7 50\nfail: index 1 is not a fee\nfail: index 50 invalid\n$extract 0\n 0:  opening:    0:    0\n 1:  deposit:  100:  100\n 2: withdraw:  -20:   80\n 3:      fee:  -10:   70\n 4: withdraw:  -30:   40\n 5:      fee:   -5:   35\n 6:  deposit:    5:   40\n 7:      fee:   -1:   39\n 8:  reverse:    5:   44\n 9:  reverse:    1:   45\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT extrato tarifa\ninit 100\nshow\ndeposit 100\nshow\ndeposit -10\nshow\nwithdraw 20\nshow\nfee 10\nshow\nwithdraw 150\nshow\nwithdraw 30\nshow\nfee 5\nshow\ndeposit 5\nfee 1\nshow\nextract 0\nextract 2\nreverse 1 5 7 50\nextract 0\nfee 50\nextract 2\nend\n======== EXPECT\n$init 100\n$show\naccount:100 balance:0\n$deposit 100\n$show\naccount:100 balance:100\n$deposit -10\nfail: invalid value\n$show\naccount:100 balance:100\n$withdraw 20\n$show\naccount:100 balance:80\n$fee 10\n$show\naccount:100 balance:70\n$withdraw 150\nfail: insufficient balance\n$show\naccount:100 balance:70\n$withdraw 30\n$show\naccount:100 balance:40\n$fee 5\n$show\naccount:100 balance:35\n$deposit 5\n$fee 1\n$show\naccount:100 balance:39\n$extract 0\n 0:  opening:    0:    0\n 1:  deposit:  100:  100\n 2: withdraw:  -20:   80\n 3:      fee:  -10:   70\n 4: withdraw:  -30:   40\n 5:      fee:   -5:   35\n 6:  deposit:    5:   40\n 7:      fee:   -1:   39\n$extract 2\n 6:  deposit:    5:   40\n 7:      fee:   -1:   39\n$reverse 1 5 7 50\nfail: index 1 is not a fee\nfail: index 50 invalid\n$extract 0\n 0:  opening:    0:    0\n 1:  deposit:  100:  100\n 2: withdraw:  -20:   80\n 3:      fee:  -10:   70\n 4: withdraw:  -30:   40\n 5:      fee:   -5:   35\n 6:  deposit:    5:   40\n 7:      fee:   -1:   39\n 8:  reverse:    5:   44\n 9:  reverse:    1:   45\n$fee 50\n$extract 2\n 9:  reverse:    1:   45\n10:      fee:  -50:   -5\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT fee\ninit 107\nfee 10\nshow\nextract 0\nend\n======== EXPECT\n$init 107\n$fee 10\n$show\naccount:107 balance:-10\n$extract 0\n 0:  opening:    0:    0\n 1:      fee:  -10:  -10\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport { };\n\nfunction main() {\n\n    while (true) {\n        let line = input();\n        console.log(\"$\" + line);\n        let args = line.split(\" \");\n\n        if (args[0] == \"end\") {\n            break;\n        } else if (args[0] == \"init\") {\n            const id = parseInt(args[1]);\n        } else if (args[0] == \"show\") {\n        } else if (args[0] == \"withdraw\") {\n            const value = parseInt(args[1]);\n        } else if (args[0] == \"fee\") {\n            const value = parseInt(args[1]);\n        } else if (args[0] == \"reverse\") {\n            for (let i = 1; i < args.length; i++) {\n            }\n        } else if (args[0] == \"deposit\") {\n            const value = parseInt(args[1]);\n        } else if (args[0] == \"extract\") {\n            const qtdOp = parseInt(args[1]);\n        } else {\n            console.log(\"fail: invalid command\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\n\n\npublic class Shell{\n    public static void main(String[] _args) {\n        while (true) {\n            var line = scanner.nextLine();\n            var args = line.split(\" \");\n            var cmd = args[0];\n            System.out.println(\"$\" + line);\n\n            if (cmd.equals(\"end\")) {\n                break;\n            } else if (cmd.equals(\"show\")) {\n            } else if (cmd.equals(\"init\")) {\n                // var id = Integer.parseInt(args[1]);\n            } else if (cmd.equals(\"withdraw\")) {\n                // var value = Integer.parseInt(args[1]);\n            } else if (cmd.equals(\"fee\")) {\n                // var value = Integer.parseInt(args[1]);\n            } else if (cmd.equals(\"deposit\")) {\n                // var value = Integer.parseInt(args[1]);\n            } else if (cmd.equals(\"reverse\")) {\n                // for (int i = 1; i < args.length; i++) {\n                //     var index = Integer.parseInt(args[i]);\n                // }\n            } else if (cmd.equals(\"extract\")) {\n                // var qtdOp = Integer.parseInt(args[1]);\n            }\n            else {\n                System.out.println(\"fail: comando invalido\");\n            }\n        }\n    }\n\n    static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include <sstream>\n#include <iomanip>\nusing namespace std;\n\ntemplate<typename CONTAINER, typename FUNC>\nstring join(const CONTAINER& cont, FUNC func, const string& delim) {\n    stringstream ss;\n    for (auto it = cont.begin(); it != cont.end(); it++) {\n        ss << (it == cont.begin() ? \"\" : delim) << func(*it);\n    }\n    return ss.str();\n}\n\nint main() {\n    \n    while(true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        \n        if (cmd == \"end\") {\n            break;\n        }\n        else if (cmd == \"init\") {\n            // int number{};\n            // ss >> number;\n        }\n        else if (cmd == \"show\") {\n            // TODO\n        }\n        else if (cmd == \"deposit\") {\n            // float value{};\n            // ss >> value;\n        }\n        else if (cmd == \"withdraw\") {\n            // float value{};\n            // ss >> value;\n        }\n        else if (cmd == \"fee\") {\n            // float value{};\n            // ss >> value;\n        }\n        else if (cmd == \"extract\") {\n            // int qtd{};\n            // ss >> qtd;\n        }\n        else if (cmd == \"reverse\") {\n            // int index{};\n            // while(ss >> index) {\n            // }\n        }\n        else {\n            cout << \"fail: invalid command\\n\";\n        }\n    }\n    return 0;\n}\n",
                "type": "show"
            }
        ]
    }
}
