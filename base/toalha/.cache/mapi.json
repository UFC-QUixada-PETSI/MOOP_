{
    "title": "@toalha: Toalha, o item mais \u00fatil do universo",
    "description": "# Toalha, o item mais \u00fatil do universo\n\n<!-- toch -->\n[Intro](#intro) | [Guide](#guide)\n-- | --\n<!-- toch -->\n\n![_](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/toalha/cover.jpg)\n\n## Intro\n\n- Crie uma classe Toalha `Towel` com os atributos cor `color`, tamanho `size` e umidade `wetness`.\n- Crie um construtor que inicialize todos os atributos cor e tamanho com valores recebidos como par\u00e2metro e umidade com 0.\n- Crie um m\u00e9todo enxugar `dry` que recebe um valor inteiro quantidade `amout` e AUMENTA o atributo umidade da toalha.\n- Crie um m\u00e9todo torcer `wringOut` que zera o atributo umidade da towel.\n- Crie um m\u00e9todo para pegar m\u00e1ximo de umidade `getMaxWetness` que retorna o valor m\u00e1ximo de umidade que essa toalha pode ter.\n- O m\u00e1ximo de umidade que uma toalha pode ter \u00e9 de acordo com o tamanho dela:\n  - `P` -> 10\n  - `M` -> 20\n  - `G` -> 30\n- Crie um m\u00e9todo que retorna se a toalha esta seca `isDry`, que retorna `true` se a umidade da toalha for 0 e `false` caso contr\u00e1rio.\n- Fa\u00e7a um c\u00f3digo de teste para validar o comportamento da classe Toalha.\n\n![diagrama](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/toalha/diagrama.png)\n\n## Guide\n\n[![youtube icon](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/toalha/../youguide.png)](https://youtu.be/fEvJns4NpTM?si=G-FDqGnt_5SPSZpg)\n\n- Abaixo voc\u00ea tem um exemplo de c\u00f3digo em python que implementa a classe `Towel` e testa seu comportamento.\n- Adapte a ideia para a linguagem que voc\u00ea est\u00e1 estudando e crie seus pr\u00f3prios testes.\n\n<!-- load solver.py fenced:filter:py -->\n\n```py\nclass Towel:\n    def __init__(self, color: str, size: str):\n        self.color: str = color\n        self.size: str = size\n        self.wetness: int = 0\n    \n    def getMaxWetness(self) -> int:\n        if self.size == \"P\":\n            return 10\n        if self.size == \"M\":\n            return 20\n        if self.size == \"G\":\n            return 30\n        return 0\n\n    def dry(self, amount: int) -> None:\n        self.wetness += amount\n        if self.wetness > self.getMaxWetness():\n            print(\"toalha encharcada\")\n            self.wetness = self.getMaxWetness()\n    \n    def wringOut(self) -> None:\n        self.wetness = 0\n    \n    def isDry(self) -> bool:\n        return self.wetness == 0\n\n\n    def show(self) -> None:\n        print(self)\n\n    def __str__(self) -> str:\n        return f\"{self.color} {self.size} {self.wetness}\"\n\n# Testes\ntowel = Towel(\"Azul\", \"P\")\ntowel.show()  # Azul P 0\ntowel.dry(5)\ntowel.show()  # Azul P 5\nprint(towel.isDry()) # False\ntowel.dry(5)\ntowel.show()  # Azul P 10\ntowel.dry(5) # msg: toalha encharcada\ntowel.show()  # Azul P 10\n\ntowel.wringOut()\ntowel.show()  # Azul P 0\n\ntowel = Towel(\"Verde\", \"G\")\nprint(towel.isDry()) # True\ntowel.dry(30)\ntowel.show()  # Verde G 30\nprint(towel.isDry()) # False\ntowel.dry(1)  # msg: toalha encharcada\n\n```\n\n<!-- load -->\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "",
            "type": "hide"
        }
    ],
    "draft": {}
}
