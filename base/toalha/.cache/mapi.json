{
    "title": "@toalha: Toalha, o item mais \u00fatil do universo",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@toalha: Toalha, o item mais \u00fatil do universo</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n</head>\n<body>\n<h1 id=\"toalha-o-item-mais-\u00fatil-do-universo\">Toalha, o item mais \u00fatil do\nuniverso</h1>\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/toalha/cover.jpg\"\nalt=\"_\" />\n<figcaption aria-hidden=\"true\">_</figcaption>\n</figure>\n<table>\n<thead>\n<tr class=\"header\">\n<th>UML</th>\n<th>Testes</th>\n<th>Rascunho</th>\n<th>Adapter</th>\n<th>Esqueleto</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>sim</td>\n<td>n\u00e3o</td>\n<td>n\u00e3o</td>\n<td>n\u00e3o</td>\n<td>n\u00e3o</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"guide\">Guide</h2>\n<ul>\n<li>Crie uma classe Toalha <code>Towel</code> com os atributos cor\n<code>color</code>, tamanho <code>size</code> e umidade\n<code>wetness</code>.</li>\n<li>Crie um construtor que inicialize todos os atributos cor e tamanho\ncom valores recebidos como par\u00e2metro e umidade com 0.</li>\n<li>Crie um m\u00e9todo enxugar <code>dry</code> que recebe um valor inteiro\nquantidade <code>amout</code> e AUMENTA o atributo umidade da\ntoalha.</li>\n<li>Crie um m\u00e9todo torcer <code>wringOut</code> que zera o atributo\numidade da towel.</li>\n<li>Crie um m\u00e9todo para pegar m\u00e1ximo de umidade\n<code>getMaxWetness</code> que retorna o valor m\u00e1ximo de umidade que\nessa toalha pode ter.</li>\n<li>O m\u00e1ximo de umidade que uma toalha pode ter \u00e9 de acordo com o\ntamanho dela:\n<ul>\n<li><code>P</code> -&gt; 10</li>\n<li><code>M</code> -&gt; 20</li>\n<li><code>G</code> -&gt; 30</li>\n</ul></li>\n<li>Crie um m\u00e9todo que retorna se a toalha esta seca <code>isDry</code>,\nque retorna <code>true</code> se a umidade da toalha for 0 e\n<code>false</code> caso contr\u00e1rio.</li>\n<li>Fa\u00e7a um c\u00f3digo de teste para validar o comportamento da classe\nToalha.</li>\n</ul>\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/toalha/diagrama.png\"\nalt=\"diagrama\" />\n<figcaption aria-hidden=\"true\">diagrama</figcaption>\n</figure>\n<h2 id=\"exemplo\">Exemplo</h2>\n<!-- load solver.py fenced:filter:py -->\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode py\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> Towel:</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>, color: <span class=\"bu\">str</span>, size: <span class=\"bu\">str</span>):</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.color: <span class=\"bu\">str</span> <span class=\"op\">=</span> color</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.size: <span class=\"bu\">str</span> <span class=\"op\">=</span> size</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.wetness: <span class=\"bu\">int</span> <span class=\"op\">=</span> <span class=\"dv\">0</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> getMaxWetness(<span class=\"va\">self</span>) <span class=\"op\">-&gt;</span> <span class=\"bu\">int</span>:</span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> dry(<span class=\"va\">self</span>, amount: <span class=\"bu\">int</span>) <span class=\"op\">-&gt;</span> <span class=\"va\">None</span>:</span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> wringOut(<span class=\"va\">self</span>) <span class=\"op\">-&gt;</span> <span class=\"va\">None</span>:</span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> isDry(<span class=\"va\">self</span>) <span class=\"op\">-&gt;</span> <span class=\"bu\">bool</span>:</span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__str__</span>(<span class=\"va\">self</span>) <span class=\"op\">-&gt;</span> <span class=\"bu\">str</span>:</span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> show(<span class=\"va\">self</span>) <span class=\"op\">-&gt;</span> <span class=\"va\">None</span>:</span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># Testes</span></span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>towel <span class=\"op\">=</span> Towel(<span class=\"st\">&quot;Azul&quot;</span>, <span class=\"st\">&quot;P&quot;</span>)</span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>towel.show()  <span class=\"co\"># Azul P 0</span></span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>towel.dry(<span class=\"dv\">5</span>)</span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>towel.show()  <span class=\"co\"># Azul P 5</span></span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(towel.isDry()) <span class=\"co\"># False</span></span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>towel.dry(<span class=\"dv\">5</span>)</span>\n<span id=\"cb1-20\"><a href=\"#cb1-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>towel.show()  <span class=\"co\"># Azul P 10</span></span>\n<span id=\"cb1-21\"><a href=\"#cb1-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>towel.dry(<span class=\"dv\">5</span>) <span class=\"co\"># msg: toalha encharcada</span></span>\n<span id=\"cb1-22\"><a href=\"#cb1-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>towel.show()  <span class=\"co\"># Azul P 10</span></span>\n<span id=\"cb1-23\"><a href=\"#cb1-23\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-24\"><a href=\"#cb1-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>towel.wringOut()</span>\n<span id=\"cb1-25\"><a href=\"#cb1-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>towel.show()  <span class=\"co\"># Azul P 0</span></span>\n<span id=\"cb1-26\"><a href=\"#cb1-26\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-27\"><a href=\"#cb1-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>towel <span class=\"op\">=</span> Towel(<span class=\"st\">&quot;Verde&quot;</span>, <span class=\"st\">&quot;G&quot;</span>)</span>\n<span id=\"cb1-28\"><a href=\"#cb1-28\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(towel.isDry()) <span class=\"co\"># True</span></span>\n<span id=\"cb1-29\"><a href=\"#cb1-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>towel.dry(<span class=\"dv\">30</span>)</span>\n<span id=\"cb1-30\"><a href=\"#cb1-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>towel.show()  <span class=\"co\"># Verde G 30</span></span>\n<span id=\"cb1-31\"><a href=\"#cb1-31\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(towel.isDry()) <span class=\"co\"># False</span></span>\n<span id=\"cb1-32\"><a href=\"#cb1-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>towel.dry(<span class=\"dv\">1</span>)  <span class=\"co\"># msg: toalha encharcada</span></span></code></pre></div>\n<!-- load -->\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
