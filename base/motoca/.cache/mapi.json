{
    "title": "@motoca: Crian\u00e7as andando de motoca",
    "description": "# Crian\u00e7as andando de motoca\n\n<!-- toch -->\n[Intro](#intro) | [Guide](#guide) | [Shell](#shell) | [Draft](#draft)\n-- | -- | -- | --\n<!-- toch -->\n\n![cover](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/motoca/cover.jpg)\n\n## Intro\n\nEste \u00e9 um projeto de modelagem e implementa\u00e7\u00e3o de uma motoca motorizada em um parque. A ideia \u00e9 simular o funcionamento dessa motoca atrav\u00e9s de classes em um programa. Para isso, ser\u00e3o implementadas duas classes principais: `Pessoa` e `Moto`.\n\n- Descri\u00e7\u00e3o\n  - A classe `Moto` representa a motoca em si. Ela possui atributos como pot\u00eancia, tempo e a pessoa que est\u00e1 atualmente utilizando-a.\n  - A motoca inicia com pot\u00eancia 1, sem minutos e sem ningu\u00e9m.\n  - Apenas uma pessoa pode estar na motoca por vez.\n  - As funcionalidades principais da motoca incluem subir uma pessoa, descer uma pessoa, comprar tempo, dirigir por um tempo determinado e buzinar.\n  - A classe `Pessoa` representa os usu\u00e1rios da motoca. Ela possui os atributos nome e idade.\n- Comandos\n  - Todos os comandos seguem o modelo `$comando arg1 arg2 ...`. Em caso de erro, uma mensagem adequada deve ser impressa.\n  - `$show` - Mostra o estado atual da motoca, incluindo pot\u00eancia, tempo e pessoa atualmente na motoca.\n    - `f\"power:{this.power}, time:{this.time}, person:{this.person}\"`\n    - power:1, time:0, person:(marcos:4)\n  - `$init` - Reinicia a motoca para o estado inicial, com pot\u00eancia 1, sem minutos e sem ningu\u00e9m.\n  - `$enter` - Permite uma pessoa subir na motoca. Deve ser seguido pelos argumentos `nome` e `idade` da pessoa.\n  - `$leave` - Faz a pessoa atualmente na motoca descer.\n  - `$buy` - Permite comprar tempo em minutos para utilizar a motoca. O tempo recebido \u00e9 incrementado ao tempo atual.\n  - `$drive` - Permite dirigir a motoca por um tempo determinado.\n  - `$honk` - Permite buzinar a motoca.\n\n## Guide\n\n![diagrama](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/motoca/diagrama.png)\n\n- Classe Pessoa\n  - Crie a classe `Pessoa` com os atributos `age` e `name`.\n  - Defina os atributos como privados.\n  - Crie o construtor da classe que recebe `name` como uma string e `age` como um n\u00famero.\n  - Crie os m\u00e9todos `getAge()` e `getName()` para retornar a idade e o nome da pessoa, respectivamente.\n  - Crie o m\u00e9todo `toString()` para retornar uma string no formato \"nome:idade\".\n- Parte 1: Inserir\n  - Crie a classe `Motoca` com os atributos `potencia`, `time` e `pessoa`.\n  - Inicialize os atributos no construtor, onde `potencia` inicia com 1, `time` inicia com 0 e `pessoa` inicia como nulo.\n  - Crie o m\u00e9todo `inserir(pessoa: Pessoa): bool` que permite inserir uma pessoa na motoca.\n  - Verifique se h\u00e1 uma pessoa na motoca. Se houver, imprima \"fail: busy motorcycle\" e retorne falso.\n  - Caso contr\u00e1rio, insira a pessoa na motoca e retorne verdadeiro.\n  - Crie o m\u00e9todo `toString()` para mostrar o estado da motoca.\n- Parte 2: Remover\n  - Crie o m\u00e9todo `remover(): Pessoa | null` que permite remover a pessoa da motoca.\n  - Verifique se h\u00e1 uma pessoa na motoca. Se n\u00e3o houver, imprima \"fail: empty motorcycle\" e retorne nulo.\n  - Caso contr\u00e1rio, remova a pessoa da motoca e retorne a pessoa removida.\n- Parte 3: Comprar Tempo\n  - Crie o m\u00e9todo `buyTime(time: number)` que permite comprar tempo em minutos para utilizar a motoca.\n  - Incremente o tempo da motoca com o tempo passado como par\u00e2metro.\n- Parte 4: Dirigir\n  - Crie o m\u00e9todo `drive(time: number)` que permite dirigir a motoca por um tempo determinado.\n  - Verifique se h\u00e1 tempo dispon\u00edvel na motoca. Se n\u00e3o houver, imprima \"fail: buy time first\".\n  - Verifique se h\u00e1 uma pessoa na motoca. Se n\u00e3o houver, imprima \"fail: empty motorcycle\".\n  - Verifique se a idade da pessoa na motoca \u00e9 maior que 10 anos. Se for, imprima \"fail: too old to drive\".\n  - Calcule o novo tempo ap\u00f3s dirigir. Se o novo tempo for menor ou igual a 0, imprima \"fail: time finished after X minutes\".\n  - Atualize o tempo da motoca.\n- Parte 5: Buzinar\n  - Crie o m\u00e9todo `honk()` que permite buzinar a motoca.\n  - Construa a string da buzina, onde o n\u00famero de \"e\" \u00e9 igual \u00e0 pot\u00eancia da motoca.\n  - Retorne a buzina.\n\n___\n\n- Cada linguagem tem suas formas de definir aus\u00eancia de valor.\n- Por exemplo, vamos criar uma vari\u00e1vel que pode ser um inteiro ou n\u00e3o ter valor.\n\n- Python\n  - `null` \u00e9 o valor padr\u00e3o para aus\u00eancia de valor.\n  - `variavel: int | null = null` - Define uma vari\u00e1vel que pode ser `int` ou `null`.\n  - `variavel = 5` - Define a vari\u00e1vel com um valor inteiro.\n  - Teste: `if variavel is not null:`\n- Java\n  - `null` \u00e9 o valor padr\u00e3o para aus\u00eancia de valor.\n  - Tipos primitivos n\u00e3o podem ser null.\n  - Todos as refer\u00eancias a objetos podem ser null.\n  - Refer\u00eancias n\u00e3o inicializadas s\u00e3o null.\n  - `Integer variavel = null` - Define uma vari\u00e1vel que pode ser `Integer` ou `null`.\n  - `variavel = 5` - Define a vari\u00e1vel com um valor inteiro.\n  - Teste: `if (variavel != null) {`\n- C++\n  - `nullptr` \u00e9 o valor padr\u00e3o para aus\u00eancia de valor.\n  - Apenas ponteiros podem ser nullptr.\n  - Valores est\u00e1ticos n\u00e3o podem ser nullptr.\n  - Op\u00e7\u00f5es de abordagem com ponteiros:\n    - `int* variavel = nullptr` - Define um ponteiro que pode ser `int` ou `nullptr`.\n    - `std::shared_ptr<int> variavel = nullptr` - Define um ponteiro que pode ser `int` ou `nullptr`.\n    - `variavel = new int(5)` - Define a vari\u00e1vel com um valor inteiro.\n    - Teste: `if (variavel != nullptr) {`\n  - Op\u00e7\u00f5es de abordagem est\u00e1tica utilizando wrapper(empacotador).\n    - `std::optional<int> variavel = std::nullopt` - Define uma vari\u00e1vel que pode ser `int` ou `std::nullopt`.\n    - `variavel = 5` - Define a vari\u00e1vel com um valor inteiro.\n    - Teste: `if (variavel.has_value()) {`\n- TypeScript\n  - `null` e `undefined` s\u00e3o os valores padr\u00e3o para aus\u00eancia de valor.\n  - `let variavel: number | null = null` - Define uma vari\u00e1vel que pode ser `number` ou `null`.\n  - `variavel = 5` - Define a vari\u00e1vel com um valor inteiro.\n  - Teste: `if (variavel !== null) {`\n\n## Shell\n\n```sh\n#TEST_CASE subindo e buzinando\n$show\npower:1, time:0, person:(empty)\n\n#TEST_CASE subindo\n$enter marcos 4\n$show\npower:1, time:0, person:(marcos:4)\n\n#TEST_CASE ocupada\n$enter marisa 2\nfail: busy motorcycle\n\n$show\npower:1, time:0, person:(marcos:4)\n$end\n```\n\n```s\n#TEST_CASE subindo2\n$init 5\n$show\npower:5, time:0, person:(empty)\n\n#TEST_CASE buzinando\n$enter marcos 4\n$show\npower:5, time:0, person:(marcos:4)\n$end\n```\n\n```s\n#TEST_CASE subindo e trocando\n$init 7\n$enter heitor 6\n$show\npower:7, time:0, person:(heitor:6)\n$leave\nheitor:6\n\n#TEST_CASE empty\n$leave\nfail: empty motorcycle\n\n#TEST_CASE replace\n$enter suzana 8\n$show\npower:7, time:0, person:(suzana:8)\n$end\n```\n\n```s\n#TEST_CASE no time\n$init 7\n$buy 30\n$show\npower:7, time:30, person:(empty)\n$buy 10\n$show\npower:7, time:40, person:(empty)\n$end\n```\n\n```s\n#TEST_CASE buy time \n$init 7\n$drive 10\nfail: buy time first\n$buy 50\n#TEST_CASE empty\n$drive 10\nfail: empty motorcycle\n$enter suzana 8\n\n#TEST_CASE driving\n$drive 30\n$show\npower:7, time:20, person:(suzana:8)\n$end\n```\n\n```s\n#TEST_CASE limite de idade\n$init 7\n$buy 20\n$enter andreina 23\n$drive 15\nfail: too old to drive\n$show\npower:7, time:20, person:(andreina:23)\n$end\n```\n\n```s\n#TEST_CASE acabou o tempo\n$init 7\n$buy 20\n$enter andreina 6\n$drive 15\n$show\npower:7, time:5, person:(andreina:6)\n$drive 10\nfail: time finished after 5 minutes\n$show\npower:7, time:0, person:(andreina:6)\n$end\n```\n\n```s\n#TEST_CASE buzinando\n$init 1\n$honk\nPem\n$init 5\n$honk\nPeeeeem\n$end\n```\n\n## Draft\n\n<!-- links .cache/draft -->\n- cpp\n  - [shell.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/motoca/.cache/draft/cpp/shell.cpp)\n- java\n  - [Shell.java](https://github.com/qxcodepoo/arcade/blob/master/base/motoca/.cache/draft/java/Shell.java)\n- ts\n  - [shell.ts](https://github.com/qxcodepoo/arcade/blob/master/base/motoca/.cache/draft/ts/shell.ts)\n<!-- links -->\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT subindo e buzinando\nshow\nend\n======== EXPECT\n$show\npower:1, time:0, person:(empty)\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT subindo\nshow\nenter marcos 4\nshow\nend\n======== EXPECT\n$show\npower:1, time:0, person:(empty)\n$enter marcos 4\n$show\npower:1, time:0, person:(marcos:4)\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT ocupada\nshow\nenter marcos 4\nshow\nenter marisa 2\nshow\nend\n======== EXPECT\n$show\npower:1, time:0, person:(empty)\n$enter marcos 4\n$show\npower:1, time:0, person:(marcos:4)\n$enter marisa 2\nfail: busy motorcycle\n$show\npower:1, time:0, person:(marcos:4)\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT subindo2\ninit 5\nshow\nend\n======== EXPECT\n$init 5\n$show\npower:5, time:0, person:(empty)\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT buzinando\ninit 5\nshow\nenter marcos 4\nshow\nend\n======== EXPECT\n$init 5\n$show\npower:5, time:0, person:(empty)\n$enter marcos 4\n$show\npower:5, time:0, person:(marcos:4)\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT subindo e trocando\ninit 7\nenter heitor 6\nshow\nleave\nend\n======== EXPECT\n$init 7\n$enter heitor 6\n$show\npower:7, time:0, person:(heitor:6)\n$leave\nheitor:6\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT empty\ninit 7\nenter heitor 6\nshow\nleave\nleave\nend\n======== EXPECT\n$init 7\n$enter heitor 6\n$show\npower:7, time:0, person:(heitor:6)\n$leave\nheitor:6\n$leave\nfail: empty motorcycle\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT replace\ninit 7\nenter heitor 6\nshow\nleave\nleave\nenter suzana 8\nshow\nend\n======== EXPECT\n$init 7\n$enter heitor 6\n$show\npower:7, time:0, person:(heitor:6)\n$leave\nheitor:6\n$leave\nfail: empty motorcycle\n$enter suzana 8\n$show\npower:7, time:0, person:(suzana:8)\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT no time\ninit 7\nbuy 30\nshow\nbuy 10\nshow\nend\n======== EXPECT\n$init 7\n$buy 30\n$show\npower:7, time:30, person:(empty)\n$buy 10\n$show\npower:7, time:40, person:(empty)\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT buy time \ninit 7\ndrive 10\nbuy 50\nend\n======== EXPECT\n$init 7\n$drive 10\nfail: buy time first\n$buy 50\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT empty\ninit 7\ndrive 10\nbuy 50\ndrive 10\nenter suzana 8\nend\n======== EXPECT\n$init 7\n$drive 10\nfail: buy time first\n$buy 50\n$drive 10\nfail: empty motorcycle\n$enter suzana 8\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT driving\ninit 7\ndrive 10\nbuy 50\ndrive 10\nenter suzana 8\ndrive 30\nshow\nend\n======== EXPECT\n$init 7\n$drive 10\nfail: buy time first\n$buy 50\n$drive 10\nfail: empty motorcycle\n$enter suzana 8\n$drive 30\n$show\npower:7, time:20, person:(suzana:8)\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT limite de idade\ninit 7\nbuy 20\nenter andreina 23\ndrive 15\nshow\nend\n======== EXPECT\n$init 7\n$buy 20\n$enter andreina 23\n$drive 15\nfail: too old to drive\n$show\npower:7, time:20, person:(andreina:23)\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT acabou o tempo\ninit 7\nbuy 20\nenter andreina 6\ndrive 15\nshow\ndrive 10\nshow\nend\n======== EXPECT\n$init 7\n$buy 20\n$enter andreina 6\n$drive 15\n$show\npower:7, time:5, person:(andreina:6)\n$drive 10\nfail: time finished after 5 minutes\n$show\npower:7, time:0, person:(andreina:6)\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT buzinando\ninit 1\nhonk\ninit 5\nhonk\nend\n======== EXPECT\n$init 1\n$honk\nPem\n$init 5\n$honk\nPeeeeem\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\nfunction main() {\n    //CRIE SUA MOTO AQUI    \n\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(\" \");\n        const cmd = par[0];\n\n        if (cmd == \"end\") {\n            break;\n        } \n        // else if (cmd == \"init\") {\n        //     // INICIE SUA MOTO USANDO O CONSTRUTOR\n        //     const power = parseInt(par[1]);\n        // }\n        // else if (cmd == \"show\") {\n        //     // MOSTRE O ESTADO DA MOTO\n        // }\n        // else if (cmd == \"enter\") {\n        //     // CRIE UM OBJETO PESSOA E INSIRA NA MOTO\n        //     const name = par[1];\n        //     const age = parseInt(par[2]);\n        // }\n        // else if (cmd == \"leave\") {\n        //     // REMOVA A PESSOA DA MOTO\n        //     // SE O OBJETO RETORNADO N\u00c3O FOR NULO, MOSTRE SEUS DADOS\n        // }\n        // else if (cmd == \"honk\") {\n        //     // TOQUE A BUZINA\n        // }\n        // else if (cmd == \"buy\") {\n        //     // COMPRE TEMPO DE USO DA MOTO\n        //     const time = parseInt(par[1]);\n        // }\n        // else if (cmd == \"drive\") {\n        //     // DIRIJA A MOTO\n        //     const time = parseInt(par[1]);\n        // } \n        else {\n            console.log(\"fail: comando invalido\");\n        }\n    }\n}\n\nmain()\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.*;\n\npublic class Shell{\n    \n    public static void main(String[] args) {\n        // CRIE SUA MOTO AQUI\n\n        while(true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            // else if (cmd.equals(\"init\")) {\n            //     // CRIE SUA MOTO AQUI\n            //     var power = Integer.parseInt(par[1]);\n            // }\n            // else if (cmd.equals(\"show\")) {\n            //     // MOSTRE SUA MOTO AQUI\n            // }\n            // else if (cmd.equals(\"enter\")) {\n            //     // CRIE UM OBJETO PESSOA AQUI\n            //     // DEPOIS INSIRA NA MOTO\n            //     var name = par[1];\n            //     var age = Integer.parseInt(par[2]);\n            // }\n            // else if (cmd.equals(\"leave\")) {\n            //     // RETIRE A PESSOA DA MOTO\n            //     // MOSTRE A PESSOA RETIRADA AQUI\n            // }\n            // else if (cmd.equals(\"buy\")) {\n            //     // COMPRE TEMPO\n            //     var time = Integer.parseInt(par[1]);\n            // }\n            // else if (cmd.equals(\"drive\")) {\n            //     // DIRIJA A MOTO\n            //     var time = Integer.parseInt(par[1]);\n            // }\n            // else if (cmd.equals(\"honk\")) {\n            //     // BUZINE\n            // }\n            else {\n                System.out.println(\"fail: comando invalido\");\n            }\n        }\n    }\n\n    static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <memory> //shared_ptr\n#include <sstream> //stringstream\n#include <utility> //exchange\nusing namespace std;\n\nint main() {\n    // CRIE SUA MOTO AQUI COM POTENCIA 1\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } \n        // else if (cmd == \"init\") {\n        //     // INICIE A MOTO AQUI USANDO O CONSTRUTOR\n        //     int power {};\n        //     ss >> power;\n        // } \n        // else if (cmd == \"show\") {\n        //     // MOSTRE A MOTO AQUI\n        // }\n        // else if (cmd == \"leave\") {\n        //     // RETIRE A PESSOA DA MOTO\n        //     // SE EXISTIR, MOSTRE A PESSOA\n        // }\n        // else if (cmd == \"honk\") {\n        //     // BUZINE A MOTO\n        // }\n        // else if (cmd == \"enter\") {\n        //     // CRIE UM PONTEIRO PARA PESSOA E INICIE-O AQUI\n        //     // DEPOIS INSIRA A PERSON NA MOTO\n        //     string name {};\n        //     int age {};\n        //     ss >> name >> age;\n        // }\n        // else if (cmd == \"buy\") {\n        //     // COMPRE TEMPO PARA DIRIGIR\n        //     int time {};\n        //     ss >> time;\n        // }\n        // else if (cmd == \"drive\") {\n        //     // DIRIJA A MOTO POR UM TEMPO\n        //     int time {};\n        //     ss >> time;\n        // }\n        else {\n            cout << \"fail: invalid command\\n\";\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
