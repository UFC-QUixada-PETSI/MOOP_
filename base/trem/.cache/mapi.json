{
    "title": "@trem: @trem",
    "description": "# @trem\n\n<!-- toch -->\n[Intro](#intro) | [Exemplos](#exemplos) | [Guide](#guide)\n-- | -- | --\n<!-- toch -->\n\n![cover](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/trem/cover.jpg)\n\nO objetivo desta atividade \u00e9 imprementar um sistema que aloca passageiros em vag\u00f5es de um trem. O trem \u00e9 formado por uma s\u00e9rie de vag\u00f5es. \u00c9 poss\u00edvel embarcar, desembarcar passageiros, ver quem est\u00e1 embarcado e a lista de passageiros que j\u00e1 passaram pelo nosso trem.\n\n## Intro\n\n### Parte 1 - Trem e Vag\u00f5es\n\n- Inicie um novo trem com a quantidade limite de vag\u00f5es m\u00e1xima que ele pode carregar.\n  - Se j\u00e1 houver trem, inicie um novo trem.\n\n- Adicionar um novo vag\u00e3o.\n    - Ao adicionar, observe o n\u00famero m\u00e1ximo de vag\u00f5es suportados pela locomotiva.\n    - O vag\u00e3o possui uma capacidade que define quantos lugares ele possui.\n    - O vag\u00e3o \u00e9 adicionado ao final do trem.\n\n- Mostrar o trem.\n    - Cada cadeira vazia deve ser mostrada por um -. Cada vag\u00e3o deve ser delimitado por [ ].\n\n### Parte 2 - Embarque e Desembarque\n\n- Embarcar um novo passageiro.\n    - Ao tentar embarcar, o trem vai procurar a primeira cadeira livre a partir do primeiro vag\u00e3o em ordem crescente.\n    - Se n\u00e3o houver espa\u00e7o livre em nenhum vag\u00e3o ent\u00e3o n\u00e3o haver\u00e1 embarque.\n    - Passageiros possuem apenas um passId e ele deve ser \u00fanico no sistema.\n    - N\u00e3o deve ser poss\u00edvel embarcar duas vezes o mesmo passageiro no trem.\n- Desembarcar um passageiro\n    - Se o passageiro estiver no trem, ele sai do trem liberando sua cadeira.\n\n### Parte 3 - Cadastro de Passeiros e Registro de Embarque\n\n- Mostrar a lista de passageiros cadastrados.\n    - Quando um passageiro tenta embarcar, ele \u00e9 cadastrado no sistema, independente de conseguir ou n\u00e3o embarcar.\n    - Mostre a lista ordenada pelo id do passageiro.\n- Mostrar a sequ\u00eancia de embarque e desembarque.\n\n\n## Exemplos\n\n```python\n#TEST_CASE init \n#init _maxVagoes\n#nwvag _capacidade\n\n$init 2\n$nwvag 2\n$la\nTrem [ - - ]\n$nwvag 3\n$la\nTrem [ - - ][ - - - ]\n$nwvag 1\nfail: limite de vag\u00f5es atingido\n\n#TEST_CASE embarque e desembarque\n#entrar _idPass\n$entrar goku\n$la\nTrem [ goku - ][ - - - ]\n$entrar kate\n$entrar sara\n$entrar goku\nfail: goku j\u00e1 est\u00e1 no trem\n$la\nTrem [ goku kate ][ sara - - ]\n$entrar tina\n$entrar james\n$entrar rufus\nfail: trem lotado\n$show\nTrem [ goku kate ][ sara tina james ]\n\n$sair kate\n$sair sara\n$sair rufus\nfail: rufus nao esta no trem\n$la\nTrem [ goku - ][ - tina james ]\n$entrar alex\n$la\nTrem [ goku alex ][ - tina james ]\n$end\n\n#TEST_CASE cadastro de passageiros e movimentacao\n$entrar sara\n$sair goku\n$la\ntrem [ - alex ][ sara tina james ]\n\n$cadastro\nalex\ngoku\njames\nkate\nrufus\nsara\ntina\n\n$movimentacao\ngoku in\nkate in\nsara in\ntina in\njames in\nkate out\nsara out\nalex in\nsara in\ngoku out\n\n$end\n```\n\n***\n\n## Guide\n\n```java\nclass Passageiro\n- id: string\n\nclass Vagao\n- cadeiras: Passageiro[]\n--\n+ embarcar(pass: Passageiro)\n+ desembarcar(idPass: String)\n+ exists(idPass): boolean\n--\n+ constructor(capacidade)\n\nclass Trem\n- maxVagoes: number\n- vagoes: Vagao[]\n--\n+ addVagao(vagao: Vagao)\n+ embarcar(pass: Passageiro)\n+ desembarcar(idPass: string)\n+ exists(idPass): bool\n--\n+ constructor(maxVagoes: number)\n\nenum Direcao\nIN\nOUT\n\nclass Movimento\n- pass: Passageiro\n- dir: Direcao\n\nclass Registro\n- r_Pass: Passageiro[]\n- movimentacao: Movimento[]\n--\n+ cadastrar(pass: Passageiro)\n+ movimentar(string: passId, mov: Movimento)\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT init \ninit 2\nnwvag 2\nla\nnwvag 3\nla\nnwvag 1\nend\n======== EXPECT\n$init 2\n$nwvag 2\n$la\nTrem [ - - ]\n$nwvag 3\n$la\nTrem [ - - ][ - - - ]\n$nwvag 1\nfail: limite de vag\u00f5es atingido\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT embarque e desembarque\ninit 2\nnwvag 2\nla\nnwvag 3\nla\nnwvag 1\nentrar goku\nla\nentrar kate\nentrar sara\nentrar goku\nla\nentrar tina\nentrar james\nentrar rufus\nshow\nsair kate\nsair sara\nsair rufus\nla\nentrar alex\nla\nend\n======== EXPECT\n$init 2\n$nwvag 2\n$la\nTrem [ - - ]\n$nwvag 3\n$la\nTrem [ - - ][ - - - ]\n$nwvag 1\nfail: limite de vag\u00f5es atingido\n$entrar goku\n$la\nTrem [ goku - ][ - - - ]\n$entrar kate\n$entrar sara\n$entrar goku\nfail: goku j\u00e1 est\u00e1 no trem\n$la\nTrem [ goku kate ][ sara - - ]\n$entrar tina\n$entrar james\n$entrar rufus\nfail: trem lotado\n$show\nTrem [ goku kate ][ sara tina james ]\n$sair kate\n$sair sara\n$sair rufus\nfail: rufus nao esta no trem\n$la\nTrem [ goku - ][ - tina james ]\n$entrar alex\n$la\nTrem [ goku alex ][ - tina james ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT cadastro de passageiros e movimentacao\nentrar sara\nsair goku\nla\ncadastro\nmovimentacao\nend\n======== EXPECT\n$entrar sara\n$sair goku\n$la\ntrem [ - alex ][ sara tina james ]\n$cadastro\nalex\ngoku\njames\nkate\nrufus\nsara\ntina\n$movimentacao\ngoku in\nkate in\nsara in\ntina in\njames in\nkate out\nsara out\nalex in\nsara in\ngoku out\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
