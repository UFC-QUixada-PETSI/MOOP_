{
    "title": "@manipulacao: Estressados Opera\u00e7\u00f5es III",
    "description": "# Estressados Opera\u00e7\u00f5es III\n\n<!-- toch -->\n[Intro](#intro) | [Draft](#draft) | [Shell](#shell)\n-- | -- | --\n<!-- toch -->\n\n![cover](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/manipulacao/cover.jpg)\n\n***\n\n## Intro\n\n### filter\n\n- **get_men**: retorne uma lista com os homens.\n- **get_calm_women**: retorne uma lista com as mulheres stress menor que 10.\n\n### sort\n\n- **sort**: ordene a lista pelo valor real\n- **sort_stress**: ordene a lista por n\u00edvel de stress\n\n### reverse\n\n- **reverse**: fa\u00e7a uma fun\u00e7\u00e3o que n\u00e3o altere a lista original, mas retorne uma nova lista invertida\n\n### set e map\n\n- **unicos**: retorne uma nova lista sem repeti\u00e7\u00e3o de valores\n- **repetidos**: retorne uma nova lista apenas com os valores repetidos\n\n***\n\n## Draft\n\n<!-- links .cache/draft -->\n- cpp\n  - [shell.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/manipulacao/.cache/draft/cpp/shell.cpp)\n- go\n  - [shell.go](https://github.com/qxcodepoo/arcade/blob/master/base/manipulacao/.cache/draft/go/shell.go)\n- java\n  - [Shell.java](https://github.com/qxcodepoo/arcade/blob/master/base/manipulacao/.cache/draft/java/Shell.java)\n- ts\n  - [shell.ts](https://github.com/qxcodepoo/arcade/blob/master/base/manipulacao/.cache/draft/ts/shell.ts)\n<!-- links -->\n\n## Shell\n\n```sh\n#TEST_CASE get_men\n$get_men [1,2,-3,4]\n[1, 2, 4]\n$get_men [1,-2,3,5]\n[1, 3, 5]\n$get_men [-1,-2,-5,-9]\n[]\n$end\n```\n\n```sh\n#TEST_CASE get_calm_women\n$get_calm_women [-10,-5,6,-90]\n[-5]\n$get_calm_women [-1,5,-11,-99,-8]\n[-1, -8]\n$end\n```\n\n```sh\n#TEST_CASE sort\n$sort [5,3,-1,-50,-1,-99]\n[-99, -50, -1, -1, 3, 5]\n$sort [-1,-50,12,8,-1,-99,-444]\n[-444, -99, -50, -1, -1, 8, 12]\n$end\n```\n\n```sh\n#TEST_CASE sort_stress\n$sort_stress [5,3,-1,-50,-1,-99]\n[-1, -1, 3, 5, -50, -99]\n$sort_stress [-1,-50,12,8,-1,-99,-444]\n[-1, -1, 8, 12, -50, -99, -444]\n$end\n```\n\n```sh\n#TEST_CASE reverse\n$reverse []\n[]\n[]\n$reverse [1]\n[1]\n[1]\n$reverse [1,2]\n[1, 2]\n[2, 1]\n$reverse [5,3,-1,-50,-1,-99]\n[5, 3, -1, -50, -1, -99]\n[-99, -1, -50, -1, 3, 5]\n$end\n```\n\n```sh\n#TEST_CASE unique\n$unique [1,1,1]\n[1]\n$unique [5,3,1,1,3,2]\n[5, 3, 1, 2]\n$unique [5,4,3,2,1]\n[5, 4, 3, 2, 1]\n$end\n```\n\n```sh\n#TEST_CASE repeated\n$repeated [1,1,1]\n[1, 1]\n$repeated [5,3,1,1,3,2]\n[1, 3]\n$repeated [5,4,3,2,1]\n[]\n$end\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT get_men\nget_men [1,2,-3,4]\nget_men [1,-2,3,5]\nget_men [-1,-2,-5,-9]\nend\n======== EXPECT\n$get_men [1,2,-3,4]\n[1, 2, 4]\n$get_men [1,-2,3,5]\n[1, 3, 5]\n$get_men [-1,-2,-5,-9]\n[]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT get_calm_women\nget_calm_women [-10,-5,6,-90]\nget_calm_women [-1,5,-11,-99,-8]\nend\n======== EXPECT\n$get_calm_women [-10,-5,6,-90]\n[-5]\n$get_calm_women [-1,5,-11,-99,-8]\n[-1, -8]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT sort\nsort [5,3,-1,-50,-1,-99]\nsort [-1,-50,12,8,-1,-99,-444]\nend\n======== EXPECT\n$sort [5,3,-1,-50,-1,-99]\n[-99, -50, -1, -1, 3, 5]\n$sort [-1,-50,12,8,-1,-99,-444]\n[-444, -99, -50, -1, -1, 8, 12]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT sort_stress\nsort_stress [5,3,-1,-50,-1,-99]\nsort_stress [-1,-50,12,8,-1,-99,-444]\nend\n======== EXPECT\n$sort_stress [5,3,-1,-50,-1,-99]\n[-1, -1, 3, 5, -50, -99]\n$sort_stress [-1,-50,12,8,-1,-99,-444]\n[-1, -1, 8, 12, -50, -99, -444]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT reverse\nreverse []\nreverse [1]\nreverse [1,2]\nreverse [5,3,-1,-50,-1,-99]\nend\n======== EXPECT\n$reverse []\n[]\n[]\n$reverse [1]\n[1]\n[1]\n$reverse [1,2]\n[1, 2]\n[2, 1]\n$reverse [5,3,-1,-50,-1,-99]\n[5, 3, -1, -50, -1, -99]\n[-99, -1, -50, -1, 3, 5]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT unique\nunique [1,1,1]\nunique [5,3,1,1,3,2]\nunique [5,4,3,2,1]\nend\n======== EXPECT\n$unique [1,1,1]\n[1]\n$unique [5,3,1,1,3,2]\n[5, 3, 1, 2]\n$unique [5,4,3,2,1]\n[5, 4, 3, 2, 1]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT repeated\nrepeated [1,1,1]\nrepeated [5,3,1,1,3,2]\nrepeated [5,4,3,2,1]\nend\n======== EXPECT\n$repeated [1,1,1]\n[1, 1]\n$repeated [5,3,1,1,3,2]\n[1, 3]\n$repeated [5,4,3,2,1]\n[]\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\nfunction get_men(vet: number[]): number[] {\n    return [];\n}\n\nfunction get_calm_women(vet: number[]): number[] {\n    return [];\n}\n\nfunction sort(vet: number[]): number[] {\n    return [];\n}\n\nfunction sort_stress(vet: number[]): number[] {\n    return [];\n}\n\nfunction reverse(vet: number[]): number[] {\n    return [];\n}\n\nfunction unique(vet: number[]): number[] {\n    return [];\n}\n\nfunction repeated(vet: number[]): number[] {\n    return [];\n}\n\n\nfunction main() {\n    let vet = new Array<string>();\n\n    while (true) {\n        let line = input();\n        console.log(\"$\" + line);\n        let args = line.split(\" \");\n\n        if      (args[0] === \"end\")             { break;                                             }\n        else if (args[0] === \"get_men\")         { console.log(fmt(get_men(       to_vet(args[1])))); }\n        else if (args[0] === \"get_calm_women\")  { console.log(fmt(get_calm_women(to_vet(args[1])))); }\n        else if (args[0] === \"sort\")            { console.log(fmt(sort(          to_vet(args[1])))); }\n        else if (args[0] === \"sort_stress\")     { console.log(fmt(sort_stress(   to_vet(args[1])))); }\n        else if (args[0] === \"reverse\")         {\n            let vet = to_vet(args[1]);\n            let reversed = reverse(vet);\n            console.log(fmt(vet));\n            console.log(fmt(reversed));\n        }\n        else if (args[0] === \"unique\")          { console.log(fmt(unique(        to_vet(args[1])))); }\n        else if (args[0] === \"repeated\")        { console.log(fmt(repeated(      to_vet(args[1])))); }\n        else                                    { console.log(\"fail: comando invalido\");             }\n    }\n}\n\n// Fun\u00e7\u00e3o auxiliar para converter de string para vetor\n// \"[1,2,3,4]\" para [1, 2, 3, 4]\nfunction to_vet(token: string): number[] {\n    let size = token.length;\n    let inside = token.substring(1, size - 1);\n    return inside === \"\" ? [] : inside.split(\",\").map(x => +x)\n}\n\n//Converte de vetor para string sem inserir os espa\u00e7os\n//[1, 2, 3, 4] => \"[1,2,3,4]\"\nfunction fmt(vet: number[]): string {\n    if (vet == null) {\n        return \"[]\";\n    }\n    return \"[\" + vet.join(\", \") + \"]\";\n}\n\nmain()\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.Arrays;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Shell {\n    static List<Integer> get_men(List<Integer> vet) {\n        return new ArrayList<>();\n    }\n\n    static List<Integer> get_calm_women(List<Integer> vet) {\n        return new ArrayList<>();\n    }\n\n    static List<Integer> sort(List<Integer> vet) {\n        return new ArrayList<>();\n    }\n\n    static List<Integer> sort_stress(List<Integer> vet) {\n        return new ArrayList<>();\n    }\n\n    static List<Integer> reverse(List<Integer> vet) {\n        return new ArrayList<>();\n    }\n\n    static boolean exists(List<Integer> vet, int value) {\n        return false;\n    }\n\n    static List<Integer> unique(List<Integer> vet) {\n        return new ArrayList<>();\n    }\n\n    static List<Integer> repeated(List<Integer> vet) {\n        return new ArrayList<>();\n    }\n\n    public static void main(String[] _args) {\n        while (true) {\n            var line = scanner.nextLine();\n            var args = line.split(\" \");\n            var cmd = args[0];\n            System.out.println(\"$\" + line);\n\n            if (cmd.equals(\"end\")) {\n                break;\n            } else if (cmd.equals(\"get_men\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + get_men(array));\n            } else if (cmd.equals(\"get_calm_women\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + get_calm_women(array));\n            } else if (cmd.equals(\"sort\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + sort(array));\n            } else if (cmd.equals(\"sort_stress\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + sort_stress(array));\n            } else if (cmd.equals(\"reverse\")) {\n                var array = strToVet(args[1]);\n                var other = reverse(array);\n                System.out.println(\"\" + array);\n                System.out.println(\"\" + other);\n            } else if (cmd.equals(\"exists\")) {\n                var array = strToVet(args[1]);\n                var value = Integer.parseInt(args[2]);\n                System.out.println(\"\" + exists(array, value));\n            } else if (cmd.equals(\"unique\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + unique(array));\n            } else if (cmd.equals(\"repeated\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + repeated(array));\n            } else {\n                System.out.println(\"Invalid command\");\n            }\n        }\n    }\n\n    public static List<Integer> strToVet(String s) {\n        if (s.equals(\"[]\"))\n            return new ArrayList<>();\n        List<String> parts = Arrays.asList(s.substring(1, s.length() - 1).split(\",\"));\n        List<Integer> result = new ArrayList<>();\n        for (String part : parts)\n            result.add(Integer.parseInt(part.trim()));\n        return result;\n    }\n\n    static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <sstream>\n\nstd::vector<int> get_men(std::vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nstd::vector<int> get_calm_women(std::vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nstd::vector<int> sort(std::vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nstd::vector<int> sort_stress(std::vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nstd::vector<int> reverse(std::vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nstd::vector<int> unique(std::vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nstd::vector<int> repeated(std::vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nstd::string input() {\n    std::string line;\n    std::getline(std::cin, line);\n    return line;\n}\n\ntemplate <typename T>\nvoid print(T t) {\n    std::cout << t << std::endl;\n}\n\nvoid print(std::vector<int> vet) {\n    std::cout << '[';\n    for (int i = 0; i < (int) vet.size(); i++) {\n        std::cout << (i == 0 ? \"\" : \", \");\n        std::cout << vet[i];\n    }\n    std::cout << ']' << std::endl;\n}\n\nstd::vector<std::string> split(const std::string &s, char delim) {\n    std::vector<std::string> elems;\n    std::string elem;\n    for (auto c : s) {\n        if (c == delim) {\n            elems.push_back(elem);\n            elem.clear();\n        } else {\n            elem += c;\n        }\n    }\n    elems.push_back(elem);\n    return elems;\n}\n\nstd::vector<int> str2vet(std::string s) {\n    s = s.substr(1, s.size() - 2);\n    std::vector<int> vet;\n    std::stringstream ss(s);\n    std::string elem;\n    while (std::getline(ss, elem, ',')) {\n        vet.push_back(std::stoi(elem));\n    }\n    return vet;\n}\n\nint main() {\n    \n    while(true) {\n        std::string line = input();\n        auto args = split(line, ' ');\n        print('$' + line);\n\n        if     (args[0] == \"get_men\"        ) { print(get_men(str2vet(args[1])));        }\n        else if(args[0] == \"get_calm_women\" ) { print(get_calm_women(str2vet(args[1]))); }\n        else if(args[0] == \"sort\"           ) { print(sort(str2vet(args[1])));           }\n        else if(args[0] == \"sort_stress\"    ) { print(sort_stress(str2vet(args[1])));    }\n        else if(args[0] == \"reverse\"        ) {\n            auto array = str2vet(args[1]);\n            auto other = reverse(array);\n            print(array);\n            print(other);\n        }\n        else if(args[0] == \"unique\"         ) { print(unique(str2vet(args[1])));         }\n        else if(args[0] == \"repeated\"       ) { print(repeated(str2vet(args[1])));       }\n        else if(args[0] == \"end\"            ) { break;                                   }\n    }\n}\n",
                "type": "show"
            }
        ],
        "go": [
            {
                "name": "shell.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc getMen(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc getCalmWomen(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc sortVet(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc sortStress(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc reverse(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc unique(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc repeated(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\tfor {\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tfmt.Print(\"$\")\n\t\tline := scanner.Text()\n\t\targs := strings.Split(line, \" \")\n\t\tfmt.Println(line)\n\n\t\tswitch args[0] {\n\t\tcase \"get_men\":\n\t\t\tprintVec(getMen(str2vet(args[1])))\n\t\tcase \"get_calm_women\":\n\t\t\tprintVec(getCalmWomen(str2vet(args[1])))\n\t\tcase \"sort\":\n\t\t\tprintVec(sortVet(str2vet(args[1])))\n\t\tcase \"sort_stress\":\n\t\t\tprintVec(sortStress(str2vet(args[1])))\n\t\tcase \"reverse\":\n\t\t\tarray := str2vet(args[1])\n\t\t\tother := reverse(array)\n\t\t\tprintVec(array)\n\t\t\tprintVec(other)\n\t\tcase \"unique\":\n\t\t\tprintVec(unique(str2vet(args[1])))\n\t\tcase \"repeated\":\n\t\t\tprintVec(repeated(str2vet(args[1])))\n\t\tcase \"end\":\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc printVec(vet []int) {\n\tfmt.Print(\"[\")\n\tfor i, val := range vet {\n\t\tif i > 0 {\n\t\t\tfmt.Print(\", \")\n\t\t}\n\t\tfmt.Print(val)\n\t}\n\tfmt.Println(\"]\")\n}\n\nfunc str2vet(s string) []int {\n\tif s == \"[]\" {\n\t\treturn nil\n\t}\n\ts = s[1 : len(s)-1]\n\tparts := strings.Split(s, \",\")\n\tvar vet []int\n\tfor _, part := range parts {\n\t\tn, _ := strconv.Atoi(part)\n\t\tvet = append(vet, n)\n\t}\n\treturn vet\n}\n\n",
                "type": "show"
            }
        ]
    }
}
