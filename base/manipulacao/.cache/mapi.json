{
    "title": "@manipulacao: Estressados Opera\u00e7\u00f5es III",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@manipulacao: Estressados Opera\u00e7\u00f5es III</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Estressados Opera\u00e7\u00f5es III</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"cover\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/manipulacao/cover.jpg\" /></p>\n<hr />\n<h2>Intro</h2>\n<h3>filter</h3>\n<ul>\n<li><strong>get_men</strong>: retorne uma lista com os homens.</li>\n<li><strong>get_calm_women</strong>: retorne uma lista com as mulheres stress menor que 10.</li>\n</ul>\n<h3>sort</h3>\n<ul>\n<li><strong>sort</strong>: ordene a lista pelo valor real</li>\n<li><strong>sort_stress</strong>: ordene a lista por n\u00edvel de stress</li>\n</ul>\n<h3>reverse</h3>\n<ul>\n<li><strong>reverse</strong>: fa\u00e7a uma fun\u00e7\u00e3o que n\u00e3o altere a lista original, mas retorne uma nova lista invertida</li>\n</ul>\n<h3>set e map</h3>\n<ul>\n<li><strong>unicos</strong>: retorne uma nova lista sem repeti\u00e7\u00e3o de valores</li>\n<li><strong>repetidos</strong>: retorne uma nova lista apenas com os valores repetidos</li>\n</ul>\n<hr />\n<h2>Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/manipulacao/.cache/draft/cpp/shell.cpp\">shell.cpp</a></li>\n</ul>\n</li>\n<li>go<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/manipulacao/.cache/draft/go/shell.go\">shell.go</a></li>\n</ul>\n</li>\n<li>java<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/manipulacao/.cache/draft/java/Shell.java\">Shell.java</a></li>\n</ul>\n</li>\n<li>ts<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/manipulacao/.cache/draft/ts/shell.ts\">shell.ts</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n\n<h2>Shell</h2>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE get_men</span>\n<span class=\"nv\">$get_men</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,-3,4<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">4</span><span class=\"o\">]</span>\n<span class=\"nv\">$get_men</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,-2,3,5<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$get_men</span><span class=\"w\"> </span><span class=\"o\">[</span>-1,-2,-5,-9<span class=\"o\">]</span>\n<span class=\"o\">[]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE get_calm_women</span>\n<span class=\"nv\">$get_calm_women</span><span class=\"w\"> </span><span class=\"o\">[</span>-10,-5,6,-90<span class=\"o\">]</span>\n<span class=\"o\">[</span>-5<span class=\"o\">]</span>\n<span class=\"nv\">$get_calm_women</span><span class=\"w\"> </span><span class=\"o\">[</span>-1,5,-11,-99,-8<span class=\"o\">]</span>\n<span class=\"o\">[</span>-1,<span class=\"w\"> </span>-8<span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE sort</span>\n<span class=\"nv\">$sort</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,3,-1,-50,-1,-99<span class=\"o\">]</span>\n<span class=\"o\">[</span>-99,<span class=\"w\"> </span>-50,<span class=\"w\"> </span>-1,<span class=\"w\"> </span>-1,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$sort</span><span class=\"w\"> </span><span class=\"o\">[</span>-1,-50,12,8,-1,-99,-444<span class=\"o\">]</span>\n<span class=\"o\">[</span>-444,<span class=\"w\"> </span>-99,<span class=\"w\"> </span>-50,<span class=\"w\"> </span>-1,<span class=\"w\"> </span>-1,<span class=\"w\"> </span><span class=\"m\">8</span>,<span class=\"w\"> </span><span class=\"m\">12</span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE sort_stress</span>\n<span class=\"nv\">$sort_stress</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,3,-1,-50,-1,-99<span class=\"o\">]</span>\n<span class=\"o\">[</span>-1,<span class=\"w\"> </span>-1,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">5</span>,<span class=\"w\"> </span>-50,<span class=\"w\"> </span>-99<span class=\"o\">]</span>\n<span class=\"nv\">$sort_stress</span><span class=\"w\"> </span><span class=\"o\">[</span>-1,-50,12,8,-1,-99,-444<span class=\"o\">]</span>\n<span class=\"o\">[</span>-1,<span class=\"w\"> </span>-1,<span class=\"w\"> </span><span class=\"m\">8</span>,<span class=\"w\"> </span><span class=\"m\">12</span>,<span class=\"w\"> </span>-50,<span class=\"w\"> </span>-99,<span class=\"w\"> </span>-444<span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE reverse</span>\n<span class=\"nv\">$reverse</span><span class=\"w\"> </span><span class=\"o\">[]</span>\n<span class=\"o\">[]</span>\n<span class=\"o\">[]</span>\n<span class=\"nv\">$reverse</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"nv\">$reverse</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"nv\">$reverse</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,3,-1,-50,-1,-99<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span>-1,<span class=\"w\"> </span>-50,<span class=\"w\"> </span>-1,<span class=\"w\"> </span>-99<span class=\"o\">]</span>\n<span class=\"o\">[</span>-99,<span class=\"w\"> </span>-1,<span class=\"w\"> </span>-50,<span class=\"w\"> </span>-1,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE unique</span>\n<span class=\"nv\">$unique</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,1,1<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"nv\">$unique</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,3,1,1,3,2<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span><span class=\"o\">]</span>\n<span class=\"nv\">$unique</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,4,3,2,1<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE repeated</span>\n<span class=\"nv\">$repeated</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,1,1<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"nv\">$repeated</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,3,1,1,3,2<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">3</span><span class=\"o\">]</span>\n<span class=\"nv\">$repeated</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,4,3,2,1<span class=\"o\">]</span>\n<span class=\"o\">[]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT get_men\nget_men [1,2,-3,4]\nget_men [1,-2,3,5]\nget_men [-1,-2,-5,-9]\nend\n======== EXPECT\n$get_men [1,2,-3,4]\n[1, 2, 4]\n$get_men [1,-2,3,5]\n[1, 3, 5]\n$get_men [-1,-2,-5,-9]\n[]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT get_calm_women\nget_calm_women [-10,-5,6,-90]\nget_calm_women [-1,5,-11,-99,-8]\nend\n======== EXPECT\n$get_calm_women [-10,-5,6,-90]\n[-5]\n$get_calm_women [-1,5,-11,-99,-8]\n[-1, -8]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT sort\nsort [5,3,-1,-50,-1,-99]\nsort [-1,-50,12,8,-1,-99,-444]\nend\n======== EXPECT\n$sort [5,3,-1,-50,-1,-99]\n[-99, -50, -1, -1, 3, 5]\n$sort [-1,-50,12,8,-1,-99,-444]\n[-444, -99, -50, -1, -1, 8, 12]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT sort_stress\nsort_stress [5,3,-1,-50,-1,-99]\nsort_stress [-1,-50,12,8,-1,-99,-444]\nend\n======== EXPECT\n$sort_stress [5,3,-1,-50,-1,-99]\n[-1, -1, 3, 5, -50, -99]\n$sort_stress [-1,-50,12,8,-1,-99,-444]\n[-1, -1, 8, 12, -50, -99, -444]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT reverse\nreverse []\nreverse [1]\nreverse [1,2]\nreverse [5,3,-1,-50,-1,-99]\nend\n======== EXPECT\n$reverse []\n[]\n[]\n$reverse [1]\n[1]\n[1]\n$reverse [1,2]\n[1, 2]\n[2, 1]\n$reverse [5,3,-1,-50,-1,-99]\n[5, 3, -1, -50, -1, -99]\n[-99, -1, -50, -1, 3, 5]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT unique\nunique [1,1,1]\nunique [5,3,1,1,3,2]\nunique [5,4,3,2,1]\nend\n======== EXPECT\n$unique [1,1,1]\n[1]\n$unique [5,3,1,1,3,2]\n[5, 3, 1, 2]\n$unique [5,4,3,2,1]\n[5, 4, 3, 2, 1]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT repeated\nrepeated [1,1,1]\nrepeated [5,3,1,1,3,2]\nrepeated [5,4,3,2,1]\nend\n======== EXPECT\n$repeated [1,1,1]\n[1, 1]\n$repeated [5,3,1,1,3,2]\n[1, 3]\n$repeated [5,4,3,2,1]\n[]\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\nfunction get_men(vet: number[]): number[] {\n    return [];\n}\n\nfunction get_calm_women(vet: number[]): number[] {\n    return [];\n}\n\nfunction sort(vet: number[]): number[] {\n    return [];\n}\n\nfunction sort_stress(vet: number[]): number[] {\n    return [];\n}\n\nfunction reverse(vet: number[]): number[] {\n    return [];\n}\n\nfunction unique(vet: number[]): number[] {\n    return [];\n}\n\nfunction repeated(vet: number[]): number[] {\n    return [];\n}\n\n\nfunction main() {\n    let vet = new Array<string>();\n\n    while (true) {\n        let line = input();\n        console.log(\"$\" + line);\n        let args = line.split(\" \");\n\n        if      (args[0] === \"end\")             { break;                                             }\n        else if (args[0] === \"get_men\")         { console.log(fmt(get_men(       to_vet(args[1])))); }\n        else if (args[0] === \"get_calm_women\")  { console.log(fmt(get_calm_women(to_vet(args[1])))); }\n        else if (args[0] === \"sort\")            { console.log(fmt(sort(          to_vet(args[1])))); }\n        else if (args[0] === \"sort_stress\")     { console.log(fmt(sort_stress(   to_vet(args[1])))); }\n        else if (args[0] === \"reverse\")         {\n            let vet = to_vet(args[1]);\n            let reversed = reverse(vet);\n            console.log(fmt(vet));\n            console.log(fmt(reversed));\n        }\n        else if (args[0] === \"unique\")          { console.log(fmt(unique(        to_vet(args[1])))); }\n        else if (args[0] === \"repeated\")        { console.log(fmt(repeated(      to_vet(args[1])))); }\n        else                                    { console.log(\"fail: comando invalido\");             }\n    }\n}\n\n// Fun\u00e7\u00e3o auxiliar para converter de string para vetor\n// \"[1,2,3,4]\" para [1, 2, 3, 4]\nfunction to_vet(token: string): number[] {\n    let size = token.length;\n    let inside = token.substring(1, size - 1);\n    return inside === \"\" ? [] : inside.split(\",\").map(x => +x)\n}\n\n//Converte de vetor para string sem inserir os espa\u00e7os\n//[1, 2, 3, 4] => \"[1,2,3,4]\"\nfunction fmt(vet: number[]): string {\n    if (vet == null) {\n        return \"[]\";\n    }\n    return \"[\" + vet.join(\", \") + \"]\";\n}\n\nmain()\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.Arrays;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Shell {\n    static List<Integer> get_men(List<Integer> vet) {\n        return new ArrayList<>();\n    }\n\n    static List<Integer> get_calm_women(List<Integer> vet) {\n        return new ArrayList<>();\n    }\n\n    static List<Integer> sort(List<Integer> vet) {\n        return new ArrayList<>();\n    }\n\n    static List<Integer> sort_stress(List<Integer> vet) {\n        return new ArrayList<>();\n    }\n\n    static List<Integer> reverse(List<Integer> vet) {\n        return new ArrayList<>();\n    }\n\n    static boolean exists(List<Integer> vet, int value) {\n        return false;\n    }\n\n    static List<Integer> unique(List<Integer> vet) {\n        return new ArrayList<>();\n    }\n\n    static List<Integer> repeated(List<Integer> vet) {\n        return new ArrayList<>();\n    }\n\n    public static void main(String[] _args) {\n        while (true) {\n            var line = scanner.nextLine();\n            var args = line.split(\" \");\n            var cmd = args[0];\n            System.out.println(\"$\" + line);\n\n            if (cmd.equals(\"end\")) {\n                break;\n            } else if (cmd.equals(\"get_men\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + get_men(array));\n            } else if (cmd.equals(\"get_calm_women\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + get_calm_women(array));\n            } else if (cmd.equals(\"sort\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + sort(array));\n            } else if (cmd.equals(\"sort_stress\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + sort_stress(array));\n            } else if (cmd.equals(\"reverse\")) {\n                var array = strToVet(args[1]);\n                var other = reverse(array);\n                System.out.println(\"\" + array);\n                System.out.println(\"\" + other);\n            } else if (cmd.equals(\"exists\")) {\n                var array = strToVet(args[1]);\n                var value = Integer.parseInt(args[2]);\n                System.out.println(\"\" + exists(array, value));\n            } else if (cmd.equals(\"unique\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + unique(array));\n            } else if (cmd.equals(\"repeated\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + repeated(array));\n            } else {\n                System.out.println(\"Invalid command\");\n            }\n        }\n    }\n\n    public static List<Integer> strToVet(String s) {\n        if (s.equals(\"[]\"))\n            return new ArrayList<>();\n        List<String> parts = Arrays.asList(s.substring(1, s.length() - 1).split(\",\"));\n        List<Integer> result = new ArrayList<>();\n        for (String part : parts)\n            result.add(Integer.parseInt(part.trim()));\n        return result;\n    }\n\n    static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <sstream>\n\nstd::vector<int> get_men(std::vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nstd::vector<int> get_calm_women(std::vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nstd::vector<int> sort(std::vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nstd::vector<int> sort_stress(std::vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nstd::vector<int> reverse(std::vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nstd::vector<int> unique(std::vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nstd::vector<int> repeated(std::vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nstd::string input() {\n    std::string line;\n    std::getline(std::cin, line);\n    return line;\n}\n\ntemplate <typename T>\nvoid print(T t) {\n    std::cout << t << std::endl;\n}\n\nvoid print(std::vector<int> vet) {\n    std::cout << '[';\n    for (int i = 0; i < (int) vet.size(); i++) {\n        std::cout << (i == 0 ? \"\" : \", \");\n        std::cout << vet[i];\n    }\n    std::cout << ']' << std::endl;\n}\n\nstd::vector<std::string> split(const std::string &s, char delim) {\n    std::vector<std::string> elems;\n    std::string elem;\n    for (auto c : s) {\n        if (c == delim) {\n            elems.push_back(elem);\n            elem.clear();\n        } else {\n            elem += c;\n        }\n    }\n    elems.push_back(elem);\n    return elems;\n}\n\nstd::vector<int> str2vet(std::string s) {\n    s = s.substr(1, s.size() - 2);\n    std::vector<int> vet;\n    std::stringstream ss(s);\n    std::string elem;\n    while (std::getline(ss, elem, ',')) {\n        vet.push_back(std::stoi(elem));\n    }\n    return vet;\n}\n\nint main() {\n    \n    while(true) {\n        std::string line = input();\n        auto args = split(line, ' ');\n        print('$' + line);\n\n        if     (args[0] == \"get_men\"        ) { print(get_men(str2vet(args[1])));        }\n        else if(args[0] == \"get_calm_women\" ) { print(get_calm_women(str2vet(args[1]))); }\n        else if(args[0] == \"sort\"           ) { print(sort(str2vet(args[1])));           }\n        else if(args[0] == \"sort_stress\"    ) { print(sort_stress(str2vet(args[1])));    }\n        else if(args[0] == \"reverse\"        ) {\n            auto array = str2vet(args[1]);\n            auto other = reverse(array);\n            print(array);\n            print(other);\n        }\n        else if(args[0] == \"unique\"         ) { print(unique(str2vet(args[1])));         }\n        else if(args[0] == \"repeated\"       ) { print(repeated(str2vet(args[1])));       }\n        else if(args[0] == \"end\"            ) { break;                                   }\n    }\n}\n",
                "type": "show"
            }
        ],
        "go": [
            {
                "name": "shell.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc getMen(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc getCalmWomen(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc sortVet(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc sortStress(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc reverse(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc unique(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc repeated(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\tfor {\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tfmt.Print(\"$\")\n\t\tline := scanner.Text()\n\t\targs := strings.Split(line, \" \")\n\t\tfmt.Println(line)\n\n\t\tswitch args[0] {\n\t\tcase \"get_men\":\n\t\t\tprintVec(getMen(str2vet(args[1])))\n\t\tcase \"get_calm_women\":\n\t\t\tprintVec(getCalmWomen(str2vet(args[1])))\n\t\tcase \"sort\":\n\t\t\tprintVec(sortVet(str2vet(args[1])))\n\t\tcase \"sort_stress\":\n\t\t\tprintVec(sortStress(str2vet(args[1])))\n\t\tcase \"reverse\":\n\t\t\tarray := str2vet(args[1])\n\t\t\tother := reverse(array)\n\t\t\tprintVec(array)\n\t\t\tprintVec(other)\n\t\tcase \"unique\":\n\t\t\tprintVec(unique(str2vet(args[1])))\n\t\tcase \"repeated\":\n\t\t\tprintVec(repeated(str2vet(args[1])))\n\t\tcase \"end\":\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc printVec(vet []int) {\n\tfmt.Print(\"[\")\n\tfor i, val := range vet {\n\t\tif i > 0 {\n\t\t\tfmt.Print(\", \")\n\t\t}\n\t\tfmt.Print(val)\n\t}\n\tfmt.Println(\"]\")\n}\n\nfunc str2vet(s string) []int {\n\tif s == \"[]\" {\n\t\treturn nil\n\t}\n\ts = s[1 : len(s)-1]\n\tparts := strings.Split(s, \",\")\n\tvar vet []int\n\tfor _, part := range parts {\n\t\tn, _ := strconv.Atoi(part)\n\t\tvet = append(vet, n)\n\t}\n\treturn vet\n}\n\n",
                "type": "show"
            }
        ]
    }
}
