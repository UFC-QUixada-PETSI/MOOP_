{
    "title": "@salario: @salario",
    "description": "# @salario\n\n<!-- toch -->\n[Intro](#intro) | [Shell](#shell) | [Guide](#guide) | [Draft](#draft)\n-- | -- | -- | --\n<!-- toch -->\n\n![cover](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/salario/cover.jpg)\n\nA UFC est\u00e1 precisando de um novo sistema de gera\u00e7\u00e3o de folhas de pagamento, voc\u00ea aceita o desafio?'\n\nVoc\u00ea deve desenvolver um sistema para calcular o sal\u00e1rio de um funcion\u00e1rio de acordo com sua fun\u00e7\u00e3o e adicionais\n\n## Intro\n\n- Cadastrar funcionario pelo nome.\n  - nome do funcionario \u00e9 \u00fanico\n  - funcion\u00e1rio pode ser professor, servidor tec. administrativo ou terceirizado\n- Mostrar funcion\u00e1rio\n- Remover funcion\u00e1rio\n\n### Regras de neg\u00f3cio parte 1\n\n- O sal\u00e1rio de professor deve ser calculado com base na sua classe\n  - A 3000\n  - B 5000\n  - C 7000\n  - D 9000\n  - E 11000\n- O Sta(Servidor T\u00e9cnico Administrativo) tem um salario base de 3000 e \u00e9 acrescentado mais 300 de acordo com seu n\u00edvel\n  - salario = 3000 + 300 * nivel\n- O sal\u00e1rio do Ter(Terceirizado) \u00e9 obtido do produto das horas trabalhadas e 4\n    e \u00e9 acrescentado 500 se for insalubre\n  - salario = 4 * horas (+ 500 se insalubre)\n\n### Regras de neg\u00f3cio parte 2\n\n- Adicionar di\u00e1rias\n- Prof podem receber no m\u00e1ximo 2 di\u00e1rias, Sta no m\u00e1ximo 1 e Ter n\u00e3o podem receber.\n- Diarias aumentam 100 reais no salario\n\n### Requisitos e Regras de neg\u00f3cio parte 3\n\n- Adicionar b\u00f4nus. O valor do b\u00f4nus \u00e9 definido e ent\u00e3o \u00e9 dividido igualmente entre todos os funcion\u00e1rios.\n- O valor do b\u00f4nus pode mudar e o sal\u00e1rio deve ser recalculado.\n\n## Shell\n\n```bash\n#TEST_CASE begin\n$addProf david C\n$addProf elvis D\n$addSta gilmario 3\n$addTer helder 40 sim\n$showAll\nprof:david:C:7000\nprof:elvis:D:9000\nsta:gilmario:3:3900\nter:helder:40:sim:660\n$rm elvis\n$showAll\nprof:david:C:7000\nsta:gilmario:3:3900\nter:helder:40:sim:660\n\n#TEST_CASE diaria\n$addDiaria david\n$addDiaria david\n$addDiaria david\nfail: limite de diarias atingido\n$show david\nprof:david:C:7200\n$addDiaria gilmario\n$addDiaria gilmario\nfail: limite de diarias atingido\n$show gilmario\nsta:gilmario:3:4000\n$addDiaria helder\nfail: terc nao pode receber diaria\n\n#TEST_CASE bonus\n\n# um bonus de 600, para 3 funcion\u00e1rios vai dar 200 reais pra cada\n$setBonus 600\n$show gilmario \nsta:gilmario:3:4200\n\n$setBonus 300\n$show gilmario\nsta:gilmario:3:4100\n$end\n```\n\n## Guide\n\n- Fa\u00e7a com que prof, sta e ter sejam subclasses de Funcion\u00e1rio, ou seja herdem todos os atributos e m\u00e9todos da classe Funcion\u00e1rio.\n- Utilize apenas um reposit\u00f3rio (tire proveito do polimorfismo).\n- As classes filhas devem sobrescrever os m\u00e9todos herdados da classe pai sempre que voc\u00ea achar necess\u00e1rio.\n\n![diagrama](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/salario/diagrama.png)\n\n***\n\n## Draft\n\n<!--FILTER Solver.java java-->\n```java\nclass MsgException extends RuntimeException {\n    public MsgException(String message);\n}\nabstract class Funcionario {\n    protected String nome;\n    protected int bonus;\n    protected int diarias;\n    protected int maxDiarias;\n    public Funcionario(String nome);\n    public String getNome();\n    public void setBonus(int bonus);\n      this.bonus = bonus;\n    //se n\u00e3o atingiu o m\u00e1ximo, adicione mais uma di\u00e1ria\n    //se atingiu o m\u00e1ximo, lance uma MsgException\n    public void addDiaria();\n    //retorna bonus + diarias * 100\n    public int getSalario();\n}\nclass Professor extends Funcionario {\n    protected String classe;\n    //inicializa classe e muda maxDiarias para 2\n    public Professor(String nome, String classe);\n    public String getClasse();\n    //l\u00f3gica do sal\u00e1rio do professor\n    //usa o super.getSalario para pegar bonus e diarias\n    public int getSalario();\n    public String toString();\n}\nclass STA extends Funcionario {\n    protected int nivel;\n    public STA(String nome, int nivel);\n    public int getNivel();\n    public int getSalario();\n    public String toString();\n}\nclass Tercerizado extends Funcionario {\n    protected int horas;\n    protected boolean isSalubre = false;\n    public Tercerizado(String nome, int horas, String isSalubre);\n    public int getHoras();\n    public String getIsSalubre();\n    public int getSalario();\n    public void addDiaria();\n    public String toString();\n}\nclass UFC {\n    private Map<String, Funcionario> funcionarios = new TreeMap<>();\n    public String toString();\n    public Funcionario getFuncionario(String nome);\n    public void addFuncionario(Funcionario funcionario);\n    public void rmFuncionario(String nome);\n    //reparte o bonus para todos os funcionarios\n    public void setBonus(int bonus);\n}\nclass Solver {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        UFC ufc = new UFC();\n        while (true) {\n            try {\n                String line = scanner.nextLine();\n                System.out.println(\"$\" + line);\n                String ui[] = line.split(\" \");\n                if (ui[0].equals(\"end\")) {\n                    break;\n                } else if (ui[0].equals(\"addProf\")) {\n                    ufc.addFuncionario(new Professor(ui[1], ui[2]));\n                } else if (ui[0].equals(\"addSta\")) {\n                    ufc.addFuncionario(new STA(ui[1], Integer.parseInt(ui[2])));\n                } else if (ui[0].equals(\"addTer\")) {\n                    ufc.addFuncionario(new Tercerizado(ui[1], Integer.parseInt(ui[2]), ui[3]));\n                } else if (ui[0].equals(\"rm\")) {\n                    ufc.rmFuncionario(ui[1]);\n                } else if (ui[0].equals(\"showAll\")) {\n                    System.out.println(ufc);\n                } else if (ui[0].equals(\"show\")) {\n                    System.out.println(ufc.getFuncionario(ui[1]));\n                } else if (ui[0].equals(\"addDiaria\")) {\n                    ufc.getFuncionario(ui[1]).addDiaria();\n                } else if (ui[0].equals(\"setBonus\")) {\n                    ufc.setBonus(Integer.parseInt(ui[1]));\n                } else {\n                    System.out.print(\"fail: comando invalido\");\n                }\n            } catch (MsgException me) {\n                System.out.println(me.getMessage());\n            }\n        }\n    }\n}\n```\n<!--FILTER_END-->",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT begin\naddProf david C\naddProf elvis D\naddSta gilmario 3\naddTer helder 40 sim\nshowAll\nrm elvis\nshowAll\nend\n======== EXPECT\n$addProf david C\n$addProf elvis D\n$addSta gilmario 3\n$addTer helder 40 sim\n$showAll\nprof:david:C:7000\nprof:elvis:D:9000\nsta:gilmario:3:3900\nter:helder:40:sim:660\n$rm elvis\n$showAll\nprof:david:C:7000\nsta:gilmario:3:3900\nter:helder:40:sim:660\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT diaria\naddProf david C\naddProf elvis D\naddSta gilmario 3\naddTer helder 40 sim\nshowAll\nrm elvis\nshowAll\naddDiaria david\naddDiaria david\naddDiaria david\nshow david\naddDiaria gilmario\naddDiaria gilmario\nshow gilmario\naddDiaria helder\nend\n======== EXPECT\n$addProf david C\n$addProf elvis D\n$addSta gilmario 3\n$addTer helder 40 sim\n$showAll\nprof:david:C:7000\nprof:elvis:D:9000\nsta:gilmario:3:3900\nter:helder:40:sim:660\n$rm elvis\n$showAll\nprof:david:C:7000\nsta:gilmario:3:3900\nter:helder:40:sim:660\n$addDiaria david\n$addDiaria david\n$addDiaria david\nfail: limite de diarias atingido\n$show david\nprof:david:C:7200\n$addDiaria gilmario\n$addDiaria gilmario\nfail: limite de diarias atingido\n$show gilmario\nsta:gilmario:3:4000\n$addDiaria helder\nfail: terc nao pode receber diaria\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT bonus\naddProf david C\naddProf elvis D\naddSta gilmario 3\naddTer helder 40 sim\nshowAll\nrm elvis\nshowAll\naddDiaria david\naddDiaria david\naddDiaria david\nshow david\naddDiaria gilmario\naddDiaria gilmario\nshow gilmario\naddDiaria helder\nsetBonus 600\nshow gilmario \nsetBonus 300\nshow gilmario\nend\n======== EXPECT\n$addProf david C\n$addProf elvis D\n$addSta gilmario 3\n$addTer helder 40 sim\n$showAll\nprof:david:C:7000\nprof:elvis:D:9000\nsta:gilmario:3:3900\nter:helder:40:sim:660\n$rm elvis\n$showAll\nprof:david:C:7000\nsta:gilmario:3:3900\nter:helder:40:sim:660\n$addDiaria david\n$addDiaria david\n$addDiaria david\nfail: limite de diarias atingido\n$show david\nprof:david:C:7200\n$addDiaria gilmario\n$addDiaria gilmario\nfail: limite de diarias atingido\n$show gilmario\nsta:gilmario:3:4000\n$addDiaria helder\nfail: terc nao pode receber diaria\n$setBonus 600\n$show gilmario \nsta:gilmario:3:4200\n$setBonus 300\n$show gilmario\nsta:gilmario:3:4100\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
