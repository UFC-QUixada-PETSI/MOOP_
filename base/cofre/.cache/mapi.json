{
    "title": "@cofre: Seu porquinho cresceu",
    "description": "# Seu porquinho cresceu\n\n<!-- toch -->\n[Intro](#intro) | [Draft](#draft) | [Guide](#guide) | [Shell](#shell)\n-- | -- | -- | --\n<!-- toch -->\n\n![cover](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/cofre/cover.jpg)\n\n## Intro\n\nO sistema dever\u00e1:\n\n- Gerenciar um cofrinho do tipo Porquinho capaz de guardar moedas e itens.\n- As moedas devem ser criadas atrav\u00e9s de uma `enum`.\n- Ambos moedas e itens deve implementar a Interaface `Valuable`.\n- O volume do cofre incrementa conforme ele recebe itens e moedas.\n- A l\u00f3gica da utiliza\u00e7\u00e3o do cofre \u00e9:\n  - Para inserir moedas e itens, o cofre deve estar inteiro.\n  - Para obter moedas e itens, o cofre deve estar quebrado.\n  - Ao quebrar, o volume do porco deve ser zerado e o status de broken deve ser alterado para `true`.\n  - Ao obter moedas e itens, voc\u00ea deve retornar os objetos armazenados.\n  - Calcular o valor e o volume atual do porco deve ser feito atrav\u00e9s do m\u00e9todo getValue() e getVolume().\n  - Moedas e Itens devem ser armazenados em uma mesma lista de Valuables.\n\n***\n\n## Draft\n\n- [draft.java](https://github.com/qxcodepoo/arcade/blob/master/base/cofre/.cache/draft.java)\n- [draft.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/cofre/.cache/draft.cpp)\n- [draft.ts](https://github.com/qxcodepoo/arcade/blob/master/base/cofre/.cache/draft.ts)\n\n## Guide\n\n![diagrama](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/cofre/diagrama.png)\n\n<!-- load diagrama.puml fenced=ts:filter -->\n\n```ts\n\n@startuml\n\nskinparam defaultFontName \"Source Code Pro\"\nskinparam dpi 150\n\n\n\n~interface Valuable {\n  + getLabel() : String {abstract}\n  + getValue() : double {abstract}\n  + getVolume() : int {abstract}\n  __\n  + toString() : String\n}\n\nenum Coin {\n  + M10 {static}\n  + M100 {static}\n  + M25 {static}\n  + M50 {static}\n  - label  : String\n  - value  : double\n  - volume : int\n  __\n  + getLabel()  : String\n  + getValue()  : double\n  + getVolume() : int\n  __\n  + toString() : String\n}\n\nclass Item {\n  - label : String\n  - value : double\n  - volume : int\n  __\n  + Item(label : String, volume : int, value : double)\n  __\n  + getLabel()  : String\n  + getValue()  : double\n  + getVolume() : int\n  + setLabel(label : String)\n  + setVolume(volume : int)\n  __\n  + toString() : String\n}\n\nclass Pig {\n  - broken    : boolean\n  - valuables : ArrayList<Valuable>\n  - volumeMax : int\n  __\n  \n  ' inicializa as variaveis\n  + Pig(volumeMax  : int)\n  \n  ' verifica se ainda cabe e se couber\n  ' adiciona o elemento no final da lista\n  + addValuable(valuable : Valuable) : boolean\n  \n  ' quebra se j\u00e1 n\u00e3o estiver quebrado\n  + breakPig()     : boolean\n  __\n  \n  ' se estiver quebrado\n  ' pega apenas as moedas, retira-as\n  ' da lista de valuables e as retorna\n  + getCoins()     : List<Coin>\n\n  ' retira e retorna apenas os itens\n  + getItems()     : List<Item>\n\n  ' percorre o vetor de valuables\n  ' somando o valor de todos os elementos\n  + calcValue()     : double\n\n  ' percorre o vetor de valuables\n  ' somando o volume de todos os elementos\n  + getVolume()    : int\n\n  ' retorna o volume max\n  + getVolumeMax() : int\n\n  ' retorna se esta quebrado\n  + isBroken()     : boolean\n  __\n  + toString()     : String\n}\n\n\nPig \"1\" o--> \"0..*\" Valuable\nCoin ..|> Valuable \nItem ..|> Valuable \n@enduml\n\n```\n\n<!-- load -->\n\n***\n\n## Shell\n\n```sh\n#TEST_CASE init\n$init 20\n$show\n[] : 0.00$ : 0/20 : intact\n\n#TEST_CASE insert\n$addCoin 10\n$show\n[M10:0.10:1] : 0.10$ : 1/20 : intact\n\n$addCoin 50\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 4/20 : intact\n\n#TEST_CASE itens\n$addItem ouro 50.0 3\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3] : 50.60$ : 7/20 : intact\n\n$addItem passaporte 0.0 2\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n\n#TEST_CASE failed break\n$extractItems\nfail: you must break the pig first\n\n$extractCoins\nfail: you must break the pig first\n\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n\n#TEST_CASE breaking\n$break\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 0/20 : broken\n\n#TEST_CASE extractItems\n\n$extractItems\n[ouro:50.00:3, passaporte:0.00:2]\n\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 0/20 : broken\n\n#TEST_CASE extractCoins\n\n$extractCoins\n[M10:0.10:1, M50:0.50:3]\n\n$show\n[] : 0.00$ : 0/20 : broken\n$end\n```\n\n```sh\n#TEST_CASE\n$init 10\n\n$break\n\n$addCoin 10\nfail: the pig is broken\n\n$show\n[] : 0.00$ : 0/10 : broken\n\n$addItem bilhete 0.00 2\nfail: the pig is broken\n\n$show\n[] : 0.00$ : 0/10 : broken\n\n$end\n```\n\n```sh\n#TEST_CASE full coin\n$init 5\n\n$addCoin 10\n$addCoin 25\n$show\n[M10:0.10:1, M25:0.25:2] : 0.35$ : 3/5 : intact\n\n$addCoin 50\nfail: the pig is full\n\n$show\n[M10:0.10:1, M25:0.25:2] : 0.35$ : 3/5 : intact\n\n#TEST_CASE full item\n$addItem ouro 100.0 1\n\n$show\n[M10:0.10:1, M25:0.25:2, ouro:100.00:1] : 100.35$ : 4/5 : intact\n\n$addItem pirulito 5.50 2\nfail: the pig is full\n\n$show\n[M10:0.10:1, M25:0.25:2, ouro:100.00:1] : 100.35$ : 4/5 : intact\n\n$end\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT init\ninit 20\nshow\nend\n======== EXPECT\n$init 20\n$show\n[] : 0.00$ : 0/20 : intact\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT insert\ninit 20\nshow\naddCoin 10\nshow\naddCoin 50\nshow\nend\n======== EXPECT\n$init 20\n$show\n[] : 0.00$ : 0/20 : intact\n$addCoin 10\n$show\n[M10:0.10:1] : 0.10$ : 1/20 : intact\n$addCoin 50\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 4/20 : intact\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT itens\ninit 20\nshow\naddCoin 10\nshow\naddCoin 50\nshow\naddItem ouro 50.0 3\nshow\naddItem passaporte 0.0 2\nshow\nend\n======== EXPECT\n$init 20\n$show\n[] : 0.00$ : 0/20 : intact\n$addCoin 10\n$show\n[M10:0.10:1] : 0.10$ : 1/20 : intact\n$addCoin 50\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 4/20 : intact\n$addItem ouro 50.0 3\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3] : 50.60$ : 7/20 : intact\n$addItem passaporte 0.0 2\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT failed break\ninit 20\nshow\naddCoin 10\nshow\naddCoin 50\nshow\naddItem ouro 50.0 3\nshow\naddItem passaporte 0.0 2\nshow\nextractItems\nextractCoins\nshow\nend\n======== EXPECT\n$init 20\n$show\n[] : 0.00$ : 0/20 : intact\n$addCoin 10\n$show\n[M10:0.10:1] : 0.10$ : 1/20 : intact\n$addCoin 50\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 4/20 : intact\n$addItem ouro 50.0 3\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3] : 50.60$ : 7/20 : intact\n$addItem passaporte 0.0 2\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$extractItems\nfail: you must break the pig first\n$extractCoins\nfail: you must break the pig first\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT breaking\ninit 20\nshow\naddCoin 10\nshow\naddCoin 50\nshow\naddItem ouro 50.0 3\nshow\naddItem passaporte 0.0 2\nshow\nextractItems\nextractCoins\nshow\nbreak\nshow\nend\n======== EXPECT\n$init 20\n$show\n[] : 0.00$ : 0/20 : intact\n$addCoin 10\n$show\n[M10:0.10:1] : 0.10$ : 1/20 : intact\n$addCoin 50\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 4/20 : intact\n$addItem ouro 50.0 3\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3] : 50.60$ : 7/20 : intact\n$addItem passaporte 0.0 2\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$extractItems\nfail: you must break the pig first\n$extractCoins\nfail: you must break the pig first\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$break\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 0/20 : broken\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT extractItems\ninit 20\nshow\naddCoin 10\nshow\naddCoin 50\nshow\naddItem ouro 50.0 3\nshow\naddItem passaporte 0.0 2\nshow\nextractItems\nextractCoins\nshow\nbreak\nshow\nextractItems\nshow\nend\n======== EXPECT\n$init 20\n$show\n[] : 0.00$ : 0/20 : intact\n$addCoin 10\n$show\n[M10:0.10:1] : 0.10$ : 1/20 : intact\n$addCoin 50\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 4/20 : intact\n$addItem ouro 50.0 3\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3] : 50.60$ : 7/20 : intact\n$addItem passaporte 0.0 2\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$extractItems\nfail: you must break the pig first\n$extractCoins\nfail: you must break the pig first\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$break\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 0/20 : broken\n$extractItems\n[ouro:50.00:3, passaporte:0.00:2]\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 0/20 : broken\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT extractCoins\ninit 20\nshow\naddCoin 10\nshow\naddCoin 50\nshow\naddItem ouro 50.0 3\nshow\naddItem passaporte 0.0 2\nshow\nextractItems\nextractCoins\nshow\nbreak\nshow\nextractItems\nshow\nextractCoins\nshow\nend\n======== EXPECT\n$init 20\n$show\n[] : 0.00$ : 0/20 : intact\n$addCoin 10\n$show\n[M10:0.10:1] : 0.10$ : 1/20 : intact\n$addCoin 50\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 4/20 : intact\n$addItem ouro 50.0 3\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3] : 50.60$ : 7/20 : intact\n$addItem passaporte 0.0 2\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$extractItems\nfail: you must break the pig first\n$extractCoins\nfail: you must break the pig first\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$break\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 0/20 : broken\n$extractItems\n[ouro:50.00:3, passaporte:0.00:2]\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 0/20 : broken\n$extractCoins\n[M10:0.10:1, M50:0.50:3]\n$show\n[] : 0.00$ : 0/20 : broken\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\ninit 10\nbreak\naddCoin 10\nshow\naddItem bilhete 0.00 2\nshow\nend\n======== EXPECT\n$init 10\n$break\n$addCoin 10\nfail: the pig is broken\n$show\n[] : 0.00$ : 0/10 : broken\n$addItem bilhete 0.00 2\nfail: the pig is broken\n$show\n[] : 0.00$ : 0/10 : broken\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT full coin\ninit 5\naddCoin 10\naddCoin 25\nshow\naddCoin 50\nshow\nend\n======== EXPECT\n$init 5\n$addCoin 10\n$addCoin 25\n$show\n[M10:0.10:1, M25:0.25:2] : 0.35$ : 3/5 : intact\n$addCoin 50\nfail: the pig is full\n$show\n[M10:0.10:1, M25:0.25:2] : 0.35$ : 3/5 : intact\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT full item\ninit 5\naddCoin 10\naddCoin 25\nshow\naddCoin 50\nshow\naddItem ouro 100.0 1\nshow\naddItem pirulito 5.50 2\nshow\nend\n======== EXPECT\n$init 5\n$addCoin 10\n$addCoin 25\n$show\n[M10:0.10:1, M25:0.25:2] : 0.35$ : 3/5 : intact\n$addCoin 50\nfail: the pig is full\n$show\n[M10:0.10:1, M25:0.25:2] : 0.35$ : 3/5 : intact\n$addItem ouro 100.0 1\n$show\n[M10:0.10:1, M25:0.25:2, ouro:100.00:1] : 100.35$ : 4/5 : intact\n$addItem pirulito 5.50 2\nfail: the pig is full\n$show\n[M10:0.10:1, M25:0.25:2, ouro:100.00:1] : 100.35$ : 4/5 : intact\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\nfunction main() {\n    \n    while (true) {\n        let line = input();\n        console.log(\"$\" + line);\n        let args = line.split(\" \");\n        \n        try {\n            if (args[0] == \"end\") {\n                break;\n            }\n            else if (args[0] == \"show\") {\n            }\n            else if (args[0] == \"init\") {\n                // const volumeMax = parseInt(args[1]);\n            }\n            else if (args[0] == \"addCoin\") {\n                // let value = parseInt(args[1]);\n            }\n            else if (args[0] == \"addItem\") {\n                // const label = args[1];\n                // const value = parseInt(args[2]);\n                // const volume = parseInt(args[3]);\n            }\n            else if (args[0] == \"break\") {\n            }\n            else if (args[0] == \"extractCoins\") {\n            }\n            else if (args[0] == \"extractItems\") {\n            }\n            else {\n                console.log(\"fail: invalid command\");\n            }\n        } catch (e) {\n            console.log(e.message);\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.Scanner;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\npublic class Shell {\n    public static void main(String[] a) {\n        Pig pig = new Pig(0);\n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n            var args = line.split(\" \");\n            var cmd = args[0];\n            \n            try {\n                if (cmd.equals(\"end\")) {\n                    break;\n                }\n                else if(cmd.equals(\"show\")) { \n                }\n                else if(cmd.equals(\"addCoin\")) {\n                    // String value = args[1];\n                }\n                else if(cmd.equals(\"init\")) {\n                    // var volume = Integer.parseInt(args[1]);\n                }\n                else if(cmd.equals(\"addItem\")) {\n                    // var label = args[1];\n                    // var value = Double.parseDouble(args[2]);\n                    // var volume = Integer.parseInt(args[3]);\n                }\n                else if(cmd.equals(\"break\")) {\n                }\n                else if(cmd.equals(\"extractCoins\")) { \n                }\n                else if(cmd.equals(\"extractItems\")) { \n                }\n                else {\n                    System.out.println(\"fail: comando invalido\");\n                }\n            } catch (RuntimeException e) {\n                System.out.println(e.getMessage());\n            }\n        }\n    }\n\n    private static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <memory>\n#include <vector>\n#include <sstream>\n#include <iomanip>\nusing namespace std;\n\ntemplate <typename CONTAINER, typename FUNC>\nstring map_join(const CONTAINER& container, FUNC func, const string& separator) {\n    stringstream ss;\n    for (auto it = container.begin(); it != container.end(); ++it) {\n        ss << (it == container.begin() ? \"\" : separator);\n        ss << func(*it);\n    }\n    return ss.str();\n}\n\n\nint main() {\n    while (true) {\n        try {\n            string line, cmd;\n            getline(cin, line);\n            cout << '$' << line << endl;\n\n            stringstream ss(line);\n            ss >> cmd;\n\n            if (cmd == \"end\" ) {\n                break;\n            }\n            else if (cmd == \"init\") {\n                // int volumeMax;\n                // ss >> volumeMax;\n            }\n            else if (cmd == \"addCoin\") {\n                // int value;\n                // ss >> value;\n            }\n            else if (cmd == \"addItem\") {\n                // string label;\n                // double value;\n                // int volume;\n                // ss >> label >> value >> volume;\n            }\n            else if (cmd == \"break\") {\n            }\n            else if (cmd == \"extractCoins\") {\n            }\n            else if (cmd == \"extractItems\") { \n            }\n            else if (cmd == \"show\") { \n            }\n            else { \n                cout << \"fail: invalid command\" << endl;\n            }\n        } catch (string s) {\n            cout << s << endl;\n        }\n    }\n\n}\n",
                "type": "show"
            }
        ]
    }
}
