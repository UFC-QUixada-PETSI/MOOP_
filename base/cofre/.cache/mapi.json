{
    "title": "Seu porquinho cresceu e virou um @cofre",
    "description": "# Seu porquinho cresceu e virou um @cofre\n\n<!-- toch -->\n[Intro](#intro) | [Draft](#draft) | [Guide](#guide) | [Shell](#shell)\n-- | -- | -- | --\n<!-- toch -->\n\n![cover](cover.jpg)\n\n## Intro\n\nO sistema dever\u00e1:\n\n- Gerenciar um cofrinho do tipo Porquinho capaz de guardar moedas e itens.\n- As moedas devem ser criadas atrav\u00e9s de uma `enum`.\n- Ambos moedas e itens deve implementar a Interaface `Valuable`.\n- O volume do cofre incrementa conforme ele recebe itens e moedas.\n- A l\u00f3gica da utiliza\u00e7\u00e3o do cofre \u00e9:\n  - Para inserir moedas e itens, o cofre deve estar inteiro.\n  - Para obter moedas e itens, o cofre deve estar quebrado.\n  - Ao quebrar, o volume do porco deve ser zerado e o status de broken deve ser alterado para `true`.\n  - Ao obter moedas e itens, voc\u00ea deve retornar os objetos armazenados.\n  - Calcular o valor e o volume atual do porco deve ser feito atrav\u00e9s do m\u00e9todo getValue() e getVolume().\n  - Moedas e Itens devem ser armazenados em uma mesma lista de Valuables.\n\n***\n\n## Draft\n\n- [draft.java](.cache/draft.java)\n- [draft.cpp](.cache/draft.cpp)\n- [draft.ts](.cache/draft.ts)\n\n## Guide\n\n![diagrama](diagrama.png)\n\n<!-- load diagrama.puml fenced=ts:filter -->\n\n```ts\n\n~interface Valuable {\n  + getLabel() : String {abstract}\n  + getValue() : double {abstract}\n  + getVolume() : int {abstract}\n  __\n  + toString() : String\n}\n\nenum Coin {\n  + M10 {static}\n  + M100 {static}\n  + M25 {static}\n  + M50 {static}\n  - label  : String\n  - value  : double\n  - volume : int\n  __\n  + getLabel()  : String\n  + getValue()  : double\n  + getVolume() : int\n  __\n  + toString() : String\n}\n\nclass Item {\n  - label : String\n  - value : double\n  - volume : int\n  __\n  + Item(label : String, volume : int, value : double)\n  __\n  + getLabel()  : String\n  + getValue()  : double\n  + getVolume() : int\n  + setLabel(label : String)\n  + setVolume(volume : int)\n  __\n  + toString() : String\n}\n\nclass Pig {\n  - broken    : boolean\n  - valuables : ArrayList<Valuable>\n  - volumeMax : int\n  __\n  \n  ' inicializa as variaveis\n  + Pig(volumeMax  : int)\n  \n  ' verifica se ainda cabe e se couber\n  ' adiciona o elemento no final da lista\n  + addValuable(valuable : Valuable) : boolean\n  \n  ' quebra se j\u00e1 n\u00e3o estiver quebrado\n  + breakPig()     : boolean\n  __\n  \n  ' se estiver quebrado\n  ' pega apenas as moedas, retira-as\n  ' da lista de valuables e as retorna\n  + getCoins()     : List<Coin>\n\n  ' retira e retorna apenas os itens\n  + getItems()     : List<Item>\n\n  ' percorre o vetor de valuables\n  ' somando o valor de todos os elementos\n  + calcValue()     : double\n\n  ' percorre o vetor de valuables\n  ' somando o volume de todos os elementos\n  + getVolume()    : int\n\n  ' retorna o volume max\n  + getVolumeMax() : int\n\n  ' retorna se esta quebrado\n  + isBroken()     : boolean\n  __\n  + toString()     : String\n}\n```\n\n<!-- load -->\n\n***\n\n## Shell\n\n```sh\n#__case init\n$init 20\n$show\n[] : 0.00$ : 0/20 : intact\n\n#__case insert\n$addCoin 10\n$show\n[M10:0.10:1] : 0.10$ : 1/20 : intact\n\n$addCoin 50\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 4/20 : intact\n\n#__case itens\n$addItem ouro 50.0 3\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3] : 50.60$ : 7/20 : intact\n\n$addItem passaporte 0.0 2\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n\n#__case failed break\n$extractItems\nfail: you must break the pig first\n\n$extractCoins\nfail: you must break the pig first\n\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n\n#__case breaking\n$break\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 0/20 : broken\n\n#__case extractItems\n\n$extractItems\n[ouro:50.00:3, passaporte:0.00:2]\n\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 0/20 : broken\n\n#__case extractCoins\n\n$extractCoins\n[M10:0.10:1, M50:0.50:3]\n\n$show\n[] : 0.00$ : 0/20 : broken\n$end\n```\n\n```sh\n#__case\n$init 10\n\n$break\n\n$addCoin 10\nfail: the pig is broken\n\n$show\n[] : 0.00$ : 0/10 : broken\n\n$addItem bilhete 0.00 2\nfail: the pig is broken\n\n$show\n[] : 0.00$ : 0/10 : broken\n\n$end\n```\n\n```sh\n#__case full coin\n$init 5\n\n$addCoin 10\n$addCoin 25\n$show\n[M10:0.10:1, M25:0.25:2] : 0.35$ : 3/5 : intact\n\n$addCoin 50\nfail: the pig is full\n\n$show\n[M10:0.10:1, M25:0.25:2] : 0.35$ : 3/5 : intact\n\n#__case full item\n$addItem ouro 100.0 1\n\n$show\n[M10:0.10:1, M25:0.25:2, ouro:100.00:1] : 100.35$ : 4/5 : intact\n\n$addItem pirulito 5.50 2\nfail: the pig is full\n\n$show\n[M10:0.10:1, M25:0.25:2, ouro:100.00:1] : 100.35$ : 4/5 : intact\n\n$end\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> init\ninit 20\nshow\nend\n========\n$init 20\n$show\n[] : 0.00$ : 0/20 : intact\n$end\n<<<<<<<<\n\n>>>>>>>> insert\ninit 20\nshow\naddCoin 10\nshow\naddCoin 50\nshow\nend\n========\n$init 20\n$show\n[] : 0.00$ : 0/20 : intact\n$addCoin 10\n$show\n[M10:0.10:1] : 0.10$ : 1/20 : intact\n$addCoin 50\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 4/20 : intact\n$end\n<<<<<<<<\n\n>>>>>>>> itens\ninit 20\nshow\naddCoin 10\nshow\naddCoin 50\nshow\naddItem ouro 50.0 3\nshow\naddItem passaporte 0.0 2\nshow\nend\n========\n$init 20\n$show\n[] : 0.00$ : 0/20 : intact\n$addCoin 10\n$show\n[M10:0.10:1] : 0.10$ : 1/20 : intact\n$addCoin 50\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 4/20 : intact\n$addItem ouro 50.0 3\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3] : 50.60$ : 7/20 : intact\n$addItem passaporte 0.0 2\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$end\n<<<<<<<<\n\n>>>>>>>> failed break\ninit 20\nshow\naddCoin 10\nshow\naddCoin 50\nshow\naddItem ouro 50.0 3\nshow\naddItem passaporte 0.0 2\nshow\nextractItems\nextractCoins\nshow\nend\n========\n$init 20\n$show\n[] : 0.00$ : 0/20 : intact\n$addCoin 10\n$show\n[M10:0.10:1] : 0.10$ : 1/20 : intact\n$addCoin 50\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 4/20 : intact\n$addItem ouro 50.0 3\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3] : 50.60$ : 7/20 : intact\n$addItem passaporte 0.0 2\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$extractItems\nfail: you must break the pig first\n$extractCoins\nfail: you must break the pig first\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$end\n<<<<<<<<\n\n>>>>>>>> breaking\ninit 20\nshow\naddCoin 10\nshow\naddCoin 50\nshow\naddItem ouro 50.0 3\nshow\naddItem passaporte 0.0 2\nshow\nextractItems\nextractCoins\nshow\nbreak\nshow\nend\n========\n$init 20\n$show\n[] : 0.00$ : 0/20 : intact\n$addCoin 10\n$show\n[M10:0.10:1] : 0.10$ : 1/20 : intact\n$addCoin 50\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 4/20 : intact\n$addItem ouro 50.0 3\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3] : 50.60$ : 7/20 : intact\n$addItem passaporte 0.0 2\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$extractItems\nfail: you must break the pig first\n$extractCoins\nfail: you must break the pig first\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$break\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 0/20 : broken\n$end\n<<<<<<<<\n\n>>>>>>>> extractItems\ninit 20\nshow\naddCoin 10\nshow\naddCoin 50\nshow\naddItem ouro 50.0 3\nshow\naddItem passaporte 0.0 2\nshow\nextractItems\nextractCoins\nshow\nbreak\nshow\nextractItems\nshow\nend\n========\n$init 20\n$show\n[] : 0.00$ : 0/20 : intact\n$addCoin 10\n$show\n[M10:0.10:1] : 0.10$ : 1/20 : intact\n$addCoin 50\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 4/20 : intact\n$addItem ouro 50.0 3\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3] : 50.60$ : 7/20 : intact\n$addItem passaporte 0.0 2\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$extractItems\nfail: you must break the pig first\n$extractCoins\nfail: you must break the pig first\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$break\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 0/20 : broken\n$extractItems\n[ouro:50.00:3, passaporte:0.00:2]\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 0/20 : broken\n$end\n<<<<<<<<\n\n>>>>>>>> extractCoins\ninit 20\nshow\naddCoin 10\nshow\naddCoin 50\nshow\naddItem ouro 50.0 3\nshow\naddItem passaporte 0.0 2\nshow\nextractItems\nextractCoins\nshow\nbreak\nshow\nextractItems\nshow\nextractCoins\nshow\nend\n========\n$init 20\n$show\n[] : 0.00$ : 0/20 : intact\n$addCoin 10\n$show\n[M10:0.10:1] : 0.10$ : 1/20 : intact\n$addCoin 50\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 4/20 : intact\n$addItem ouro 50.0 3\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3] : 50.60$ : 7/20 : intact\n$addItem passaporte 0.0 2\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$extractItems\nfail: you must break the pig first\n$extractCoins\nfail: you must break the pig first\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$break\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 0/20 : broken\n$extractItems\n[ouro:50.00:3, passaporte:0.00:2]\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 0/20 : broken\n$extractCoins\n[M10:0.10:1, M50:0.50:3]\n$show\n[] : 0.00$ : 0/20 : broken\n$end\n<<<<<<<<\n\n>>>>>>>> None%\ninit 10\nbreak\naddCoin 10\nshow\naddItem bilhete 0.00 2\nshow\nend\n========\n$init 10\n$break\n$addCoin 10\nfail: the pig is broken\n$show\n[] : 0.00$ : 0/10 : broken\n$addItem bilhete 0.00 2\nfail: the pig is broken\n$show\n[] : 0.00$ : 0/10 : broken\n$end\n<<<<<<<<\n\n>>>>>>>> full coin\ninit 5\naddCoin 10\naddCoin 25\nshow\naddCoin 50\nshow\nend\n========\n$init 5\n$addCoin 10\n$addCoin 25\n$show\n[M10:0.10:1, M25:0.25:2] : 0.35$ : 3/5 : intact\n$addCoin 50\nfail: the pig is full\n$show\n[M10:0.10:1, M25:0.25:2] : 0.35$ : 3/5 : intact\n$end\n<<<<<<<<\n\n>>>>>>>> full item\ninit 5\naddCoin 10\naddCoin 25\nshow\naddCoin 50\nshow\naddItem ouro 100.0 1\nshow\naddItem pirulito 5.50 2\nshow\nend\n========\n$init 5\n$addCoin 10\n$addCoin 25\n$show\n[M10:0.10:1, M25:0.25:2] : 0.35$ : 3/5 : intact\n$addCoin 50\nfail: the pig is full\n$show\n[M10:0.10:1, M25:0.25:2] : 0.35$ : 3/5 : intact\n$addItem ouro 100.0 1\n$show\n[M10:0.10:1, M25:0.25:2, ouro:100.00:1] : 100.35$ : 4/5 : intact\n$addItem pirulito 5.50 2\nfail: the pig is full\n$show\n[M10:0.10:1, M25:0.25:2, ouro:100.00:1] : 100.35$ : 4/5 : intact\n$end\n<<<<<<<<\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
