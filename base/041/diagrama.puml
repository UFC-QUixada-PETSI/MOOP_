'--
@startuml

skinparam defaultFontName Hasklig
skinparam dpi 150
'==
  class Player {

    ' numero do jogador
    - label: int  

    ' posição dele no tabuleiro
    - pos  : int

    ' se ele poderá andar no proximo roll ou ainda esta preso
    - free : boolean
    __

    ' inicialize o jogador
    + Player(label: int)

    ' retorna this.free
    + isFree()   : boolean

    + toString() : string
    __
    + getLabel() : int
    + getPos()   : int
    + setPos(pos : int)
    + setFree(free : boolean)
  }

  class Board {
    
    ' lista com as posições do tabuleiro que tem armadilhas
    - trapList  : Array<int>

    ' lista com os jogadores
    - players   : Array<Player>

    ' se o jogo ainda esta acontecendo ou ja acabou
    - running   : boolean

    ' o tamanho do tabuleiro
    - boardSize : int
    __
    
    ' inicialize o tabuleiro
    ' crie uma lista vazia para as armadilhas
    ' crie uma lista vazia para os jogadores
    ' faça um laço criando os jogadores e adicionado à lista de jogadores
    ' inicialize o tamanho do tabuleiro em boardSize + 1
    ' pois o tabuleiro começa em 0
    + Board(nPlayers : int, boardSize : int)

    ' imprime o tabuleiro
    + toString() : string
    __
    ' adiciona uma armadilha na posição pos
    ' trapList.push(pos)
    + addTrap(pos : int)

    ' faz toda a lógica da jogada
    ' verifique se o jogo ainda está em andamento
    ' pegue o primeiro jogador
    ' se ele estiver preso
    '   veja se a jogada é par e liberta ele
    ' se ele estiver livre
    '   faça ele andar
    '   veja se ele caiu em uma armadilha
    '   ou se ele chegou no final do tabuleiro
    ' mande o player par o fim da lista de jogadores
    + rollDice(value : int)
  }
'--
Board "1" *--  "2..*" Player : > has
@enduml
