{
    "title": "Fa\u00e7a barulho, envelhe\u00e7a e morra seu @animal",
    "description": "# Fa\u00e7a barulho, envelhe\u00e7a e morra seu @animal\n\n<!-- toch -->\n[Intro](#intro) | [Shell](#shell) | [Guide](#guide) | [Draft](#draft)\n-- | -- | -- | --\n<!-- toch -->\n\n![_](cover.jpg)\n\nO objetivo dessa atividade \u00e9 implementar um animal que passa pelas diversas fases de crescimento at\u00e9 a morte.\n\n***\n\n## Intro\n\n- Criar um animal passando por par\u00e2metro a esp\u00e9cie e o barulho que ele faz.\n- Invocar o m\u00e9todo para que o animal fa\u00e7a barulho.\n- Envelhecer o animal que vai passar por 4 est\u00e1gios:\n  - 0: bebe. Muito pequeno, n\u00e3o faz barulho `---`.\n  - 1: crian\u00e7a. Faz barulho normal.\n  - 2: adulto. Faz barulho normal.\n  - 3: idoso. Faz barulho normal.\n  - 4: morto. N\u00e3o faz mais barulho `RIP`.\n\n***\n\n## Shell\n\n```bash\n#__case iniciando\n# O comando \"$init _especie _barulho\" cria uma animal bebe dessa especie\n# O comando \"$show\" mostra, sem manipula\u00e7\u00e3o, os atributos especie:estagio:barulho\n$init gato miau\n$show\ngato:0:miau\n\n$init cachorro auau\n$show\ncachorro:0:auau\n\n$init galinha cocorico\n$show\ngalinha:0:cocorico\n\n$end\n```\n\n***\n\n```bash\n# O comando grow _valor envelhece o animal em _valor etapas\n#__case envelhecendo\n$init vaca muu\n$show\nvaca:0:muu\n\n$grow 2\n$show\nvaca:2:muu\n\n$grow 2\nwarning: vaca morreu\n\n$show\nvaca:4:muu\n\n$grow 3\nwarning: vaca morreu\n\n$show\nvaca:4:muu\n\n$end\n```\n\n***\n\n```bash\n# O comando noise faz o animal fazer barulho, se ele estiver vivo e n\u00e3o for bebe\n#__case fazer barulho\n$init cabra beeh\n\n$noise\n---\n\n$grow 1\n$noise\nbeeh\n$grow 3\nwarning: cabra morreu\n\n$noise\nRIP\n\n$end\n```\n\n***\n\n```bash\n#__case extra\n$init passaro piupiu\n\n$show\npassaro:0:piupiu\n\n$noise\n---\n\n$grow 1\n$noise\npiupiu\n\n$grow 2\n$noise\npiupiu\n\n$grow 1\nwarning: passaro morreu\n\n$noise\nRIP\n\n$end\n```\n\n## Guide\n\n### Diagrama\n\n![_](diagrama.png)\n\n### O que \u00e9 o Shell\n\nO [Shell](#shell) que voc\u00ea encontra em cada atividade serve tanto para que voc\u00ea entenda o funcionamento do c\u00f3digo quanto ele gera o teste que ser\u00e1 usado na corre\u00e7\u00e3o.\n\nCada `$alguma coisa` representa comando que ser\u00e1 enviado para o seu programa.\n\nDepois \u00e9 verificado se a sa\u00edda gerada pelo seu programa \u00e9 igual ao que era esperado.\n\nEsse \u00e9 o modelo do arquivo de testes gerado para cada atividade.\n\n- [cases.tio](cases.tio)\n\n![image](https://user-images.githubusercontent.com/4747652/263118401-36183946-8e20-4ecb-b0cc-75a5cef3610a.png)\n\n### Como fazer a leitura dos dados\n\nCriando a fun\u00e7\u00e3o main\n\n- Voc\u00ea cria o elemento a ser manipulado fora do la\u00e7o principal.\n- Cria um loop infinito.\n- L\u00ea a linha que \u00e9 o comando.\n- Quebra a linha em palavras.\n- Mostra o comando digitado precedido de '$'.\n- Faz um if aninhado para cada comando repassando os par\u00e2metros para o objeto.\n- Se o comando for 'end' sai do loop.\n- Se o comando for inv\u00e1lido mostra uma mensagem de erro.\n\n```cpp\nfunction main() {\n    \n    var coisa = new Coisa(); //Coisa a ser manipulada\n\n    while (true) {\n        var line = input();         //l\u00ea a linha\n        var args = line.split(\" \"); // quebra em array de palavras\n        write(\"$\" + line);          //mostra '$' na frente\n\n        if (args[0] == \"nome do comando\") {\n            //aqui voce repassa os parametros para o objeto\n            //convertendo os que precisam ser n\u00fameros ou inteiros\n            coisa.funcaoTal(args[1], number(args[2]), (int) number(args[3]));\n        }\n        else if (args[0] == \"outro comando\") {\n            //outra invocacao\n        }\n        else if (args[0] == \"end\") {\n            break;\n        }\n        else {\n            write(\"fail: comando invalido\");\n        }\n    }\n}\n```\n\n## Draft\n\nPara padronizar, em cada linguagem s\u00e3o criadas algumas fun\u00e7\u00f5es auxiliares para simplificar a cria\u00e7\u00e3o da main. Voc\u00ea pode utilizar essas resolu\u00e7\u00f5es como modelos para fazer as fun\u00e7\u00f5es `main` dos outros projetos.\n\nNo caso dessa atividade, o draft j\u00e1 est\u00e1 completo para voc\u00ea utilizar como modelo para outras atividades.\n\n- [Solver.java](.cache/draft.java)\n- [solver.cpp](.cache/draft.cpp )\n- [solver.ts](.cache/draft.ts )\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> iniciando\ninit gato miau\nshow\ninit cachorro auau\nshow\ninit galinha cocorico\nshow\nend\n========\n$init gato miau\n$show\ngato:0:miau\n$init cachorro auau\n$show\ncachorro:0:auau\n$init galinha cocorico\n$show\ngalinha:0:cocorico\n$end\n<<<<<<<<\n\n>>>>>>>> envelhecendo\ninit vaca muu\nshow\ngrow 2\nshow\ngrow 2\nshow\ngrow 3\nshow\nend\n========\n$init vaca muu\n$show\nvaca:0:muu\n$grow 2\n$show\nvaca:2:muu\n$grow 2\nwarning: vaca morreu\n$show\nvaca:4:muu\n$grow 3\nwarning: vaca morreu\n$show\nvaca:4:muu\n$end\n<<<<<<<<\n\n>>>>>>>> fazer barulho\ninit cabra beeh\nnoise\ngrow 1\nnoise\ngrow 3\nnoise\nend\n========\n$init cabra beeh\n$noise\n---\n$grow 1\n$noise\nbeeh\n$grow 3\nwarning: cabra morreu\n$noise\nRIP\n$end\n<<<<<<<<\n\n>>>>>>>> extra\ninit passaro piupiu\nshow\nnoise\ngrow 1\nnoise\ngrow 2\nnoise\ngrow 1\nnoise\nend\n========\n$init passaro piupiu\n$show\npassaro:0:piupiu\n$noise\n---\n$grow 1\n$noise\npiupiu\n$grow 2\n$noise\npiupiu\n$grow 1\nwarning: passaro morreu\n$noise\nRIP\n$end\n<<<<<<<<\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
