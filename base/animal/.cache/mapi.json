{
    "title": "@animal: Animal que nasce, cresce, morre",
    "description": "# Animal que nasce, cresce, morre\n\n<!-- toch -->\n[Intro](#intro) | [Guide](#guide) | [Shell](#shell) | [Draft](#draft) | [Cheat](#cheat)\n-- | -- | -- | -- | --\n<!-- toch -->\n\n![cover](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/animal/cover.jpg)\n\n## Intro\n\nO objetivo dessa atividade \u00e9 implementar um animal que passa pelas diversas fases de crescimento at\u00e9 a morte.\n\n- Descri\u00e7\u00e3o\n  - O animal tem uma esp\u00e9cie `species`, um est\u00e1gio `age` de vida e um barulho `sound` que ele faz.\n  - O construtor do animal\n    - Recebe a esp\u00e9cie e o barulho e inicia o est\u00e1gio com 0.\n  - O toString do animal deve retornar a representa\u00e7\u00e3o do animal no formato\n    - `{species}:{age}:{sound}`.\n  - Os est\u00e1gios pelos quais o animal passa s\u00e3o:\n    - 0: Filhote\n    - 1: Crian\u00e7a\n    - 2: Adulto\n    - 3: Idoso\n    - 4: Morto\n  - Ao envelhecer no m\u00e9todo `ageBy`, o animal avan\u00e7a est\u00e1gios na sua vida de acordo com o par\u00e2metro `increment`.\n    - Ao morrer ou tentar envelhecer ap\u00f3s a morte do aninal, deve ser exibida a mensagem de aviso:\n      - `warning: {species} morreu`.\n      - Como essa \u00e9 uma mensagem de erro, voc\u00ea pode imprimir diretamente no m\u00e9todo `ageBy`.\n  - Ao fazer barulho, o animal emite o som caracter\u00edstico da sua esp\u00e9cie, com as seguintes restri\u00e7\u00f5es:\n    - Se for filhote, emite um \"---\".\n    - Se estiver morto, emite um \"RIP\".\n    - Como n\u00e3o s\u00e3o mensagens de erro, o barulho do animal deve ser retornado no m\u00e9todo `makeSound` e impresso na `main`.\n\n## Guide\n\n- Implemente a sua classe se orientando pela descri\u00e7\u00e3o, pelo UML(se houver) e pelos testes cadastrados.\n- Come\u00e7e analisando os testes e entendendo tudo que seu c\u00f3digo precisa fazer.\n- Depois que tiver uma ideia do que vai implementar, se deixe guiar pelos testes, implementando apenas o que \u00e9 pedido para passar em cada teste.\n- Passe para o pr\u00f3ximo teste at\u00e9 implementar tudo que \u00e9 pedido.\n\n![_](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/animal/diagrama.png)\n\n- Na se\u00e7\u00e3o de [Cheat](#cheat) ou no v\u00eddeo abaixo, voc\u00ea pode conferir as respostas dessa atividade.\n\n[![youtube icon](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/animal/../yousolver.png)](https://youtu.be/QZfjLVrk7p8)\n\n## Shell\n\n### Primeira simula\u00e7\u00e3o\n\n```bash\n#TEST_CASE iniciando\n\n$init gato miau\n$show\ngato:0:miau\n\n$init cachorro auau\n$show\ncachorro:0:auau\n\n$init galinha cocorico\n$show\ngalinha:0:cocorico\n\n$end\n```\n\n### Segunda simula\u00e7\u00e3o\n\n```bash\n#TEST_CASE grow\n\n$init vaca muu\n$show\nvaca:0:muu\n\n$grow 2\n$show\nvaca:2:muu\n$grow 2\nwarning: vaca morreu\n$show\nvaca:4:muu\n$grow 3\nwarning: vaca morreu\n$show\nvaca:4:muu\n\n$end\n```\n\n### Terceira simula\u00e7\u00e3o\n\n```bash\n#TEST_CASE noise\n\n$init cabra beeh\n\n$noise\n---\n\n$grow 1\n$noise\nbeeh\n$grow 3\nwarning: cabra morreu\n\n$noise\nRIP\n\n$end\n```\n\n### Quarta simula\u00e7\u00e3o\n\n```bash\n#TEST_CASE extra\n\n$init passaro piupiu\n\n$show\npassaro:0:piupiu\n\n$noise\n---\n\n$grow 1\n$noise\npiupiu\n\n$grow 2\n$noise\npiupiu\n\n$grow 1\nwarning: passaro morreu\n\n$noise\nRIP\n\n$end\n```\n\n## Draft\n\n<!-- links .cache/draft -->\n- cpp\n  - [shell.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/animal/.cache/draft/cpp/shell.cpp)\n- java\n  - [Shell.java](https://github.com/qxcodepoo/arcade/blob/master/base/animal/.cache/draft/java/Shell.java)\n- ts\n  - [shell.ts](https://github.com/qxcodepoo/arcade/blob/master/base/animal/.cache/draft/ts/shell.ts)\n<!-- links -->\n\n## Cheat\n\n<!-- links .cache/cheat -->\n- cpp\n  - [shell.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/animal/.cache/cheat/cpp/shell.cpp)\n- java\n  - [Shell.java](https://github.com/qxcodepoo/arcade/blob/master/base/animal/.cache/cheat/java/Shell.java)\n- ts\n  - [shell.ts](https://github.com/qxcodepoo/arcade/blob/master/base/animal/.cache/cheat/ts/shell.ts)\n<!-- links -->\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT iniciando\ninit gato miau\nshow\ninit cachorro auau\nshow\ninit galinha cocorico\nshow\nend\n======== EXPECT\n$init gato miau\n$show\ngato:0:miau\n$init cachorro auau\n$show\ncachorro:0:auau\n$init galinha cocorico\n$show\ngalinha:0:cocorico\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT grow\ninit vaca muu\nshow\ngrow 2\nshow\ngrow 2\nshow\ngrow 3\nshow\nend\n======== EXPECT\n$init vaca muu\n$show\nvaca:0:muu\n$grow 2\n$show\nvaca:2:muu\n$grow 2\nwarning: vaca morreu\n$show\nvaca:4:muu\n$grow 3\nwarning: vaca morreu\n$show\nvaca:4:muu\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT noise\ninit cabra beeh\nnoise\ngrow 1\nnoise\ngrow 3\nnoise\nend\n======== EXPECT\n$init cabra beeh\n$noise\n---\n$grow 1\n$noise\nbeeh\n$grow 3\nwarning: cabra morreu\n$noise\nRIP\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT extra\ninit passaro piupiu\nshow\nnoise\ngrow 1\nnoise\ngrow 2\nnoise\ngrow 1\nnoise\nend\n======== EXPECT\n$init passaro piupiu\n$show\npassaro:0:piupiu\n$noise\n---\n$grow 1\n$noise\npiupiu\n$grow 2\n$noise\npiupiu\n$grow 1\nwarning: passaro morreu\n$noise\nRIP\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "function input() { return \"\"; };\nexport {};\n\nfunction main(): void {\n    // let animal: Animal = new Animal(\"\", \"\");\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(' ');\n        const cmd = par[0];\n        \n        if (cmd === \"end\") { \n            break;\n        } \n        else if (cmd === \"init\") {\n            // INICIE O ANIMAL UTILIZANDO O CONSTRUTOR\n            // let species = par[1];\n            // let noise = par[2];\n        } \n        else if (cmd === \"grow\") {\n            // AUMENTE A IDADE DO ANIMAL\n            // let increment = +par[1];\n        } \n        else if (cmd === \"noise\") {\n            // OBTENHA O BARULHO DO ANIMAL E IMPRIMA\n        } \n        else if (cmd === \"show\") {\n            // IMPRIMA O ANIMAL\n        }\n        else {\n            console.log(\"fail: comando invalido\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.Scanner;\n\npublic class Shell {\n\n    public static void main(String[] _args) {\n        // Animal animal = new Animal(\"\", \"\");\n\n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")  ) { \n                break;\n            }\n            else if (cmd.equals(\"init\") ) {\n                // INICIE O ANIMAL UTILIZANDO O CONSTRUTOR\n                // var species = par[1];\n                // var noise = par[2];\n            } \n            else if (cmd.equals(\"show\")) {\n                // MOSTRE O ANIMAL\n            } \n            else if (cmd.equals(\"noise\")) {\n                // OBTER O BARULHO DO ANIMAL E IMPRIMA\n            } \n            else if (cmd.equals(\"grow\") ) {\n                // AUMENTE A IDADE DO ANIMAL\n                // var increment = Integer.parseInt(par[1]);\n            }  \n            else {\n                System.out.println(\"fail: comando invalido\\n\");\n            }\n        }\n    }\n\n    static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <sstream>\nusing namespace std;\n\n\nint main () {\n    // CRIE SEU OBJETO AQUI\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << '\\n';\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        }\n        else if (cmd == \"init\" ) {\n            // INICIE SEU OBJETO AQUI USANDO O CONSTRUTOR\n            // string species, sound;\n            // ss >> species >> sound;\n        } \n        else if (cmd == \"show\" ) {\n            // IMPRIMA O ANIMAL\n        } \n        else if (cmd == \"grow\" ) {\n            // CHAME O M\u00c9TODO PARA CRESCER\n            // int increment {};\n            // ss >> increment;\n        } \n        else if (cmd == \"noise\") {\n            // OBTENHA O SOM DO ANIMAL E IMPRIMA\n        } \n        else {\n            cout << \"fail: comando invalido\\n\";\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
