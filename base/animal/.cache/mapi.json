{
    "title": "@animal: Animal que nasce, cresce, morre",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@animal: Animal que nasce, cresce, morre</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Animal que nasce, cresce, morre</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#cheat\">Cheat</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"cover\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/animal/cover.jpg\" /></p>\n<h2>Intro</h2>\n<p>O objetivo dessa atividade \u00e9 implementar um animal que passa pelas diversas fases de crescimento at\u00e9 a morte.</p>\n<ul>\n<li>Descri\u00e7\u00e3o<ul>\n<li>O animal tem uma esp\u00e9cie <code>species</code>, um est\u00e1gio <code>age</code> de vida e um barulho <code>sound</code> que ele faz.</li>\n<li>O construtor do animal<ul>\n<li>Recebe a esp\u00e9cie e o barulho e inicia o est\u00e1gio com 0.</li>\n</ul>\n</li>\n<li>O toString do animal deve retornar a representa\u00e7\u00e3o do animal no formato<ul>\n<li><code>{species}:{age}:{sound}</code>.</li>\n</ul>\n</li>\n<li>Os est\u00e1gios pelos quais o animal passa s\u00e3o:<ul>\n<li>0: Filhote</li>\n<li>1: Crian\u00e7a</li>\n<li>2: Adulto</li>\n<li>3: Idoso</li>\n<li>4: Morto</li>\n</ul>\n</li>\n<li>Ao envelhecer no m\u00e9todo <code>ageBy</code>, o animal avan\u00e7a est\u00e1gios na sua vida de acordo com o par\u00e2metro <code>increment</code>.<ul>\n<li>Ao morrer ou tentar envelhecer ap\u00f3s a morte do aninal, deve ser exibida a mensagem de aviso:<ul>\n<li><code>warning: {species} morreu</code>.</li>\n<li>Como essa \u00e9 uma mensagem de erro, voc\u00ea pode imprimir diretamente no m\u00e9todo <code>ageBy</code>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Ao fazer barulho, o animal emite o som caracter\u00edstico da sua esp\u00e9cie, com as seguintes restri\u00e7\u00f5es:<ul>\n<li>Se for filhote, emite um \"---\".</li>\n<li>Se estiver morto, emite um \"RIP\".</li>\n<li>Como n\u00e3o s\u00e3o mensagens de erro, o barulho do animal deve ser retornado no m\u00e9todo <code>makeSound</code> e impresso na <code>main</code>.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Guide</h2>\n<ul>\n<li>Implemente a sua classe se orientando pela descri\u00e7\u00e3o, pelo UML(se houver) e pelos testes cadastrados.</li>\n<li>Come\u00e7e analisando os testes e entendendo tudo que seu c\u00f3digo precisa fazer.</li>\n<li>Depois que tiver uma ideia do que vai implementar, se deixe guiar pelos testes, implementando apenas o que \u00e9 pedido para passar em cada teste.</li>\n<li>Passe para o pr\u00f3ximo teste at\u00e9 implementar tudo que \u00e9 pedido.</li>\n</ul>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/animal/diagrama.png\" /></p>\n<ul>\n<li>Na se\u00e7\u00e3o de <a href=\"#cheat\">Cheat</a> ou no v\u00eddeo abaixo, voc\u00ea pode conferir as respostas dessa atividade.</li>\n</ul>\n<p><a href=\"https://youtu.be/QZfjLVrk7p8\"><img alt=\"youtube icon\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/animal/../yousolver.png\" /></a></p>\n<h2>Shell</h2>\n<h3>Primeira simula\u00e7\u00e3o</h3>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE iniciando</span>\n\n<span class=\"nv\">$init</span><span class=\"w\"> </span>gato<span class=\"w\"> </span>miau\n<span class=\"nv\">$show</span>\ngato:0:miau\n\n<span class=\"nv\">$init</span><span class=\"w\"> </span>cachorro<span class=\"w\"> </span>auau\n<span class=\"nv\">$show</span>\ncachorro:0:auau\n\n<span class=\"nv\">$init</span><span class=\"w\"> </span>galinha<span class=\"w\"> </span>cocorico\n<span class=\"nv\">$show</span>\ngalinha:0:cocorico\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<h3>Segunda simula\u00e7\u00e3o</h3>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE grow</span>\n\n<span class=\"nv\">$init</span><span class=\"w\"> </span>vaca<span class=\"w\"> </span>muu\n<span class=\"nv\">$show</span>\nvaca:0:muu\n\n<span class=\"nv\">$grow</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nv\">$show</span>\nvaca:2:muu\n<span class=\"nv\">$grow</span><span class=\"w\"> </span><span class=\"m\">2</span>\nwarning:<span class=\"w\"> </span>vaca<span class=\"w\"> </span>morreu\n<span class=\"nv\">$show</span>\nvaca:4:muu\n<span class=\"nv\">$grow</span><span class=\"w\"> </span><span class=\"m\">3</span>\nwarning:<span class=\"w\"> </span>vaca<span class=\"w\"> </span>morreu\n<span class=\"nv\">$show</span>\nvaca:4:muu\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<h3>Terceira simula\u00e7\u00e3o</h3>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE noise</span>\n\n<span class=\"nv\">$init</span><span class=\"w\"> </span>cabra<span class=\"w\"> </span>beeh\n\n<span class=\"nv\">$noise</span>\n---\n\n<span class=\"nv\">$grow</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nv\">$noise</span>\nbeeh\n<span class=\"nv\">$grow</span><span class=\"w\"> </span><span class=\"m\">3</span>\nwarning:<span class=\"w\"> </span>cabra<span class=\"w\"> </span>morreu\n\n<span class=\"nv\">$noise</span>\nRIP\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<h3>Quarta simula\u00e7\u00e3o</h3>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE extra</span>\n\n<span class=\"nv\">$init</span><span class=\"w\"> </span>passaro<span class=\"w\"> </span>piupiu\n\n<span class=\"nv\">$show</span>\npassaro:0:piupiu\n\n<span class=\"nv\">$noise</span>\n---\n\n<span class=\"nv\">$grow</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nv\">$noise</span>\npiupiu\n\n<span class=\"nv\">$grow</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nv\">$noise</span>\npiupiu\n\n<span class=\"nv\">$grow</span><span class=\"w\"> </span><span class=\"m\">1</span>\nwarning:<span class=\"w\"> </span>passaro<span class=\"w\"> </span>morreu\n\n<span class=\"nv\">$noise</span>\nRIP\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<h2>Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/animal/.cache/draft/cpp/shell.cpp\">shell.cpp</a></li>\n</ul>\n</li>\n<li>java<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/animal/.cache/draft/java/Shell.java\">Shell.java</a></li>\n</ul>\n</li>\n<li>ts<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/animal/.cache/draft/ts/shell.ts\">shell.ts</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n\n<h2>Cheat</h2>\n<!-- links .cache/cheat -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/animal/.cache/cheat/cpp/shell.cpp\">shell.cpp</a></li>\n</ul>\n</li>\n<li>java<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/animal/.cache/cheat/java/Shell.java\">Shell.java</a></li>\n</ul>\n</li>\n<li>ts<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/animal/.cache/cheat/ts/shell.ts\">shell.ts</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT iniciando\ninit gato miau\nshow\ninit cachorro auau\nshow\ninit galinha cocorico\nshow\nend\n======== EXPECT\n$init gato miau\n$show\ngato:0:miau\n$init cachorro auau\n$show\ncachorro:0:auau\n$init galinha cocorico\n$show\ngalinha:0:cocorico\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT grow\ninit vaca muu\nshow\ngrow 2\nshow\ngrow 2\nshow\ngrow 3\nshow\nend\n======== EXPECT\n$init vaca muu\n$show\nvaca:0:muu\n$grow 2\n$show\nvaca:2:muu\n$grow 2\nwarning: vaca morreu\n$show\nvaca:4:muu\n$grow 3\nwarning: vaca morreu\n$show\nvaca:4:muu\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT noise\ninit cabra beeh\nnoise\ngrow 1\nnoise\ngrow 3\nnoise\nend\n======== EXPECT\n$init cabra beeh\n$noise\n---\n$grow 1\n$noise\nbeeh\n$grow 3\nwarning: cabra morreu\n$noise\nRIP\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT extra\ninit passaro piupiu\nshow\nnoise\ngrow 1\nnoise\ngrow 2\nnoise\ngrow 1\nnoise\nend\n======== EXPECT\n$init passaro piupiu\n$show\npassaro:0:piupiu\n$noise\n---\n$grow 1\n$noise\npiupiu\n$grow 2\n$noise\npiupiu\n$grow 1\nwarning: passaro morreu\n$noise\nRIP\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "function input() { return \"\"; };\nexport {};\n\nfunction main(): void {\n    // let animal: Animal = new Animal(\"\", \"\");\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(' ');\n        const cmd = par[0];\n        \n        if (cmd === \"end\") { \n            break;\n        } \n        else if (cmd === \"init\") {\n            // INICIE O ANIMAL UTILIZANDO O CONSTRUTOR\n            // let species = par[1];\n            // let noise = par[2];\n        } \n        else if (cmd === \"grow\") {\n            // AUMENTE A IDADE DO ANIMAL\n            // let increment = +par[1];\n        } \n        else if (cmd === \"noise\") {\n            // OBTENHA O BARULHO DO ANIMAL E IMPRIMA\n        } \n        else if (cmd === \"show\") {\n            // IMPRIMA O ANIMAL\n        }\n        else {\n            console.log(\"fail: comando invalido\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.Scanner;\n\npublic class Shell {\n\n    public static void main(String[] _args) {\n        // Animal animal = new Animal(\"\", \"\");\n\n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")  ) { \n                break;\n            }\n            else if (cmd.equals(\"init\") ) {\n                // INICIE O ANIMAL UTILIZANDO O CONSTRUTOR\n                // var species = par[1];\n                // var noise = par[2];\n            } \n            else if (cmd.equals(\"show\")) {\n                // MOSTRE O ANIMAL\n            } \n            else if (cmd.equals(\"noise\")) {\n                // OBTER O BARULHO DO ANIMAL E IMPRIMA\n            } \n            else if (cmd.equals(\"grow\") ) {\n                // AUMENTE A IDADE DO ANIMAL\n                // var increment = Integer.parseInt(par[1]);\n            }  \n            else {\n                System.out.println(\"fail: comando invalido\\n\");\n            }\n        }\n    }\n\n    static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <sstream>\nusing namespace std;\n\n\nint main () {\n    // CRIE SEU OBJETO AQUI\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << '\\n';\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        }\n        else if (cmd == \"init\" ) {\n            // INICIE SEU OBJETO AQUI USANDO O CONSTRUTOR\n            // string species, sound;\n            // ss >> species >> sound;\n        } \n        else if (cmd == \"show\" ) {\n            // IMPRIMA O ANIMAL\n        } \n        else if (cmd == \"grow\" ) {\n            // CHAME O M\u00c9TODO PARA CRESCER\n            // int increment {};\n            // ss >> increment;\n        } \n        else if (cmd == \"noise\") {\n            // OBTENHA O SOM DO ANIMAL E IMPRIMA\n        } \n        else {\n            cout << \"fail: comando invalido\\n\";\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
