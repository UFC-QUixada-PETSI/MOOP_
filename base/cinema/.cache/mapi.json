{
    "title": "@cinema: Gerenciando reservas e cancelamentos de uma sala de cinema",
    "description": "# Gerenciando reservas e cancelamentos de uma sala de cinema\n\n<!-- toch -->\n[Intro](#intro) | [Draft](#draft) | [Shell](#shell)\n-- | -- | --\n<!-- toch -->\n\n![cover](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/cinema/cover.jpg)\n\n## Intro\n\nO objetivo desta atividade \u00e9 implementar m\u00e9todos para manipular uma sala de cinema, permitindo a reserva, cancelamento e consulta de cadeiras.\n\n- **Descri\u00e7\u00e3o**\n  - A sala de cinema \u00e9 representada pela classe Sala `Theater`, que possui um conjunto de cadeiras, cada uma associada a um cliente ou vazia.\n  - Os m\u00e9todos a serem implementados permitir\u00e3o reservar uma cadeira para um cliente, cancelar a reserva de uma cadeira e consultar o estado das cadeiras na sala.\n  - Cada cadeira pode estar associada a um objeto Cliente `Client`, representando um cliente que reservou a cadeira, ou ser nula, indicando que a cadeira est\u00e1 vazia.\n  - Os m\u00e9todos fornecidos devem lidar com valida\u00e7\u00f5es, como verificar se a cadeira existe, se est\u00e1 ocupada e se o cliente j\u00e1 est\u00e1 presente na sala.\n\n- **Responsabilidades**\n  - A classe Sala `Theater` \u00e9 respons\u00e1vel por gerenciar as opera\u00e7\u00f5es relacionadas \u00e0s cadeiras na sala de cinema.\n    - M\u00e9todos a serem implementados:\n      - p\u00fablicos: s\u00e3o m\u00e9todos acessados por outras classes.\n        - `reserve(id: string, phone: number, index: number)`: Reserva uma cadeira para um cliente com o ID e telefone especificados.\n        - `cancel(id: string)`: Cancela a reserva de uma cadeira para o cliente com o ID especificado.\n        - `getSeats(): Array<Client | null>`: Retorna um array contendo o estado atual de todas as cadeiras na sala.\n        - `toString(): string`: Retorna uma representa\u00e7\u00e3o em string do estado atual das cadeiras na sala.\n      - privados: s\u00e3o m\u00e9todos apenas de uso interno, utilizados para auxiliar as opera\u00e7\u00f5es da classe.\n        - `search(name: string): int`: Procura o \u00edndice da cadeira reservada pelo cliente com o nome especificado.\n        - `verifyIndix(index: number)`: Verifica se um \u00edndice de cadeira \u00e9 v\u00e1lido na sala.\n  - A classe `Client` \u00e9 respons\u00e1vel por representar os clientes que reservam cadeiras na sala de cinema.\n    - A classe possui m\u00e9todos para obter e definir o ID e telefone do cliente, bem como uma representa\u00e7\u00e3o em string do cliente.\n\n![diagrama](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/cinema/diagrama.png)\n\n## Draft\n\n<!-- links .cache/draft -->\n- cpp\n  - [shell.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/cinema/.cache/draft/cpp/shell.cpp)\n- java\n  - [Shell.java](https://github.com/qxcodepoo/arcade/blob/master/base/cinema/.cache/draft/java/Shell.java)\n- ts\n  - [shell.ts](https://github.com/qxcodepoo/arcade/blob/master/base/cinema/.cache/draft/ts/shell.ts)\n<!-- links -->\n\n## Shell\n\n```bash\n#TEST_CASE init 1\n$show\n[]\n#TEST_CASE init 2\n$init 5\n$show\n[- - - - -]\n#TEST_CASE init 3\n$init 4\n$show\n[- - - -]\n$end\n```\n\n```sh\n#TEST_CASE reservas\n\n$init 4\n$reserve davi 3232 0\n$reserve joao 3131 3\n$show\n[davi:3232 - - joao:3131]\n\n#TEST_CASE ocupado\n\n$reserve rute 3030 0\nfail: cadeira ja esta ocupada\n\n#TEST_CASE duplicado\n\n$reserve davi 3234 2\nfail: cliente ja esta no cinema\n$end\n```\n\n```sh\n#TEST_CASE cadeira invalida\n\n$init 4\n$reserve davi 3232 5\nfail: cadeira nao existe\n\n#TEST_CASE cancelamentos\n\n$reserve davi 3232 0\n$reserve joao 3131 3\n$cancel davi\n$show\n[- - - joao:3131]\n\n#TEST_CASE cancelamentos errado\n\n$cancel rita\nfail: cliente nao esta no cinema\n$show\n[- - - joao:3131]\n$end\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT init 1\nshow\nend\n======== EXPECT\n$show\n[]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT init 2\nshow\ninit 5\nshow\nend\n======== EXPECT\n$show\n[]\n$init 5\n$show\n[- - - - -]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT init 3\nshow\ninit 5\nshow\ninit 4\nshow\nend\n======== EXPECT\n$show\n[]\n$init 5\n$show\n[- - - - -]\n$init 4\n$show\n[- - - -]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT reservas\ninit 4\nreserve davi 3232 0\nreserve joao 3131 3\nshow\nend\n======== EXPECT\n$init 4\n$reserve davi 3232 0\n$reserve joao 3131 3\n$show\n[davi:3232 - - joao:3131]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT ocupado\ninit 4\nreserve davi 3232 0\nreserve joao 3131 3\nshow\nreserve rute 3030 0\nend\n======== EXPECT\n$init 4\n$reserve davi 3232 0\n$reserve joao 3131 3\n$show\n[davi:3232 - - joao:3131]\n$reserve rute 3030 0\nfail: cadeira ja esta ocupada\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT duplicado\ninit 4\nreserve davi 3232 0\nreserve joao 3131 3\nshow\nreserve rute 3030 0\nreserve davi 3234 2\nend\n======== EXPECT\n$init 4\n$reserve davi 3232 0\n$reserve joao 3131 3\n$show\n[davi:3232 - - joao:3131]\n$reserve rute 3030 0\nfail: cadeira ja esta ocupada\n$reserve davi 3234 2\nfail: cliente ja esta no cinema\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT cadeira invalida\ninit 4\nreserve davi 3232 5\nend\n======== EXPECT\n$init 4\n$reserve davi 3232 5\nfail: cadeira nao existe\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT cancelamentos\ninit 4\nreserve davi 3232 5\nreserve davi 3232 0\nreserve joao 3131 3\ncancel davi\nshow\nend\n======== EXPECT\n$init 4\n$reserve davi 3232 5\nfail: cadeira nao existe\n$reserve davi 3232 0\n$reserve joao 3131 3\n$cancel davi\n$show\n[- - - joao:3131]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT cancelamentos errado\ninit 4\nreserve davi 3232 5\nreserve davi 3232 0\nreserve joao 3131 3\ncancel davi\nshow\ncancel rita\nshow\nend\n======== EXPECT\n$init 4\n$reserve davi 3232 5\nfail: cadeira nao existe\n$reserve davi 3232 0\n$reserve joao 3131 3\n$cancel davi\n$show\n[- - - joao:3131]\n$cancel rita\nfail: cliente nao esta no cinema\n$show\n[- - - joao:3131]\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\n\n\nfunction main() {\n\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(\" \");\n        const cmd = par[0];\n\n        if (cmd === \"end\") {\n            break;\n        } else if (cmd === \"show\") { \n        } else if (cmd === \"init\") {\n            // const seats = parseInt(par[1], 10);\n        } else if (cmd === \"reserve\") {\n            // const id = par[1];\n            // const phone = parseInt(par[2]);\n            // const index = parseInt(par[3], 10);\n        } else if (cmd === \"cancel\") {\n            // const id = par[1];\n        } else {\n            console.log(\"fail: comando invalido\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.Scanner;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n\npublic class Shell {\n    public static void main(String[] _args) {\n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var args = line.split(\" \");\n            var cmd = args[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"show\")) { \n            }\n            else if (cmd.equals(\"init\")) {\n                // var seats = Integer.parseInt(args[1]);\n            }\n            else if (cmd.equals(\"reserve\")) {\n                // var id = args[1];\n                // var phone = args[2];\n                // var index = Integer.parseInt(args[3]);\n            }\n            else if (cmd.equals(\"cancel\")) {\n                // var id = args[1];\n            }\n            else {\n                System.out.println(\"fail: comando invalido\");\n            }\n        }\n    }\n\n    private static Scanner scanner = new Scanner(System.in);\n\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include <sstream>\n#include <memory>\nusing namespace std;\n\ntemplate<class CONTAINER, class FUNC>\nstring map_join(const CONTAINER& c, FUNC f, string sep) {\n    stringstream ss;\n    for (auto it = c.begin(); it != c.end(); it++) {\n        ss << (it == c.begin() ? \"\" : sep);\n        ss << f(*it);\n    }\n    return ss.str();\n}\n\nint main() {\n\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;    \n        } else if (cmd == \"show\") {\n        } else if (cmd == \"init\") {\n            // int qtd;\n            // ss >> qtd;\n        } else if (cmd == \"reserve\") {\n            // string id, phone;\n            // int index;\n            // ss >> id >> phone >> index;\n        } else if (cmd == \"cancel\") {\n            // string id;\n            // ss >> id;\n        } else {\n            cout << \"fail: comando invalido\" << endl;\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
