{
    "title": "@cinema - Gerenciando reservas e cancelamentos de uma sala de cinema",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@cinema - Gerenciando reservas e cancelamentos de uma sala de\ncinema</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h1\nid=\"cinema---gerenciando-reservas-e-cancelamentos-de-uma-sala-de-cinema\"><span\nclass=\"citation\" data-cites=\"cinema\">@cinema</span> - Gerenciando\nreservas e cancelamentos de uma sala de cinema</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr class=\"header\">\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<!-- toch -->\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/cinema/cover.jpg\"\nalt=\"cover\" />\n<figcaption aria-hidden=\"true\">cover</figcaption>\n</figure>\n<h2 id=\"intro\">Intro</h2>\n<p>O objetivo desta atividade \u00e9 implementar m\u00e9todos para manipular uma\nsala de cinema, permitindo a reserva, cancelamento e consulta de\ncadeiras.</p>\n<ul>\n<li><strong>Descri\u00e7\u00e3o</strong>\n<ul>\n<li>A sala de cinema \u00e9 representada pela classe <code>Sala</code>, que\npossui um conjunto de cadeiras, cada uma associada a um cliente ou\nvazia.</li>\n<li>Os m\u00e9todos a serem implementados permitir\u00e3o reservar uma cadeira\npara um cliente, cancelar a reserva de uma cadeira e consultar o estado\ndas cadeiras na sala.</li>\n<li>Cada cadeira pode estar associada a um objeto <code>Client</code>,\nrepresentando um cliente que reservou a cadeira, ou ser nula, indicando\nque a cadeira est\u00e1 vazia.</li>\n<li>Os m\u00e9todos fornecidos devem lidar com valida\u00e7\u00f5es, como verificar se\na cadeira existe, se est\u00e1 ocupada e se o cliente j\u00e1 est\u00e1 presente na\nsala.</li>\n</ul></li>\n<li><strong>Responsabilidades</strong>\n<ul>\n<li>A classe <code>Sala</code> \u00e9 respons\u00e1vel por gerenciar as opera\u00e7\u00f5es\nrelacionadas \u00e0s cadeiras na sala de cinema.\n<ul>\n<li>M\u00e9todos a serem implementados:\n<ul>\n<li>p\u00fablicos: s\u00e3o m\u00e9todos acessados por outras classes.\n<ul>\n<li><code>reservar(id: string, fone: number, ind: number)</code>:\nReserva uma cadeira para um cliente com o ID e telefone\nespecificados.</li>\n<li><code>cancelar(id: string)</code>: Cancela a reserva de uma cadeira\npara o cliente com o ID especificado.</li>\n<li><code>getCadeiras(): Array(Client | null)</code>: Retorna um array\ncontendo o estado atual de todas as cadeiras na sala.</li>\n<li><code>toString(): string</code>: Retorna uma representa\u00e7\u00e3o em string\ndo estado atual das cadeiras na sala.</li>\n</ul></li>\n<li>privados: s\u00e3o m\u00e9todos apenas de uso interno, utilizados para\nauxiliar as opera\u00e7\u00f5es da classe.\n<ul>\n<li><code>procurar(nome: string): int</code>: Procura o \u00edndice da\ncadeira reservada pelo cliente com o nome especificado.</li>\n<li><code>verificarIndice(indice: number)</code>: Verifica se um \u00edndice\nde cadeira \u00e9 v\u00e1lido na sala.</li>\n</ul></li>\n</ul></li>\n</ul></li>\n<li>A classe <code>Client</code> \u00e9 respons\u00e1vel por representar os\nclientes que reservam cadeiras na sala de cinema.\n<ul>\n<li>A classe possui m\u00e9todos para obter e definir o ID e telefone do\ncliente, bem como uma representa\u00e7\u00e3o em string do cliente.</li>\n</ul></li>\n<li>A classe <code>Adapter</code> atua como uma ponte entre os m\u00e9todos\nde teste e as opera\u00e7\u00f5es da sala de cinema.\n<ul>\n<li>Ela integra os m\u00e9todos de teste com as opera\u00e7\u00f5es da sala de cinema,\npermitindo a execu\u00e7\u00e3o de comandos como reserva, cancelamento e consulta\nde cadeiras.</li>\n</ul></li>\n</ul></li>\n</ul>\n<h2 id=\"guide\">Guide</h2>\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/cinema/diagrama.png\"\nalt=\"diagrama\" />\n<figcaption aria-hidden=\"true\">diagrama</figcaption>\n</figure>\n<h3 id=\"parte-1-reservar-cadeira\">Parte 1: Reservar Cadeira</h3>\n<ul>\n<li><p><strong>Passo 1:</strong> Crie a classe <code>Client</code> com\nos atributos <code>id</code> e <code>fone</code>. Lembre de implementar\nos gets e os sets. Crie tamb\u00e9m o m\u00e9todo toString. Exemplo de retorno:\n<code>joao:3131</code>.</p></li>\n<li><p><strong>Passo 2:</strong> Crie a classe <code>Sala</code> com o\natributo <code>cadeiras</code>, um array de cadeiras que pode conter\nobjetos <code>Client</code> ou ser nulo. Ao inicializar o array de\ncadeiras no construtor, todas as posi\u00e7\u00f5es devem ser nulas.</p></li>\n<li><p><strong>Passo 3:</strong> Implemente o m\u00e9todo\n<code>toString(): string</code> na classe <code>Sala</code>:</p>\n<ul>\n<li>Percorra o array de cadeiras.</li>\n<li>Para cada cadeira ocupada, adicione a representa\u00e7\u00e3o do cliente \u00e0\nstring resultante.</li>\n<li>Para cadeiras vazias, adicione \u2018-\u2019 \u00e0 string resultante.</li>\n<li>Exemplo: <code>[davi:3232 - - joao:3131]</code></li>\n</ul></li>\n<li><p><strong>Passo 4:</strong> Implemente o m\u00e9todo\n<code>procurar(nome: string): number</code> na classe\n<code>Sala</code>:</p>\n<ul>\n<li>Percorra o array de cadeiras.</li>\n<li>Se encontrar uma cadeira ocupada com o ID fornecido, retorne o\n\u00edndice da cadeira.</li>\n<li>Se n\u00e3o encontrar, retorne -1.</li>\n</ul></li>\n<li><p><strong>Passo 5:</strong> Implemente o m\u00e9todo\n<code>verificarIndice(indice: number): boolean</code> na classe\n<code>Sala</code>:</p>\n<ul>\n<li>Verifique se o \u00edndice fornecido est\u00e1 dentro dos limites do array de\ncadeiras.</li>\n<li>Retorne true se estiver dentro dos limites, caso contr\u00e1rio, retorne\nfalse.</li>\n</ul></li>\n<li><p><strong>Passo 6:</strong> Implemente o m\u00e9todo\n<code>reservar(id: string, fone: number, ind: number): boolean</code> na\nclasse <code>Sala</code>:</p>\n<ul>\n<li>Verifique se o \u00edndice da cadeira fornecido \u00e9 v\u00e1lido. Se n\u00e3o for,\nemita a mensagem de erro <code>fail: cadeira nao existe</code>.</li>\n<li>Verifique se a cadeira est\u00e1 vazia. Se n\u00e3o estiver, emita a mensagem\nde erro <code>fail: cadeira ja esta ocupada</code>.</li>\n<li>Verifique se o cliente j\u00e1 est\u00e1 na sala. Se estiver, emita a mensagem\nde erro <code>fail: cliente ja esta no cinema</code>.</li>\n<li>Se todas as verifica\u00e7\u00f5es passarem, crie um novo objeto\n<code>Client</code> e insira na cadeira.</li>\n<li>Retorne true se a reserva for bem-sucedida, caso contr\u00e1rio, retorne\nfalse.</li>\n</ul></li>\n<li><p><strong>Passo 7:</strong> Implemente o m\u00e9todo\n<code>cancelar(id: string): void</code> na classe <code>Sala</code>:</p>\n<ul>\n<li>Verifique se o cliente est\u00e1 na sala. Se n\u00e3o estiver, emita a\nmensagem de erro <code>fail: cliente nao esta no cinema</code>.</li>\n<li>Se estiver, remova o cliente da cadeira.</li>\n</ul></li>\n<li><p><strong>Passo 8:</strong> Crie um objeto <code>sala</code> e\nverifique se est\u00e1 vazia.</p></li>\n<li><p><strong>Passo 9:</strong> Reserva uma cadeira para um cliente\nusando o m\u00e9todo <code>reservar(id, fone, ind)</code>.</p></li>\n<li><p><strong>Passo 10:</strong> Verifique se a cadeira foi reservada\ncorretamente.</p></li>\n</ul>\n<h3 id=\"parte-2-cancelar-reserva-de-cadeira\">Parte 2: Cancelar Reserva\nde Cadeira</h3>\n<ul>\n<li><p><strong>Passo 1:</strong> Tente cancelar a reserva de uma cadeira\nusando o m\u00e9todo <code>cancelar(id)</code>.</p></li>\n<li><p><strong>Passo 2:</strong> Verifique se a reserva foi cancelada\ncorretamente.</p></li>\n</ul>\n<h3 id=\"parte-3-consultar-estado-das-cadeiras\">Parte 3: Consultar Estado\ndas Cadeiras</h3>\n<ul>\n<li><p><strong>Passo 1:</strong> Chame o m\u00e9todo <code>toString()</code>\nda sala para obter uma representa\u00e7\u00e3o do estado atual das\ncadeiras.</p></li>\n<li><p><strong>Passo 2:</strong> Verifique se a representa\u00e7\u00e3o das\ncadeiras est\u00e1 correta.</p></li>\n</ul>\n<h3 id=\"integra\u00e7\u00e3o-com-a-classe-adapter\">Integra\u00e7\u00e3o com a Classe\nAdapter</h3>\n<ul>\n<li><strong>Passo 1:</strong> Utilize a classe <code>Adapter</code> para\nintegrar os m\u00e9todos de reserva, cancelamento e consulta de cadeiras na\nsala de cinema.</li>\n</ul>\n<h2 id=\"draft\">Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp\n<ul>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/cinema/.cache/draft/cpp/adapter.hpp\">adapter.hpp</a></li>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/cinema/.cache/draft/cpp/flow.hpp\">flow.hpp</a></li>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/cinema/.cache/draft/cpp/shell.cpp\">shell.cpp</a></li>\n</ul></li>\n<li>java\n<ul>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/cinema/.cache/draft/java/Adapter.java\">Adapter.java</a></li>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/cinema/.cache/draft/java/Shell.java\">Shell.java</a></li>\n</ul></li>\n<li>ts\n<ul>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/cinema/.cache/draft/ts/aashell.ts\">aashell.ts</a></li>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/cinema/.cache/draft/ts/adapter.ts\">adapter.ts</a>\n<!-- links --></li>\n</ul></li>\n</ul>\n<h2 id=\"shell\">Shell</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE init 1</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[]</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE init 2</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$init</span> 5</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[-</span> <span class=\"at\">-</span> <span class=\"at\">-</span> <span class=\"at\">-</span> <span class=\"at\">-]</span></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE init 3</span></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$init</span> 4</span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[-</span> <span class=\"at\">-</span> <span class=\"at\">-</span> <span class=\"at\">-]</span></span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE reservas</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$init</span> 4</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$reservar</span> davi 3232 0</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$reservar</span> joao 3131 3</span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[davi:3232</span> <span class=\"at\">-</span> <span class=\"at\">-</span> joao:3131]</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE ocupado</span></span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$reservar</span> rute 3030 0</span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">fail:</span> cadeira ja esta ocupada</span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE duplicado</span></span>\n<span id=\"cb2-15\"><a href=\"#cb2-15\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-16\"><a href=\"#cb2-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$reservar</span> davi 3234 2</span>\n<span id=\"cb2-17\"><a href=\"#cb2-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">fail:</span> cliente ja esta no cinema</span>\n<span id=\"cb2-18\"><a href=\"#cb2-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE cadeira invalida</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$init</span> 4</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$reservar</span> davi 3232 5</span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">fail:</span> cadeira nao existe</span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE cancelamentos</span></span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$reservar</span> davi 3232 0</span>\n<span id=\"cb3-10\"><a href=\"#cb3-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$reservar</span> joao 3131 3</span>\n<span id=\"cb3-11\"><a href=\"#cb3-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$cancelar</span> davi</span>\n<span id=\"cb3-12\"><a href=\"#cb3-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb3-13\"><a href=\"#cb3-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[-</span> <span class=\"at\">-</span> <span class=\"at\">-</span> joao:3131]</span>\n<span id=\"cb3-14\"><a href=\"#cb3-14\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-15\"><a href=\"#cb3-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE cancelamentos errado</span></span>\n<span id=\"cb3-16\"><a href=\"#cb3-16\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-17\"><a href=\"#cb3-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$cancelar</span> rita</span>\n<span id=\"cb3-18\"><a href=\"#cb3-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">fail:</span> cliente nao esta no cinema</span>\n<span id=\"cb3-19\"><a href=\"#cb3-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb3-20\"><a href=\"#cb3-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[-</span> <span class=\"at\">-</span> <span class=\"at\">-</span> joao:3131]</span>\n<span id=\"cb3-21\"><a href=\"#cb3-21\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "#INPUT############################################ init 1\nshow\nend\n#OUTPUT===========================================\n$show\n[]\n$end\n#END##############################################\n\n#INPUT############################################ init 2\nshow\ninit 5\nshow\nend\n#OUTPUT===========================================\n$show\n[]\n$init 5\n$show\n[- - - - -]\n$end\n#END##############################################\n\n#INPUT############################################ init 3\nshow\ninit 5\nshow\ninit 4\nshow\nend\n#OUTPUT===========================================\n$show\n[]\n$init 5\n$show\n[- - - - -]\n$init 4\n$show\n[- - - -]\n$end\n#END##############################################\n\n#INPUT############################################ reservas\ninit 4\nreservar davi 3232 0\nreservar joao 3131 3\nshow\nend\n#OUTPUT===========================================\n$init 4\n$reservar davi 3232 0\n$reservar joao 3131 3\n$show\n[davi:3232 - - joao:3131]\n$end\n#END##############################################\n\n#INPUT############################################ ocupado\ninit 4\nreservar davi 3232 0\nreservar joao 3131 3\nshow\nreservar rute 3030 0\nend\n#OUTPUT===========================================\n$init 4\n$reservar davi 3232 0\n$reservar joao 3131 3\n$show\n[davi:3232 - - joao:3131]\n$reservar rute 3030 0\nfail: cadeira ja esta ocupada\n$end\n#END##############################################\n\n#INPUT############################################ duplicado\ninit 4\nreservar davi 3232 0\nreservar joao 3131 3\nshow\nreservar rute 3030 0\nreservar davi 3234 2\nend\n#OUTPUT===========================================\n$init 4\n$reservar davi 3232 0\n$reservar joao 3131 3\n$show\n[davi:3232 - - joao:3131]\n$reservar rute 3030 0\nfail: cadeira ja esta ocupada\n$reservar davi 3234 2\nfail: cliente ja esta no cinema\n$end\n#END##############################################\n\n#INPUT############################################ cadeira invalida\ninit 4\nreservar davi 3232 5\nend\n#OUTPUT===========================================\n$init 4\n$reservar davi 3232 5\nfail: cadeira nao existe\n$end\n#END##############################################\n\n#INPUT############################################ cancelamentos\ninit 4\nreservar davi 3232 5\nreservar davi 3232 0\nreservar joao 3131 3\ncancelar davi\nshow\nend\n#OUTPUT===========================================\n$init 4\n$reservar davi 3232 5\nfail: cadeira nao existe\n$reservar davi 3232 0\n$reservar joao 3131 3\n$cancelar davi\n$show\n[- - - joao:3131]\n$end\n#END##############################################\n\n#INPUT############################################ cancelamentos errado\ninit 4\nreservar davi 3232 5\nreservar davi 3232 0\nreservar joao 3131 3\ncancelar davi\nshow\ncancelar rita\nshow\nend\n#OUTPUT===========================================\n$init 4\n$reservar davi 3232 5\nfail: cadeira nao existe\n$reservar davi 3232 0\n$reservar joao 3131 3\n$cancelar davi\n$show\n[- - - joao:3131]\n$cancelar rita\nfail: cliente nao esta no cinema\n$show\n[- - - joao:3131]\n$end\n#END##############################################\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "ts": [
            {
                "name": "adapter.ts",
                "contents": "class Adapter {\n    constructor(capacidade: number) {\n    }\n\n    reservar(id: string, fone: number, ind: number): void {\n    }\n\n    cancelar(id: string): void {\n    }\n\n    toString(): string {\n        return \"\";\n    }\n\n}\n\nexport {Adapter};",
                "encoding": 0
            },
            {
                "name": "aashell.ts",
                "contents": "import { Adapter } from \"./adapter\";\n\nfunction input(): string { let X: any = input; X.L = X.L || require(\"fs\").readFileSync(0).toString().split(/\\r?\\n/); return X.L.shift(); } // _TEST_ONLY_\n// function input(): string { let X: any = input; X.P = X.P || require(\"readline-sync\"); return X.P.question() } // _FREE_ONLY_\nfunction write(text: any, endl=\"\\n\") { process.stdout.write(\"\" + text + endl); }\n\nfunction main() {\n    let adp = new Adapter(0);\n\n    while (true) {\n        write(\"$\", \"\");\n        let line = input();\n        write(line); // _TEST_ONLY_\n        let args = line.split(\" \");\n\n        if      (args[0] == \"end\")      { break; }\n        else if (args[0] == \"init\")     { adp = new Adapter(+args[1]); }\n        else if (args[0] == \"show\")     { write(adp.toString()); }\n        else if (args[0] == \"reservar\") { adp.reservar(args[1], args[2], +args[3]); }\n        else if (args[0] == \"cancelar\") { adp.cancelar(args[1]); }\n        else                            { console.log(\"fail: comando invalido\"); }\n    }\n}\n\n\n\nmain();",
                "encoding": 0
            }
        ],
        "java": [
            {
                "name": "Adapter.java",
                "contents": "public class Adapter {\n  public Adapter(int capacidade) {\n  }\n\n  public void reservar(String id, String fone, int ind) {\n  }\n\n  public void cancelar(String id) {\n  }\n\n  public String toString() {\n    return \"\";\n  }\n}\n",
                "encoding": 0
            },
            {
                "name": "Shell.java",
                "contents": "import java.util.Scanner;\n\npublic class Shell {\n    public static void main(String[] _args) {\n        Adapter adp = new Adapter(0);\n        while (true) {\n            var line = input();\n            var args = line.split(\" \");\n            write('$' + line);\n\n            if (args[0].equals(\"end\")) { break; }\n            else if (args[0].equals(\"init\"))     { adp = new Adapter(Integer.parseInt(args[1])); }\n            else if (args[0].equals(\"show\"))     { write(adp.toString()); }\n            else if (args[0].equals(\"reservar\")) { adp.reservar(args[1], args[2], (int) number(args[3])); }\n            else if (args[0].equals(\"cancelar\")) { adp.cancelar(args[1]); }\n            else                                 { write(\"fail: comando invalido\"); }\n        }\n    }\n\n    private static Scanner scanner = new Scanner(System.in);\n    private static String input() { return scanner.nextLine(); }\n    private static double number(String value) { return Double.parseDouble(value); }\n    private static void write(String value) { System.out.println(value); }\n}\n",
                "encoding": 0
            }
        ],
        "cpp": [
            {
                "name": "flow.hpp",
                "contents": "//--------------------------------------------------------\n// BIBLIOTECA HEADER ONLY PARA C++ \n//     MANIPULA\u00c7\u00c3O DE TEXTO\n//         Text, Format, Write, Parse, Unpack, Split, Join\n//     E PROGRAMA\u00c7\u00c3O FUNCIONAL\n//         Map, Filter, Slice, Enumerate, Zip, ZipWith, Foreach\n//     E ESTRUTURA PARA CRIAR E MANIPULAR PIPES\n//         Pipe, Chain\n//     EM MODO FUN\u00c7\u00c3O E MODO PIPELINE\n//--------------------------------------------------------\n//  VERS\u00c3O 2.0.0\n//  https://github.com/senapk/flow\n//--------------------------------------------------------\n\n#pragma once\n#include <iostream>\n#include <sstream>\n\n#ifndef FLOW\n#include <vector>\n#include <list>\n#include <array>\n#include <set>\n#include <unordered_set>\n#include <map>\n#include <unordered_map>\n#endif\n\n\nnamespace fw {\n\n\n//-------------------- PIPE -----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\ntemplate <typename FN_ONE>\nclass Pipe {\n    FN_ONE fn;\npublic:\n    Pipe(FN_ONE fn): fn(fn) {}\n    template <typename T>        auto operator()(T data) const            { return fn(data); }\n    template <typename T> friend auto operator| (T data, const Pipe& obj) { return obj(data); }\n};\n\n//-------------------- CHAIN -----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\n// class to store a chain of functions and apply them in sequence\n// to a given data when operator () is called\n\ntemplate<typename... Args>\nclass Chain {\n    std::tuple<Args...> args;\npublic:\n    Chain(Args ...args): args(std::forward<Args>(args)...){}\n    template <typename T>\n    auto operator()(const T& data) const {\n        return std::apply([&data](auto&&... fns) { return (fns(data), ...); }, args);\n    }\n    template <typename T> \n    friend auto operator| (const T& data, Chain obj) { return obj(data); }\n};\n\n\n//-------------------- INPUT -----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\n//[[input]]\n/**\n * @note #### `input(istream source = std::cin) -> str`\n * \n * @note - Extrai uma linha inteira e retorna como string.\n * @note - O padr\u00e3o \u00e9 o std::cin, mas pode ser um fluxo ou arquivo.\n * @note - Se n\u00e3o houver mais linhas, lan\u00e7a uma exce\u00e7\u00e3o.\n * \n * @note #### Par\u00e2metros\n * @note `param: source` Origem da linha.\n * @note `return` Linha lida.\n * @note `throws: std::runtime_error` Caso n\u00e3o haja mais linhas.\n * \n * @note #### Exemplos\n * @note `auto line = input();`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/flow#input\n */\ninline std::string input(std::istream & is = std::cin)\n//[[input]]\n{\n    std::string line;\n    if (std::getline(is, line))\n        return line;\n    throw std::runtime_error(\"input empty\");\n}\n\nstruct Input {\n/**\n * @note #### `input(istream source = std::cin) -> str`\n * \n * @note - Extrai uma linha inteira e retorna como string.\n * @note - O padr\u00e3o \u00e9 o std::cin, mas pode ser um fluxo ou arquivo.\n * @note - Se n\u00e3o houver mais linhas, lan\u00e7a uma exce\u00e7\u00e3o.\n * \n * @note #### Par\u00e2metros\n * @note `param: source` Origem da linha.\n * @note `return` Linha lida.\n * @note `throws: std::runtime_error` Caso n\u00e3o haja mais linhas.\n * \n * @note #### Exemplos\n * @note `auto line = input();`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/flow#input\n */\n    Input() {}\n    std::string        operator()(std::istream& is = std::cin) const { return input(is); }\n    friend std::string operator| (std::istream& is, const Input& obj) { return obj(is); }\n};\n\n//-------------------- RANGE -----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\n// [[range]]\n/**\n * @note #### `range(int init, int end, int step = 1) -> vector<int>`\n * \n * @note - Gera um vetor de inteiros de init at\u00e9 end, mas n\u00e3o incluindo end, com passo step.\n * \n * @note #### Par\u00e2metros\n * @note `param: init` in\u00edcio.\n * @note `param: end` limite superior.\n * @note `param: step` passo do incremento.\n * @note `return` vetor de inteiros.\n * \n * @note #### Exemplos\n * @note `range(0, 10) | Join() | Write(); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\n * @note `range(0, 10, 2) | Join() | Write(); // [0, 2, 4, 6, 8]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/flow#range\n */\ninline std::vector<int> range(int init, int end, int step = 1)\n//[[range]]\n{\n    if (step == 0)\n        throw std::runtime_error(\"step cannot be zero\");\n    std::vector<int> aux;\n    if (step > 0) {\n        for (int i = init; i < end; i += step) {\n            aux.push_back(i);\n        }\n    } else {\n        for (int i = init; i > end; i += step) {\n            aux.push_back(i);\n        }\n    }\n    return aux;\n}\n\n/**\n * @note #### `range(int end) -> vector<int>`\n * \n * @note - Gera um vetor de inteiros de 0 at\u00e9 end, mas n\u00e3o incluindo end, com passo 1.\n * \n * @note #### Par\u00e2metros\n * @note `param: end` limite superior.\n * @note `return` vetor de inteiros.\n * \n * @note #### Exemplos\n * @note `range(10) | Join() | Write(); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/flow#range\n */\ninline std::vector<int> range(int end)\n{\n    return range(0, end, 1);\n}\n\nstruct Range {\n/**\n * @note #### `range(int end) -> vector<int>`\n * \n * @note - Gera um vetor de inteiros de 0 at\u00e9 end, mas n\u00e3o incluindo end, com passo 1.\n * \n * @note #### Par\u00e2metros\n * @note `param: end` limite superior.\n * @note `return` vetor de inteiros.\n * \n * @note #### Exemplos\n * @note `range(10) | Join() | Write(); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/flow#range\n */\n    Range() : init(0), step(1) {};\n\n    std::vector<int> operator()(int end) const {\n        return range(init, end, step);\n    }\n\n    friend std::vector<int> operator|(int end, const Range& obj) {\n        return obj(end);\n    }\n\n    int init {0};\n    int end {0};\n    int step {0};\n};\n\n//-------------------- TEXT HEADER  ----------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\ntemplate <typename T>\ninline std::string text(const T& data, const std::string& cfmt = \"\");\n\n//-------------------- JOIN  -----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\nnamespace hide {\n    template <typename CONTAINER, typename FN> \n    std::string __join(const CONTAINER& container, const std::string& separator, FN fn) \n    { \n        std::stringstream ss;\n        for (auto it = container.begin(); it != container.end(); ++it) {\n            ss << (it == container.begin() ? \"\" : separator);\n            ss << fn(*it);\n        }\n        return ss.str();\n    }\n\n    template <typename FN>\n    std::string __join(const char * data, const std::string& separator, FN fn) \n    { \n        (void) separator;\n        return fn(data);\n    }\n\n    template <typename... Ts, typename FN>\n    std::string __join(std::tuple<Ts...> const &the_tuple, const std::string& separator, FN fn)\n    {\n        std::stringstream ss;\n        std::apply( [&](Ts const &...tuple_args) {\n                std::size_t n{0};\n                ((ss << fn(tuple_args) << (++n != sizeof...(Ts) ? separator : \"\")), ...);\n            }, the_tuple);\n        return ss.str();\n    }\n\n    template <typename T1, typename T2, typename FN>\n    std::string __join(const std::pair<T1, T2>& the_pair, const std::string& separator, FN fn)\n    {\n        std::stringstream ss;\n        ss << fn(the_pair.first) << separator << fn(the_pair.second);\n        return ss.str();\n    }\n}\n\n//[[join]]\n/**\n * @note #### `join(T container, str separator = \", \", str cfmt = \"\") -> str`\n * @note #### `T container| Join(str separator = \", \", str cfmt = \"\") -> str`\n * \n * @note - Transforma um container, par ou tupla em string.\n * @note - Se os elementos n\u00e3o forem strings, eles ser\u00e3o transformados pela fun\u00e7\u00e3o `text`.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` Container a ser transformado em string.\n * @note `param: separtor` demilitador utilizado para juntar os elementos.\n * @note `param: cfmt` forta\u00e7\u00e3o a ser aplicada em cada elemento do container.\n * @note `return` String com os elementos concatenados.\n * \n * @note  #### Exemplos\n * @note `join(vector<int>{1, 2, 3}, \" \") | Write(); // \"1 2 3\"`\n * @note `vector<int>{1, 2, 3} | Join(\"=\") | Write(); // \"1=2=3\"`\n * @note `vector<int>{1, 2, 3} | Join(\"; \") | Text(\"[{}]\") | Write(); // \"[1; 2; 3]\"`\n * @note `vector<int>{1, 2, 3} | Join(\"; \", \"%02d\") | Text(\"[{}]\") | Write(); // \"[01; 02; 03]\"`\n * \n * @note  #### Mais exemplos em https://github.com/senapk/flow#join\n */\ntemplate <typename T>\nstd::string join(const T& container, const std::string& separator = \", \", const std::string& cfmt = \"\")\n//[[join]]\n{\n    return hide::__join(container, separator, [&](auto x) { return text(x, cfmt);});  //debug\n}\n\nstruct Join {\n    std::string separator;\n    std::string cfmt;\n\n/**\n * @note #### `join(T container, str separator = \", \", str cfmt = \"\") -> str`\n * @note #### `T container| Join(str separator = \", \", str cfmt = \"\") -> str`\n * \n * @note - Transforma um container, par ou tupla em string.\n * @note - Se os elementos n\u00e3o forem strings, eles ser\u00e3o transformados pela fun\u00e7\u00e3o `text`.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` Container a ser transformado em string.\n * @note `param: separtor` demilitador utilizado para juntar os elementos.\n * @note `param: cfmt` forta\u00e7\u00e3o a ser aplicada em cada elemento do container.\n * @note `return` String com os elementos concatenados.\n * \n * @note  #### Exemplos\n * @note `join(vector<int>{1, 2, 3}, \" \") | Write(); // \"1 2 3\"`\n * @note `vector<int>{1, 2, 3} | Join(\"=\") | Write(); // \"1=2=3\"`\n * @note `vector<int>{1, 2, 3} | Join(\"; \") | Text(\"[{}]\") | Write(); // \"[1; 2; 3]\"`\n * @note `vector<int>{1, 2, 3} | Join(\"; \", \"%02d\") | Text(\"[{}]\") | Write(); // \"[01; 02; 03]\"`\n * \n * @note  #### Mais exemplos em https://github.com/senapk/flow#join\n */\n    Join(const std::string& separator = \", \", const std::string& cfmt = \"\") : separator(separator), cfmt(cfmt) {}\n    template <typename CONTAINER> std::string operator()(const CONTAINER& v) const { return join(v, separator, cfmt); }\n    template <typename T> friend std::string operator|(const T& v, const Join& obj) { return obj(v); }\n};\n\n//-------------------- TEXT ------------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\nnamespace hide {\nclass Braces {\n    public:\n        //transforma {{ em \\a e }} em \\b\n    static std::string preprocess(std::string data) {\n        std::string result1;\n        data.push_back('_');\n        for (int i = 0; i < (int) data.size() - 1; i++) {\n            if (data[i] == '{' && data[i + 1] == '{') {\n                result1.push_back('\\a');\n                i++;\n            } else {\n                result1.push_back(data[i]);\n            }\n        }\n        std::string result2;\n        for (int i = result1.size() - 1; i >= 0; i--) {\n            if (result1[i] == '}' && result1[i - 1] == '}') {\n                result2.push_back('\\b');\n                i--;\n            } else {\n                result2.push_back(result1[i]);\n            }\n        }\n        std::string final_result;\n        for (int i = result2.size() - 1; i >= 0; i--) {\n            final_result.push_back(result2[i]);\n        }\n        return final_result;\n    }\n\n    static std::pair<std::vector<std::string>, std::vector<std::string>> extract(std::string data)\n    {\n        data = preprocess(data);\n        std::vector<std::string> texts = {\"\"};\n        std::vector<std::string> ctrls = {\"\"};\n        auto* destiny = &texts;\n\n        for (char c : data) {\n            if (c == '{') \n            {\n                texts.push_back(\"\");\n                destiny = &ctrls;\n            }\n            else if (c == '}') \n            {\n                ctrls.push_back(\"\");\n                destiny = &texts;\n            }\n            else\n            {\n                if (c == '\\a') {\n                    c = '{';\n                } else if (c == '\\b') {\n                    c = '}';\n                }\n                destiny->back().append(std::string(1,c));\n            }\n        }\n        while (texts.size() > ctrls.size())\n            ctrls.push_back(\"\");\n        return {texts, ctrls};\n    }\n\n    static std::string combine(const std::vector<std::string>& texts, const std::vector<std::string>& vars) {\n        if(vars.size() < texts.size() - 1) {\n            throw std::out_of_range(\"\");\n        }\n        std::stringstream ss;\n        for (size_t i = 0; i < vars.size(); i++)\n            ss << texts[i] << vars[i];\n        ss << texts.back(); //ultimo texto\n        return ss.str();\n    }\n};\n\nclass Align {\n    char align_mode { 0 }; //< > or ^, default is center\n    int  align_size { 0 }; //size of the field\n    char pad_char   { ' ' }; //char used to pad the field\n    std::string format { \"\" }; //filtered format string\n\n    bool extract_align() {\n        std::string align_str_size;\n\n        size_t i {0}, j {0};\n        for (i = 0; i < format.size(); ++i) {\n            if (format[i] == '<' || format[i] == '>' || format[i] == '^') { //achei o alinhamento\n                this->align_mode = format[i];\n\n                for (j = i + 1; j < format.size(); ++j) { //extraindo o tamanho do alinhamento\n                    if (format[j] >= '0' && format[j] <= '9') {\n                        align_str_size += format[j];\n                    } else { // terminou o tamanho\n                        break;\n                    }\n                }\n                if (align_str_size.empty()) {\n                    this->align_size = 0;\n                    std::cout << \"fail: format symbol `\" << format[i] << \"` must be followed by a size\\n\";\n                    exit(1);\n                }\n                this->align_size = std::stoi(align_str_size);\n                this->format.erase(i, j - i);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    void extract_pad() {\n        // search for : char in format, if exists and is followed by a char, \n        // then use that char as padding, and remove both from string\n        auto pos = this->format.find(':');\n        if (pos != std::string::npos) {\n            if (pos + 1 < format.size()) {\n                this->pad_char = format[pos + 1];\n                this->format.erase(pos, 2);\n            } else {\n                std::cout << \"fail: format symbol `:` must be followed by a padding char\\n\";\n                exit(1);\n            }\n        }\n    }\npublic:\n\n    Align(const std::string& format) {\n        this->format = format;\n        this->extract_pad();\n        this->extract_align();\n    }\n\n    std::string align_text(const std::string& str) {\n        int len = str.length();\n        if(this->align_mode == 0 || this->align_size < len) { \n            return str; \n        }\n        int diff = this->align_size - len;\n        \n        //default is center\n        int padleft = diff/2;\n        int padright = diff - padleft;\n        if(this->align_mode == '>') {\n            padleft = diff;\n            padright = 0;\n        }\n        else if(this->align_mode == '<') {\n            padleft = 0;\n            padright = diff;\n        }\n        return std::string(padleft, this->pad_char) + str + std::string(padright, this->pad_char);\n    }\n\n    const std::string& get_filtered_format() {\n        return this->format;\n    }\n    int get_align_size() {\n        return this->align_size;\n    }\n    char get_pad_char() {\n        return this->pad_char;\n    }\n    char get_align_mode() {\n        return this->align_mode;\n    }\n};\n}\n\nclass Text {\n\n    template <typename T>\n    static inline std::string ss_transform(const T& data) {\n        std::ostringstream ss;\n        ss << data;\n        return ss.str();\n    }\n\n    template <typename... Ts>\n    static inline std::string cformat(const std::string &fmt, Ts... vs) {\n        auto __format = [](const std::string &fmt, auto... vs) {\n            char b;\n            size_t required = std::snprintf(&b, 0, fmt.c_str(), vs...) + 1;\n            char bytes[required];\n            std::snprintf(bytes, required, fmt.c_str(), vs...);\n            return std::string(bytes);\n        };\n        return __format(fmt, [&vs](){\n            if constexpr (std::is_same_v<std::string, Ts>) {\n                return vs.c_str();\n            } else {\n                return vs;\n            }\n        }()...);\n    }\n\n    template <typename T>\n    static inline std::string process(const T& data, const std::string& cfmt) {\n        hide::Align align(cfmt);\n        std::string filtered = align.get_filtered_format();\n\n        if (filtered == \"\") {\n            return align.align_text(ss_transform(data));\n        }\n        if (filtered.find(\" \") != std::string::npos) {\n            std::cout << \"fail: cfmt n\u00e3o pode conter espa\u00e7os ou %\\n\";\n            exit(1);\n        }\n        return align.align_text(cformat(filtered, data));\n    }\n\n    template <typename A, typename B>\n    static inline std::string process(const std::pair<A, B>& pair, const std::string& cfmt) {\n        return join(pair, \", \", cfmt) | Text(\"({})\");\n    }\n\n    template <typename... Ts>\n    static inline std::string process(const std::tuple<Ts...>& tuple, const std::string& cfmt) {\n        return join(tuple, \", \", cfmt) | Text(\"({})\");\n    }\n\n\n#ifndef FLOW\n    template <typename PRINTABLE> \n    static inline std::string process(const std::vector<PRINTABLE>& container, const std::string& cfmt) {\n        return join(container, \", \", cfmt) | Text(\"[{}]\");\n    }\n    template <typename PRINTABLE> \n    static inline std::string process(const std::list<PRINTABLE>& container, const std::string& cfmt) {\n        return join(container, \", \", cfmt) | Text(\"[{}]\");\n    }\n    template <typename PRINTABLE, size_t S> \n    static inline std::string process(const std::array<PRINTABLE, S>& container, const std::string& cfmt) {\n        return join(container, \", \", cfmt) | Text(\"[{}]\");\n    }\n    template <typename PRINTABLE> \n    static inline std::string process(const std::set<PRINTABLE>& container, const std::string& cfmt) {\n        return join(container, \", \", cfmt) | Text(\"{{{}}}\");\n    }\n    template <typename PRINTABLE> \n    static inline std::string process(const std::unordered_set<PRINTABLE>& container, const std::string& cfmt) {\n        return join(container, \", \", cfmt) | Text(\"{{{}}}\");\n    }\n    template <typename A, typename B> \n    static inline std::string process(const std::map<A, B>& container, const std::string& cfmt) {\n        return join(container, \", \", cfmt) | Text(\"{{{}}}\");\n    }\n    template <typename A, typename B>\n    static inline std::string process(const std::unordered_map<A, B>& container, const std::string& cfmt) {\n        return join(container, \", \", cfmt) | Text(\"{{{}}}\");\n    }\n#endif\n\nprivate:\n\n    std::string cfmt;\n\npublic:\n\n/**\n * @note #### `text(T data,  str cfmt = \"\") -> str`\n * @note #### `T data | Text(str cfmt = \"\") -> str`\n * @note - Converte o dado passado em string.\n * \n * @note #### Par\u00e2metros\n * @note `param: data` Dado a ser convertido.\n * @note `param: cfmt`: par\u00e2metro de formata\u00e7\u00e3o tal qual printf como \"%.2f\"\n * @note `param: cfmt`: modo de formata\u00e7\u00e3o usando braces para substitui\u00e7\u00e3o \"antes {%2f} depois\"\n * @note `return` String com o dado convertido.\n * \n * @note #### Funcionamento para tipos primitivos\n * @note - Converte o dado em string.\n * @note - Se `cfmt` for passado, o dado ser\u00e1 formatado usando o modelo do `printf`.\n * @note - Se n\u00e3o tiver `cfmt`, o dado ser\u00e1 convertido diretamente para string usando operator<<\n * @note `text(1.2) | Write(); // \"1.2\"\n * @note `text(1.2, \"%.4f\") | Write(); // \"1.2000\"\n * @note `1.2 | Text(\"%.4f\") | Write(); // \"1.2000\"\n * @note `text(1.2, \"%.4f\") | Write(); // \"1.2000\"`\n * \n * @note #### Utilizando {} como placeholder\n * @note - O {} pode ser utilizado como o local onde a vari\u00e1vel ser\u00e1 inserida.\n * @note - O conte\u00fado do {} ser\u00e1 formatado de acordo com o `cfmt`.\n * @note \"domingo\" | Text(\"Hoje \u00e9 {}.\") | Write(); // \"Hoje \u00e9 domingo.\"\n * @note 3.1415 | Text(\"O valor de pi \u00e9 {%.2f}.\") | Write(); // \"O valor de pi \u00e9 3.14.\"\n * \n * @note #### Funcionamento para pair e tuple\n * @note - Para pair e tuple, o texto \u00e9 gerado com os elementos separados por v\u00edrgula.\n * @note `text(std::pair<int, int>(2, 1)) | Write(); // \"(2, 1)\"`\n * \n * @note #### Padding e alinhamento\n * @note - O alinhamento pode ser feito com <, > ou ^.\n * @note - O tamanho do campo pode ser definido com um n\u00famero.\n * @note - O padding pode ser feito com qualquer caractere e definido pelo s\u00edmbolo :.\n * @note `text(1.2, \"<10:_\") | Write(); // \"1.2_______\"`\n * @note `text(1.2, \">10:_\") | Write(); // \"_______1.2\"`\n * @note `text(1.2, \"^10:_\") | Write(); // \"___1.2____\"`\n * @note `text(1.2, \"<10:0\") | Write(); // \"1.20000000\"`\n * @note `\"amigo\" | Text(\"Meu {^10:0}.\") | Write(); // \"Meu 00amigo000.\"`\n * \n * @note  #### Mais exemplos em https://github.com/senapk/flow#text\n */\n    Text(std::string cfmt = \"\"): cfmt(cfmt) { }\n    \n    template <typename T>\n    std::string operator()(const T& data) const {\n        if (cfmt.find(\"{\") == std::string::npos) {\n            return process(data, cfmt);\n        }\n        auto [texts, controls] = hide::Braces::extract(cfmt);\n        try {\n            auto result = process(data, controls.at(0));\n            return hide::Braces::combine(texts, {result});\n        } catch (std::out_of_range& e) {\n            std::cout << \"fail: verifique a quantidade de par\u00e2metros passado para string: \" << cfmt << '\\n';\n            exit(1);\n        }\n    }\n\n    template <typename T>\n    friend std::string operator|(const T& v, const Text& obj) { return obj(v); }\n};\n\n//[[text]]\n/**\n * @note #### `text(T data,  str cfmt = \"\") -> str`\n * @note #### `T data | Text(str cfmt = \"\") -> str`\n * @note - Converte o dado passado em string.\n * \n * @note #### Par\u00e2metros\n * @note `param: data` Dado a ser convertido.\n * @note `param: cfmt`: par\u00e2metro de formata\u00e7\u00e3o tal qual printf como \"%.2f\"\n * @note `param: cfmt`: modo de formata\u00e7\u00e3o usando braces para substitui\u00e7\u00e3o \"antes {%2f} depois\"\n * @note `return` String com o dado convertido.\n * \n * @note #### Funcionamento para tipos primitivos\n * @note - Converte o dado em string.\n * @note - Se `cfmt` for passado, o dado ser\u00e1 formatado usando o modelo do `printf`.\n * @note - Se n\u00e3o tiver `cfmt`, o dado ser\u00e1 convertido diretamente para string usando operator<<\n * @note `text(1.2) | Write(); // \"1.2\"\n * @note `text(1.2, \"%.4f\") | Write(); // \"1.2000\"\n * @note `1.2 | Text(\"%.4f\") | Write(); // \"1.2000\"\n * @note `text(1.2, \"%.4f\") | Write(); // \"1.2000\"`\n * \n * @note #### Utilizando {} como placeholder\n * @note - O {} pode ser utilizado como o local onde a vari\u00e1vel ser\u00e1 inserida.\n * @note - O conte\u00fado do {} ser\u00e1 formatado de acordo com o `cfmt`.\n * @note \"domingo\" | Text(\"Hoje \u00e9 {}.\") | Write(); // \"Hoje \u00e9 domingo.\"\n * @note 3.1415 | Text(\"O valor de pi \u00e9 {%.2f}.\") | Write(); // \"O valor de pi \u00e9 3.14.\"\n * \n * @note #### Funcionamento para pair e tuple\n * @note - Para pair e tuple, o texto \u00e9 gerado com os elementos separados por v\u00edrgula.\n * @note `text(std::pair<int, int>(2, 1)) | Write(); // \"(2, 1)\"`\n * \n * @note #### Padding e alinhamento\n * @note - O alinhamento pode ser feito com <, > ou ^.\n * @note - O tamanho do campo pode ser definido com um n\u00famero.\n * @note - O padding pode ser feito com qualquer caractere e definido pelo s\u00edmbolo :.\n * @note `text(1.2, \"<10:_\") | Write(); // \"1.2_______\"`\n * @note `text(1.2, \">10:_\") | Write(); // \"_______1.2\"`\n * @note `text(1.2, \"^10:_\") | Write(); // \"___1.2____\"`\n * @note `text(1.2, \"<10:0\") | Write(); // \"1.20000000\"`\n * @note `\"amigo\" | Text(\"Meu {^10:0}.\") | Write(); // \"Meu 00amigo000.\"`\n * \n * @note  #### Mais exemplos em https://github.com/senapk/flow#text\n */\ntemplate <typename T>\ninline std::string text(const T& data, const std::string& cfmt)\n//[[text]]\n{\n    return Text(cfmt)(data);\n}\n\n//-------------------- FORMAT ----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\ntemplate<typename... Args>\nclass Format \n{\n    std::tuple<Args...> args;\n\n    std::vector<std::string> tuple_to_vector_str(const std::vector<std::string>& controls)\n    {\n        std::vector<std::string> result;\n        std::apply\n        (\n            [&result, &controls](Args const&... tupleArgs)\n            {\n                int i = -1;\n                ((result.push_back(text(tupleArgs, controls.at(++i)))), ...);\n            }, this->args\n        );\n\n        return result;\n    }\npublic:\n\n/**\n * @note #### `format(str fmt, Args ...args ) -> str`\n * @note #### `str fmt| FORMAT(Args ...args ) -> str`\n * \n * @note - Formata uma string com base nos argumentos passados.\n * @note - A fun\u00e7\u00e3o `text` \u00e9 chamada para cada argumento {}\n * @note - Utilizando um modelo de chaves para posicionar os argumentos.\n * @note - Se dentro da chave, houver um string de formata\u00e7\u00e3o, o dado ser\u00e1 formatado com base nela.\n * @note - N\u00e3o primitivos s\u00e3o formatados de acordo com a fun\u00e7\u00e3o `text`\n * \n * @note #### Par\u00e2metros\n * @note `param: fmt` O texto com os {} para substituir pelos argumentos.\n * @note `param: args` Os argumentos a serem substitu\u00eddos.\n * @note `return` O texto formatado.\n * \n * @note #### Exemplos\n * @note `format(\"O {} \u00e9 {%0.2f}.\", \"pi\", 3.141592653) | Write(); //o pi e 3.14.`\n * @note `\"O {} \u00e9 {%0.2f}.\" | Format(\"pi\", 3.141592653) | Write(); //o pi e 3.14.`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/flow#format\n * \n */\n    Format(Args ...args): args(std::forward<Args>(args)...){}\n\n    std::string operator()(std::string fmt)\n    {\n        auto [texts, controls] = hide::Braces::extract(fmt);\n        try {\n            auto vars = tuple_to_vector_str(controls);\n            return hide::Braces::combine(texts, vars);\n        } catch (std::out_of_range& e) {\n            std::cout << \"fail: verifique a quantidade de par\u00e2metros passado para string: \" << fmt << '\\n';\n            exit(1);\n        }\n    }\n\n    friend std::string operator|(std::string fmt, Format<Args...> obj) { return obj(fmt); }\n};\n\n//[[format]]\n/**\n * @note #### `format(str fmt, Args ...args ) -> str`\n * @note #### `str fmt| FORMAT(Args ...args ) -> str`\n * \n * @note - Formata uma string com base nos argumentos passados.\n * @note - A fun\u00e7\u00e3o `text` \u00e9 chamada para cada argumento {}\n * @note - Utilizando um modelo de chaves para posicionar os argumentos.\n * @note - Se dentro da chave, houver um string de formata\u00e7\u00e3o, o dado ser\u00e1 formatado com base nela.\n * @note - N\u00e3o primitivos s\u00e3o formatados de acordo com a fun\u00e7\u00e3o `text`\n * \n * @note #### Par\u00e2metros\n * @note `param: fmt` O texto com os {} para substituir pelos argumentos.\n * @note `param: args` Os argumentos a serem substitu\u00eddos.\n * @note `return` O texto formatado.\n * \n * @note #### Exemplos\n * @note `format(\"O {} \u00e9 {%0.2f}.\", \"pi\", 3.141592653) | Write(); //o pi e 3.14.`\n * @note `\"O {} \u00e9 {%0.2f}.\" | Format(\"pi\", 3.141592653) | Write(); //o pi e 3.14.`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/flow#format\n * \n */\ntemplate<typename... Args>\nstd::string format(std::string fmt, Args ...args) \n//[[format]]\n{\n    return Format<Args...>(args...)(fmt); \n}\n\n//-------------------- Write -----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\nstruct Write {\n    std::string end;\n\n    template <typename PRINTABLE> \n    const PRINTABLE& process(const PRINTABLE& data, std::string end) {\n        std::cout << text(data) << end;\n        return data;\n    }\n\n\n/**\n * @note #### `write(T data, str end = \"\\n\") -> T`\n * @note #### `T data| Write(str end = \"\\n\") -> T`\n * \n * @note - Envia o dado para o `std::cout` quebrando a linha.\n * @note - Se o dado n\u00e3o for uma `string`, ser\u00e1 convertido pela fun\u00e7\u00e3o `text`.\n * \n * @note #### Par\u00e2metros\n * @note `param: data` Dado a ser transformado e impresso.\n * @note `param: end` (opcional) String a ser inserida no final da linha.\n * @note `return` O dado original recebido.\n * \n * @note #### Exemplos\n * @note `vector<int> {1, 2, 3} | Join() | Write(); // [1, 2, 3]`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/flow#write\n */\n    Write(std::string end = \"\\n\"): end(end) { }\n    template <typename PRINTABLE>        const PRINTABLE& operator()(const PRINTABLE& data           ) { return process(data, end); }\n    template <typename PRINTABLE> friend const PRINTABLE& operator| (const PRINTABLE& data, Write obj) { return obj(data); }\n};\n\n//[[write]]\n/**\n * @note #### `write(T data, str end = \"\\n\") -> T`\n * @note #### `T data| Write(str end = \"\\n\") -> T`\n * \n * @note - Envia o dado para o `std::cout` quebrando a linha.\n * @note - Se o dado n\u00e3o for uma `string`, ser\u00e1 convertido pela fun\u00e7\u00e3o `text`.\n * \n * @note #### Par\u00e2metros\n * @note `param: data` Dado a ser transformado e impresso.\n * @note `param: end` (opcional) String a ser inserida no final da linha.\n * @note `return` O dado original recebido.\n * \n * @note #### Exemplos\n * @note `vector<int> {1, 2, 3} | Join() | Write(); // [1, 2, 3]`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/flow#write\n */\ntemplate <typename PRINTABLE> \nconst PRINTABLE& write(const PRINTABLE& data, std::string end = \"\\n\") \n//[[write]]\n{\n    data | Write(end);\n    return data;\n}\n\n//-------------------- Map   -----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\n//[[map]]\n/**\n * @note #### `map(CONTAINER<T> container, FUNCTION fn) -> vector<fn(T)>`\n * @note #### `CONTAINER<T> container| Map(FUNCTION fn) -> vector<fn(T)>`\n * \n * @note - Retorna um vetor com o resultado da aplica\u00e7\u00e3o da fun\u00e7\u00e3o fn para cada elemento do container.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` Container a ser mapeado.\n * @note `param: fn` Fun\u00e7\u00e3o a ser aplicada em cada elemento do container.\n * @note `return` Vector com os elementos resultantes da aplica\u00e7\u00e3o da fun\u00e7\u00e3o.\n * \n * @note #### Exemplos\n * @note `vector<int> vet {1, 2, 3};`\n * @note `map(vet, [](int x) {return x * x;}) | Join() | Write(); // [1, 4, 9]`\n * @note `vet| Map([](int x) {return x * x;}) | Join() | Write(); // [1, 4, 9]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/flow#map\n */\ntemplate<typename CONTAINER, typename FUNCTION>\nauto map(const CONTAINER& container, FUNCTION fn)\n//[[map]]\n{\n    std::vector<decltype(fn(*container.begin()))> aux;\n    for (const auto& item : container)\n        aux.push_back(fn(item));\n    return aux;\n}\n\ntemplate <typename FUNCTION>\nstruct Map {\n    FUNCTION fn;\n/**\n * @note #### `map(CONTAINER<T> container, FUNCTION fn) -> vector<fn(T)>`\n * @note #### `CONTAINER<T> container| Map(FUNCTION fn) -> vector<fn(T)>`\n * \n * @note - Retorna um vetor com o resultado da aplica\u00e7\u00e3o da fun\u00e7\u00e3o fn para cada elemento do container.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` Container a ser mapeado.\n * @note `param: fn` Fun\u00e7\u00e3o a ser aplicada em cada elemento do container.\n * @note `return` Vector com os elementos resultantes da aplica\u00e7\u00e3o da fun\u00e7\u00e3o.\n * \n * @note #### Exemplos\n * @note `vector<int> vet {1, 2, 3};`\n * @note `map(vet, [](int x) {return x * x;}) | Join() | Write(); // [1, 4, 9]`\n * @note `vet| Map([](int x) {return x * x;}) | Join() | Write(); // [1, 4, 9]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/flow#map\n */\n    Map(FUNCTION fn) : fn(fn) {};\n    template<typename CONTAINER> auto operator()(const CONTAINER& container) const { return map(container, fn); }\n    template<typename CONTAINER> friend auto operator|(const CONTAINER& container, const Map& obj) { return obj(container); }\n};\n\n//-------------------- Split -----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\n//[[split]]\n/**\n * @note #### `split(str content, char delimiter = \" \") -> vector<str>`\n * @note #### `str content| Split(char delimiter = \" \") -> vector<str>`\n * \n * @note - Transforma uma string em um vetor de strings, separando pelo delimitador.\n * \n * @note #### Par\u00e2metros\n * @note `param: content` String a ser separada.\n * @note `param: delimiter` (opcional) Caractere delimitador.\n * @note `return` Vetor de strings.\n *\n * @note #### Exemplos\n * @note `split(\"a,b,c\", \",\") | Join() | Write(); // [a, b, c]`\n * @note `\"a,b,c\"| Split(\",\") | Join() | Write(); // [a, b, c]`\n * @note `\"a, b, c\"| Split(\", \") | Join() | Write(); // [a, b, c]`\n * @note `split(\"a b c\") | Join() | Write(); // [a, b, c]`\n * @note `\"a b c\"|Split()| Join() | Write(); // [a, b, c]`\n *  \n * @note #### Veja mais exemplos em https://github.com/senapk/flow#split\n */\ninline std::vector<std::string> split(std::string content, std::string delimiter = \" \")\n//[[split]]\n{\n    std::vector<std::string> aux;\n    size_t pos = 0;\n    while ((pos = content.find(delimiter)) != std::string::npos) {\n        std::string token = content.substr(0, pos);\n        aux.push_back(token);\n        content.erase(0, pos + delimiter.length());\n    }\n    aux.push_back(content);\n    return aux;\n}\n\nstruct Split {\n    std::string delimiter;\n/**\n * @note #### `split(str content, char delimiter = \" \") -> vector<str>`\n * @note #### `str content| Split(char delimiter = \" \") -> vector<str>`\n * \n * @note - Transforma uma string em um vetor de strings, separando pelo delimitador.\n * \n * @note #### Par\u00e2metros\n * @note `param: content` String a ser separada.\n * @note `param: delimiter` (opcional) Caractere delimitador.\n * @note `return` Vetor de strings.\n *\n * @note #### Exemplos\n * @note `split(\"a,b,c\", \",\") | Join() | Write(); // [a, b, c]`\n * @note `\"a,b,c\"| Split(\",\") | Join() | Write(); // [a, b, c]`\n * @note `\"a, b, c\"| Split(\", \") | Join() | Write(); // [a, b, c]`\n * @note `split(\"a b c\") | Join() | Write(); // [a, b, c]`\n * @note `\"a b c\"|Split()| Join() | Write(); // [a, b, c]`\n *  \n * @note #### Veja mais exemplos em https://github.com/senapk/flow#split\n */\n    Split(std::string delimiter = \" \") : delimiter(delimiter) {}\n\n    std::vector<std::string>        operator()(std::string content) const { return split(content, delimiter); }\n    friend std::vector<std::string> operator| (std::string content, const Split& obj) { return obj(content); }\n};\n\n//--------------------------------------------------------\n//-------------------- Slice -----------------------------\n//--------------------------------------------------------\n\nclass Slice {\n\n    template<typename CONTAINER>\n    static auto new_vec_from(const CONTAINER& container) {\n        auto fn = [](auto x) {return x;}; \n        std::vector<decltype(fn(*container.begin()))> aux;\n        return aux;\n    }\n\n    template<typename CONTAINER>\n    std::pair<int, int> calc_limits(const CONTAINER& container) const {\n        int size = container.size();\n        int begin = 0;\n        int end = size;\n        if (!this->from_begin && !this->to_end && (this->begin == this->end)) {\n            return {0, 0};\n        }\n        if (!this->from_begin) {\n            begin = this->begin;\n            if (begin < 0)\n                begin = size + begin;\n            begin = std::min(begin, size);\n        }\n        if (!this->to_end) {\n            end = this->end;\n            if (end < 0)\n                end = size + end;\n            end = std::min(end, size);\n        }\n        return {begin, end};\n    }\n\n    template<typename CONTAINER>\n    auto process(const CONTAINER& container) const {\n        auto [begin, end] = calc_limits(container);\n        auto aux = Slice::new_vec_from(container);\n        auto it = container.begin();\n        std::advance(it, begin);\n        for (int i = begin; i < end; i++) {\n            aux.push_back(*it);\n            it++;\n        }\n        return aux;\n    }\n\n    std::string process(const std::string& container) const {\n        auto [begin, end] = calc_limits(container);\n        std::string aux;\n        for (int i = begin; i < end; i++) {\n            aux.push_back(container[i]);\n        }\n        return aux;\n    }\n\n    std::string process(const char * container) const {\n        return process(std::string(container));\n    }\n\n\npublic:\n\n/**\n * @note #### `slice(CONTAINER<T> container, int begin = 0) -> vector<T>`\n * @note #### `slice(      string container, int begin = 0) -> string`\n\n * @note #### `CONTAINER<T> container| Slice(int begin = 0) -> vector<T>`\n * @note #### `      string container| Slice(int begin = 0) -> string`\n * \n * @note - Fatia um container retornando um `vector` com os elementos copiados.\n * @note - Funciona como a fun\u00e7\u00e3o `slice` do Python ou do Javascript.\n * @note - Se n\u00e3o passado nenhum par\u00e2metro, copia todos os elementos.\n * @note - Os \u00edndices podem ser negativos para contar a partir final.\n * @note - Se o container for uma string, retorna uma string.\n * @note - Se o container for qualquer outro como vetor, set, map, list, array, retorna um vetor.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` container a ser fatiado.\n * @note `param: begin` (opcional) \u00edndice inicial.\n * @note `return` vector com os elementos copiados.\n * \n * @note #### Exemplos\n * @note `vector<int> vet {1, 2, 3, 4, 5};`\n * @note `slice(vet, 1)  | Join() | Write(); // [2, 3, 4, 5]`\n * @note `slice(vet, -2) | Join() | Write(); // [4, 5]`\n * @note `vet | Slice(1) | Join() | Write(); // [2, 3, 4, 5]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/flow#slice\n */\n    Slice(int begin = 0) {\n        this->from_begin = begin == 0;\n        this->begin = begin;\n        this->to_end = true;\n    }\n\n\n\n/**\n * @note #### `slice(CONTAINER<T> container, int begin, int end) -> vector<T>`\n * @note #### `CONTAINER<T> container| Slice(int begin, int end) -> vector<T>`\n * @note #### `slice(string container, int begin, int end) -> string`\n * @note #### `string container| Slice(int begin, int end) -> string`\n * \n * @note - Fatia um container retornando um `vector` com os elementos copiados.\n * @note - Funciona como a fun\u00e7\u00e3o `slice` do Python ou do Javascript. \n * @note - Os \u00edndices podem ser negativos para indicar que a contagem deve ser feita a partir do final.\n * @note - Se o container for uma string, retorna uma string.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` container a ser fatiado.\n * @note `param: begin` \u00edndice inicial.\n * @note `param: end` \u00edndice final.\n * @note `return` vector com os elementos copiados.\n * \n * @note #### Exemplos\n * @note `vector<int> vet {1, 2, 3, 4, 5};`\n * @note `slice(vet, 1, -1) | Join() | Write(); // [2, 3, 4]`\n * @note `vet| Slice(1, -1) | Join() | Write(); // [2, 3, 4]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/flow#slice\n */\n    Slice(int begin, int end) {\n        this->begin = begin;\n        this->end = end;\n        this->from_begin = false;\n        this->to_end = false;\n    }\n\n    template<typename CONTAINER>\n    auto operator()(const CONTAINER& container) const {\n        return process(container);\n    }\n    \n    template<typename CONTAINER> friend auto operator|(const CONTAINER& container, const Slice& obj) { return obj(container); }\n\nprivate:\n    int begin;\n    int end;\n    bool from_begin {false};\n    bool to_end {false};\n};\n\n//[[slice1]]\n\n/**\n * @note #### `slice(CONTAINER<T> container, int begin = 0) -> vector<T>`\n * @note #### `slice(      string container, int begin = 0) -> string`\n\n * @note #### `CONTAINER<T> container| Slice(int begin = 0) -> vector<T>`\n * @note #### `      string container| Slice(int begin = 0) -> string`\n * \n * @note - Fatia um container retornando um `vector` com os elementos copiados.\n * @note - Funciona como a fun\u00e7\u00e3o `slice` do Python ou do Javascript.\n * @note - Se n\u00e3o passado nenhum par\u00e2metro, copia todos os elementos.\n * @note - Os \u00edndices podem ser negativos para contar a partir final.\n * @note - Se o container for uma string, retorna uma string.\n * @note - Se o container for qualquer outro como vetor, set, map, list, array, retorna um vetor.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` container a ser fatiado.\n * @note `param: begin` (opcional) \u00edndice inicial.\n * @note `return` vector com os elementos copiados.\n * \n * @note #### Exemplos\n * @note `vector<int> vet {1, 2, 3, 4, 5};`\n * @note `slice(vet, 1)  | Join() | Write(); // [2, 3, 4, 5]`\n * @note `slice(vet, -2) | Join() | Write(); // [4, 5]`\n * @note `vet | Slice(1) | Join() | Write(); // [2, 3, 4, 5]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/flow#slice\n */\ntemplate<typename CONTAINER>\nauto slice(const CONTAINER& container, int begin = 0)\n//[[slice1]]\n{\n    return Slice(begin)(container);\n}\n\n\n\n/**\n * @note #### `slice(CONTAINER<T> container, int begin, int end) -> vector<T>`\n * @note #### `CONTAINER<T> container| Slice(int begin, int end) -> vector<T>`\n * @note #### `slice(string container, int begin, int end) -> string`\n * @note #### `string container| Slice(int begin, int end) -> string`\n * \n * @note - Fatia um container retornando um `vector` com os elementos copiados.\n * @note - Funciona como a fun\u00e7\u00e3o `slice` do Python ou do Javascript. \n * @note - Os \u00edndices podem ser negativos para indicar que a contagem deve ser feita a partir do final.\n * @note - Se o container for uma string, retorna uma string.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` container a ser fatiado.\n * @note `param: begin` \u00edndice inicial.\n * @note `param: end` \u00edndice final.\n * @note `return` vector com os elementos copiados.\n * \n * @note #### Exemplos\n * @note `vector<int> vet {1, 2, 3, 4, 5};`\n * @note `slice(vet, 1, -1) | Join() | Write(); // [2, 3, 4]`\n * @note `vet| Slice(1, -1) | Join() | Write(); // [2, 3, 4]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/flow#slice\n */\ntemplate<typename CONTAINER>\nauto slice(CONTAINER container, int begin, int end)\n{\n    return Slice(begin, end)(container);\n}\n\n//-------------------- FILTER ----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\n//[[filter]]\n/**\n * @note #### `filter(CONTAINER<T> container, FUNCTION fn) -> vector<T>`\n * @note #### `CONTAINER<T> container| FILTER(FUNCTION fn) -> vector<T>`\n * \n * @note - Retorna um vetor com os elementos do container que satisfazem a fun\u00e7\u00e3o predicado fn.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` Container a ser filtrado.\n * @note `param: fn` Fun\u00e7\u00e3o predicado.\n * @note `return` Vector com os elementos que satisfazem a fun\u00e7\u00e3o predicado.\n * \n * @note #### Exemplos\n * @note `vector<int> vet {1, 2, 3};`\n * @note `filter(vet, [](int x) {return x % 2 == 0;}) | Join() | Write(); // [2]`\n * @note `vet| Filter([](int x) {return x % 2 == 0;}) | Join() | Write(); // [2]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/flow#filter\n * \n */\ntemplate<typename CONTAINER, typename FUNCTION>\nauto filter(const CONTAINER& container, FUNCTION fn)\n//[[filter]]\n{\n    auto aux = slice(container, 0, 0);\n    for(const auto& x : container) {\n        if(fn(x))\n            aux.push_back(x);\n    }\n    return aux;\n}\n\ntemplate <typename FUNCTION>\nstruct Filter {\n    FUNCTION fn;\n\n/**\n * @note #### `filter(CONTAINER<T> container, FUNCTION fn) -> vector<T>`\n * @note #### `CONTAINER<T> container| FILTER(FUNCTION fn) -> vector<T>`\n * \n * @note - Retorna um vetor com os elementos do container que satisfazem a fun\u00e7\u00e3o predicado fn.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` Container a ser filtrado.\n * @note `param: fn` Fun\u00e7\u00e3o predicado.\n * @note `return` Vector com os elementos que satisfazem a fun\u00e7\u00e3o predicado.\n * \n * @note #### Exemplos\n * @note `vector<int> vet {1, 2, 3};`\n * @note `filter(vet, [](int x) {return x % 2 == 0;}) | Join() | Write(); // [2]`\n * @note `vet| Filter([](int x) {return x % 2 == 0;}) | Join() | Write(); // [2]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/flow#filter\n * \n */\n    Filter(FUNCTION fn) : fn(fn) {};\n    template<typename CONTAINER> auto operator()(const CONTAINER& container) const { return filter(container, fn); }\n    template<typename CONTAINER> friend auto operator|(const CONTAINER& container, const Filter& obj) { return obj(container); }\n};\n\n//-------------------- Enumerate -------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\n//[[enumerate]]\n\n/**\n * @note #### `enumerate(CONTAINER<T> container) -> vector<pair<int, T>>`\n * @note #### `CONTAINER<T> container|Enumerate()-> vector<pair<int, T>>`\n * \n * @note - Retorna um vetor de pares com os indices seguidos dos elementos originais do vetor.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` Container a ser enumerado.\n * @note `return` Vector com os pares.\n * \n * @note #### Exemplos\n * @note `vector<int> vet {1, 2, 3};`\n * @note `enumerate(vet) | Join() | Write(); // [(0, 1), (1, 2), (2, 3)]`\n * @note `vet|Enumerate()| Join() | Write(); // [(0, 1), (1, 2), (2, 3)]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/flow#enumerate\n */\ntemplate<typename CONTAINER>\nauto enumerate(const CONTAINER& container)\n//[[enumerate]]\n{\n    auto fn = [](auto x) {return x;}; \n    std::vector<std::pair<int, decltype(fn(*container.begin()))>> aux;\n    int i = 0;\n    for (const auto& item : container) {\n        aux.push_back(std::make_pair(i, item));\n        i++;\n    }\n    return aux;\n}\n\nstruct Enumerate {\n\n/**\n * @note #### `enumerate(CONTAINER<T> container) -> vector<pair<int, T>>`\n * @note #### `CONTAINER<T> container|Enumerate()-> vector<pair<int, T>>`\n * \n * @note - Retorna um vetor de pares com os indices seguidos dos elementos originais do vetor.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` Container a ser enumerado.\n * @note `return` Vector com os pares.\n * \n * @note #### Exemplos\n * @note `vector<int> vet {1, 2, 3};`\n * @note `enumerate(vet) | Join() | Write(); // [(0, 1), (1, 2), (2, 3)]`\n * @note `vet|Enumerate()| Join() | Write(); // [(0, 1), (1, 2), (2, 3)]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/flow#enumerate\n */\n    Enumerate() {};\n    template<typename CONTAINER> auto operator()(const CONTAINER& container) const { return enumerate(container); }\n    template<typename CONTAINER> friend auto operator|(const CONTAINER& container, const Enumerate& obj) { return obj(container); }\n};\n\n//-------------------- PARSE -----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\n//[[parse]]\n/**\n * @note #### `parse<READABLE>(str value) -> READABLE`\n * @note #### `str value|STRTO<READABLE>()-> READABLE`\n * \n * @note - Transforma de string para o tipo solicitado utilizando o operador de extra\u00e7\u00e3o de stream.\n * @note - Dispara uma exce\u00e7\u00e3o caso a convers\u00e3o n\u00e3o seja poss\u00edvel.\n * \n * @note #### Par\u00e2metros\n * @note `param: READABLE` Tipo a ser convertido.\n * @note `param: value` String a ser convertida.\n * @note `return` Valor convertido.\n * @note `throws: std::runtime_error` Caso a convers\u00e3o n\u00e3o seja poss\u00edvel.\n * \n * @note #### Exemplos\n * @note `parse<int>(\"1\") | Write(); // 1`\n * @note `parse<double>(\"1.2\") | Write(); // 1.2`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/flow#parse\n * \n*/\ntemplate <typename READABLE>\nREADABLE parse(std::string value)\n//[[parse]]\n{\n    std::istringstream iss(value);\n    READABLE aux;\n    if (iss >> aux) {\n        return aux;\n    }\n    throw std::runtime_error(\"parse: invalid conversion from \" + value);\n}\n\ntemplate <typename READABLE>\nstruct Parse {\n/**\n * @note #### `parse<READABLE>(str value) -> READABLE`\n * @note #### `str value|STRTO<READABLE>()-> READABLE`\n * \n * @note - Transforma de string para o tipo solicitado utilizando o operador de extra\u00e7\u00e3o de stream.\n * @note - Dispara uma exce\u00e7\u00e3o caso a convers\u00e3o n\u00e3o seja poss\u00edvel.\n * \n * @note #### Par\u00e2metros\n * @note `param: READABLE` Tipo a ser convertido.\n * @note `param: value` String a ser convertida.\n * @note `return` Valor convertido.\n * @note `throws: std::runtime_error` Caso a convers\u00e3o n\u00e3o seja poss\u00edvel.\n * \n * @note #### Exemplos\n * @note `parse<int>(\"1\") | Write(); // 1`\n * @note `parse<double>(\"1.2\") | Write(); // 1.2`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/flow#parse\n * \n*/\n    Parse(){};\n    READABLE operator()(std::string value) const { return parse<READABLE>(value); }\n    friend READABLE operator|(std::string value, const Parse& obj) { return obj(value); }\n};\n\n//-------------------- UNPACK -----------------------------\n//---------------------------------------------------------\n//---------------------------------------------------------\n\ntemplate <typename... Types>\nstruct Unpack {\n    char delimiter;\n\n/**\n * @note #### `unpack<...TS>(str value, char delimiter) -> tuple<TS...>`\n * @note #### `str value| UNPACK<...TS>(char delimiter) -> tuple<TS...>`\n * \n * @note - Transforma de string para tupla dados os tipos de cada elemento e o char separador.\n * \n * @note #### Par\u00e2metros\n * @note `param: TS...` Tipos a serem extra\u00eddos.\n * @note `param: value` String a ser convertida.\n * @note `param: delimiter` Caractere separador entre os elementos.\n * @note `return` Tupla com os elementos convertidos.\n * \n * @note #### Exemplos\n * @note unpack<int, double, std::string>(\"1:2.4:uva\", ':') | Write(); // (1, 2.4, \"uva\") \n * @note \"1:2.4:uva\"| UNPACK<int, double, std::string>(':') | Write(); // (1, 2.4, \"uva\")\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/flow#unpack\n * \n */\n    Unpack(char delimiter) : delimiter(delimiter) {}\n\n    template<typename Head, typename... Tail>\n    std::tuple<Head, Tail...> tuple_read_impl(std::istream& is, char delimiter) const {\n        Head val;\n        std::string token;\n        std::getline(is, token, delimiter);\n        std::stringstream ss_token(token);\n        ss_token >> val;\n        if constexpr (sizeof...(Tail) == 0) // this was the last tuple value\n            return std::tuple{val};\n        else\n            return std::tuple_cat(std::tuple{val}, tuple_read_impl<Tail...>(is, delimiter));\n    }\n\n    std::tuple<Types...> operator()(std::string content) const {\n        std::stringstream ss(content);\n        return tuple_read_impl<Types...>(ss, this->delimiter);\n    }\n    \n    friend std::tuple<Types...> operator|(std::string content, const Unpack& obj) {\n        return obj(content);\n    }\n};\n\n//[[unpack]]\n/**\n * @note #### `unpack<...TS>(str value, char delimiter) -> tuple<TS...>`\n * @note #### `str value| UNPACK<...TS>(char delimiter) -> tuple<TS...>`\n * \n * @note - Transforma de string para tupla dados os tipos de cada elemento e o char separador.\n * \n * @note #### Par\u00e2metros\n * @note `param: TS...` Tipos a serem extra\u00eddos.\n * @note `param: value` String a ser convertida.\n * @note `param: delimiter` Caractere separador entre os elementos.\n * @note `return` Tupla com os elementos convertidos.\n * \n * @note #### Exemplos\n * @note unpack<int, double, std::string>(\"1:2.4:uva\", ':') | Write(); // (1, 2.4, \"uva\") \n * @note \"1:2.4:uva\"| UNPACK<int, double, std::string>(':') | Write(); // (1, 2.4, \"uva\")\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/flow#unpack\n * \n */\ntemplate <typename... TS>\nstd::tuple<TS...> unpack(const std::string& line, char delimiter)\n//[[unpack]]\n{\n    return Unpack<TS...>(delimiter)(line);\n}\n\n\n//-------------------- ZIP   -----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\n//[[zip]]\n/**\n * @note #### `zip(CONTAINER_A<T> container_a, CONTAINER_B<K> container_b) -> vector<pair<T, K>>`\n * @note #### `CONTAINER_A<T> container_a| ZIP(CONTAINER_B<K> container_b) -> vector<pair<T, K>>`\n * \n * @note - Une dois containers em um vetor de pares limitado ao menor tamanho dos dois containers.\n * \n * @note #### Par\u00e2metros\n * @note `param: container_a` Primeiro container.\n * @note `param: container_b` Segundo container.\n * @note `return` Vetor de pares.\n * \n * @note #### Exemplos\n * @note `zip(vector<int>{1, 2, 3}, string(\"pterodactilo\")) | Join() | Write(); //[(1, p), (2, t), (3, e)]`\n * @note `vector<int>{1, 2, 3}| ZIP(string(\"pterodactilo\")) | Join() | Write(); //[(1, p), (2, t), (3, e)]`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/flow#zip\n */\ntemplate<typename CONTAINER_A, typename CONTAINER_B>\nauto zip(const CONTAINER_A& A, const CONTAINER_B& B)\n//[[zip]]\n{\n    auto fn = [](auto x) { return x; };\n    using type_a = decltype(fn(*A.begin()));\n    using type_b = decltype(fn(*B.begin()));\n    std::vector<std::pair<type_a, type_b>> aux;\n\n    auto ita = A.begin();\n    auto itb = B.begin();\n    while(ita != A.end() &&  itb != B.end()) {\n        aux.push_back({*ita, *itb});\n        ita++;\n        itb++;\n    }\n    return aux;\n};\n\ntemplate <typename CONTAINER_B>\nstruct Zip {\n    CONTAINER_B container_b;\n\n/**\n * @note #### `zip(CONTAINER_A<T> container_a, CONTAINER_B<K> container_b) -> vector<pair<T, K>>`\n * @note #### `CONTAINER_A<T> container_a| ZIP(CONTAINER_B<K> container_b) -> vector<pair<T, K>>`\n * \n * @note - Une dois containers em um vetor de pares limitado ao menor tamanho dos dois containers.\n * \n * @note #### Par\u00e2metros\n * @note `param: container_a` Primeiro container.\n * @note `param: container_b` Segundo container.\n * @note `return` Vetor de pares.\n * \n * @note #### Exemplos\n * @note `zip(vector<int>{1, 2, 3}, string(\"pterodactilo\")) | Join() | Write(); //[(1, p), (2, t), (3, e)]`\n * @note `vector<int>{1, 2, 3}| ZIP(string(\"pterodactilo\")) | Join() | Write(); //[(1, p), (2, t), (3, e)]`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/flow#zip\n */\n    Zip(const CONTAINER_B& container_b) : container_b(container_b) {}\n\n    template<typename CONTAINER_A>\n    auto operator()(const CONTAINER_A& container_a) const { return zip(container_a, container_b); }\n    template<typename CONTAINER_A>\n    friend auto operator|(const CONTAINER_A& container_a, const Zip& obj) { return obj(container_a); }\n};\n\n//-------------------- ZIPWITH ---------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\n//[[zipwith]]\n/**\n * @note #### `zipwith(CONTAINER<T> container_a, CONTAINER<K> container_b, FUNCTION fnjoin) -> vector<fnjoin(T, K)>`\n * @note #### `CONTAINER<T> container_a| ZIPWITH(CONTAINER<K> container_b, FUNCTION fnjoin) -> vector<fnjoin(T, K)>`\n * \n * @note - Une dois containers atrav\u00e9s da aplica\u00e7\u00e3o da fun\u00e7\u00e3o fnjoin em cada par limitado ao menor tamanho dos dois containers.\n * \n * @note #### Par\u00e2metros\n * @note `param: container_a` Primeiro container.\n * @note `param: container_b` Segundo container.\n * @note `param: fnjoin` Fun\u00e7\u00e3o a ser aplicada em cada par.\n * @note `return` Vetor com os resultados.\n * \n * @note #### Exemplos\n * @note `auto concat = [](auto x, auto y) { return text(x) + y; };`\n * @note `zipwith(vector<int>{1, 2, 3}, string(\"pterodactilo\"), concat) | Join() | Write(); // [\"1p\", \"2t\", \"3e\"]`\n * @note `zipwith(range(10), \"pterodactilo\"s, concat) | Join() | Write(); // [\"0p\", \"1t\", \"2e\", \"3r\", \"4o\", \"5d\", \"6a\", \"7c\", \"8t\", \"9i\"]`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/flow#zipwith\n * \n */\ntemplate<typename CONTAINER_A, typename CONTAINER_B, typename FNJOIN>\nauto zipwith(const CONTAINER_A& A, const CONTAINER_B& B, FNJOIN fnjoin)\n//[[zipwith]]\n{\n    auto idcopy = [](auto x) { return x; };\n    using type_out = decltype( fnjoin( idcopy(*A.begin()), idcopy(*B.begin()) ));\n    std::vector<type_out> aux;\n\n    auto ita = A.begin();\n    auto itb = B.begin();\n    while(ita != A.end() &&  itb != B.end()) {\n        aux.push_back(fnjoin(*ita, *itb));\n        ita++;\n        itb++;\n    }\n    return aux;\n};\n\n\ntemplate<typename CONTAINER_B, typename FNJOIN>\nstruct ZipWith {\n    CONTAINER_B container_b;\n    FNJOIN fnjoin;\n\n/**\n * @note #### `zipwith(CONTAINER<T> container_a, CONTAINER<K> container_b, FUNCTION fnjoin) -> vector<fnjoin(T, K)>`\n * @note #### `CONTAINER<T> container_a| ZIPWITH(CONTAINER<K> container_b, FUNCTION fnjoin) -> vector<fnjoin(T, K)>`\n * \n * @note - Une dois containers atrav\u00e9s da aplica\u00e7\u00e3o da fun\u00e7\u00e3o fnjoin em cada par limitado ao menor tamanho dos dois containers.\n * \n * @note #### Par\u00e2metros\n * @note `param: container_a` Primeiro container.\n * @note `param: container_b` Segundo container.\n * @note `param: fnjoin` Fun\u00e7\u00e3o a ser aplicada em cada par.\n * @note `return` Vetor com os resultados.\n * \n * @note #### Exemplos\n * @note `auto concat = [](auto x, auto y) { return text(x) + y; };`\n * @note `zipwith(vector<int>{1, 2, 3}, string(\"pterodactilo\"), concat) | Join() | Write(); // [\"1p\", \"2t\", \"3e\"]`\n * @note `zipwith(range(10), \"pterodactilo\"s, concat) | Join() | Write(); // [\"0p\", \"1t\", \"2e\", \"3r\", \"4o\", \"5d\", \"6a\", \"7c\", \"8t\", \"9i\"]`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/flow#zipwith\n * \n */\n    ZipWith(const CONTAINER_B& container_b, FNJOIN fnjoin) : container_b(container_b), fnjoin(fnjoin) {}\n\n    template<typename CONTAINER_A>        auto operator()(const CONTAINER_A& container_a) const { return zipwith(container_a, container_b, fnjoin); }\n    template<typename CONTAINER_A> friend auto operator| (const CONTAINER_A& container_a, const ZipWith& obj) { return obj(container_a); }\n};\n\n//-------------------- FOREACH ---------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\n//[[foreach]]\n/**\n * @note #### `foreach(CONTAINER container, FUNCTION fn) -> void`\n * @note #### `CONTAINER container| Foreach(FUNCTION fn) -> void`\n * \n * @note - Aplica a fun\u00e7\u00e3o fn em cada elemento do container.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` Container a ser iterado.\n * @note `param: fn` Fun\u00e7\u00e3o a ser aplicada em cada elemento.\n * \n * @note #### Exemplos\n * std::vector<int>{1, 2, 3, 4} | Foreach([&](int x) { std::cout << x; });\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/flow#zipwith\n */\ntemplate <typename CONTAINER, typename FN>\nvoid foreach(const CONTAINER& container, FN fn)\n//[[foreach]]\n{\n    for (const auto& item : container) {\n        fn(item);\n    }\n}\n\ntemplate <typename FN>\nstruct Foreach {\n    FN fn;\n\n/**\n * @note #### `foreach(CONTAINER container, FUNCTION fn) -> void`\n * @note #### `CONTAINER container| Foreach(FUNCTION fn) -> void`\n * \n * @note - Aplica a fun\u00e7\u00e3o fn em cada elemento do container.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` Container a ser iterado.\n * @note `param: fn` Fun\u00e7\u00e3o a ser aplicada em cada elemento.\n * \n * @note #### Exemplos\n * std::vector<int>{1, 2, 3, 4} | Foreach([&](int x) { std::cout << x; });\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/flow#zipwith\n */\n    Foreach(FN fn) : fn(fn) {}\n\n    template<typename CONTAINER> void operator()(const CONTAINER& container) const { foreach(container, fn); }\n    template<typename CONTAINER> friend void operator|(const CONTAINER& container, const Foreach& obj) { obj(container); }\n};\n} // namespace fw\n\nusing namespace std::string_literals;\n\n\n//[[operator+]]\n/**\n * @note #### `+str -> double`\n * \n * @note - Transforma de string para double utilizando a fun\u00e7\u00e3o number.\n * \n * @note #### Par\u00e2metros\n * @note `param: str` String a ser convertida.\n * @note `return` Valor convertido para double.\n * \n * @note #### Exemplos\n * @note `+\"1.23\"s | Write(); // 1.23`\n * \n*/\ninline double operator+(std::string text)\n//[[operator+]]\n\n{\n    return fw::parse<double>(text);\n}\n\n#define EXTRA\n#include <algorithm>\n\nnamespace fw {\n#ifdef EXTRA\n\ninline auto Sort() {\n    return fw::Pipe([](auto container) {\n        std::sort(container.begin(), container.end());\n        return container;\n    });\n};\n\ntemplate <typename T>\ninline auto Find(const T& value) {\n    return fw::Pipe([value](auto container) {\n        return std::find(container.begin(), container.end(), value);\n    });\n};\n\n} // namespace fw\n#endif\n\n",
                "encoding": 0
            },
            {
                "name": "adapter.hpp",
                "contents": "#pragma once\n#include <iostream>\nclass Adapter{\npublic:\n    Adapter(int qtd = 0)\n    {\n        (void) qtd;\n    }\n\n    void reservar(std::string id, std::string fone, int ind) {\n        (void) id;\n        (void) fone;\n        (void) ind;\n    }\n\n    void cancelar(std::string id) {\n        (void) id;\n    }\n\n    std::string str() const {\n        return \"\";\n    }\n};\n\ninline std::ostream& operator<<(std::ostream& os, const Adapter& c) {\n    return os << c.str();\n}\n\n",
                "encoding": 0
            },
            {
                "name": "shell.cpp",
                "contents": "#include \"adapter.hpp\"\n#include \"flow.hpp\"\n\nint main() {\n    Adapter adp;\n    while (true) {\n        auto line = fw::input();\n        auto args = fw::split(line, \" \");\n        fw::write(\"$\" + line);\n\n        if      (args[0] == \"end\")      { break; } \n        else if (args[0] == \"show\")     { fw::write(adp); } \n        else if (args[0] == \"init\")     { adp = Adapter(+args[1]); } \n        else if (args[0] == \"reservar\") { adp.reservar(args[1], args[2], (int) +args[3]); }\n        else if (args[0] == \"cancelar\") { adp.cancelar(args[1]); } \n        else                            { fw::write(\"fail: comando invalido\"); }\n    }\n}\n\n",
                "encoding": 0
            }
        ]
    }
}
