{
    "title": "@contagem: Estressados Opera\u00e7\u00f5es II",
    "description": "# Estressados Opera\u00e7\u00f5es II\n\n<!-- toch -->\n[Intro](#intro) | [Draft](#draft) | [Shell](#shell) | [Alien](#alien)\n-- | -- | -- | --\n<!-- toch -->\n\n![cover](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/contagem/cover.jpg)\n\n***\n\n## Intro\n\n- **count**: quantas vezes o valor X apareceu na fila?\n- **sum**: qual a soma de todos os valores de stress da fila?\n- **average**: qual a m\u00e9dia de stress?\n- **half_compare**: qual metade da lista \u00e9 mais estressada? A primeira metade ou a segunda metade? A quantidade de elementos na lista sempre ser\u00e1 par. \\[draw, first, second]\n- **more_men_or_women**: existem mais homens ou mulheres? \\[draw, men, women]\n- **sex_battle**: quem \u00e9 mais estressado em m\u00e9dia? \\[draw, men, women]\n\n## Draft\n\n<!-- links .cache/draft -->\n- cpp\n  - [shell.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/contagem/.cache/draft/cpp/shell.cpp)\n- go\n  - [shell.go](https://github.com/qxcodepoo/arcade/blob/master/base/contagem/.cache/draft/go/shell.go)\n- java\n  - [Shell.java](https://github.com/qxcodepoo/arcade/blob/master/base/contagem/.cache/draft/java/Shell.java)\n- ts\n  - [shell.ts](https://github.com/qxcodepoo/arcade/blob/master/base/contagem/.cache/draft/ts/shell.ts)\n<!-- links -->\n\n## Shell\n\n```sh\n#TEST_CASE count\n$count [5,3,-1,-50,-1,-99] -1\n2\n$count [-1,-50,-1,-99,-444] 10\n0\n$end\n```\n\n```sh\n#TEST_CASE sum\n$sum [1,-1]\n2\n$sum [5,3,-1]\n9\n$sum [-1,-50]\n51\n$end\n```\n\n```sh\n#TEST_CASE average\n$average [5,3,-1,-50,-1,-99]\n26.50\n$average [-1,-50,-1,-99,-444]\n119.00\n$end\n```\n\n```sh\n#TEST_CASE more_men\n$more_men [5,3,1,-50,-1,-99]\ndraw\n$more_men [5,-3,1,-50,-1,-99]\nwomen\n$more_men [5,3,1,-50,-1,99]\nmen\n$end\n```\n\n```sh\n#TEST_CASE half_compare\n$half_compare [5,-5]\ndraw\n$half_compare [5,-4]\nfirst\n$half_compare [5,-6]\nsecond\n$half_compare [5,3]\nfirst\n$half_compare [3,5]\nsecond\n$half_compare [5,3,-1,50,10,-999]\nsecond\n$half_compare [50,-98,2,-50,-1,-99]\ndraw\n$half_compare [51,99,1,-50,-1,-99]\nfirst\n$end\n```\n\n```sh\n#TEST_CASE sex_battle\n$sex_battle [5,3,-1,-50,-10,-999]\nwomen\n$sex_battle [50,98,2,-50,-1,9991]\nmen\n$sex_battle [-50,99,1,50,-1,-99]\ndraw\n$end\n```\n\n## Alien\n\n[![_](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/contagem/../../wiki/images/alien4.jpg)](https://www.youtube.com/watch?v=yEks2RnwgeA)\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT count\ncount [5,3,-1,-50,-1,-99] -1\ncount [-1,-50,-1,-99,-444] 10\nend\n======== EXPECT\n$count [5,3,-1,-50,-1,-99] -1\n2\n$count [-1,-50,-1,-99,-444] 10\n0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT sum\nsum [1,-1]\nsum [5,3,-1]\nsum [-1,-50]\nend\n======== EXPECT\n$sum [1,-1]\n2\n$sum [5,3,-1]\n9\n$sum [-1,-50]\n51\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT average\naverage [5,3,-1,-50,-1,-99]\naverage [-1,-50,-1,-99,-444]\nend\n======== EXPECT\n$average [5,3,-1,-50,-1,-99]\n26.50\n$average [-1,-50,-1,-99,-444]\n119.00\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT more_men\nmore_men [5,3,1,-50,-1,-99]\nmore_men [5,-3,1,-50,-1,-99]\nmore_men [5,3,1,-50,-1,99]\nend\n======== EXPECT\n$more_men [5,3,1,-50,-1,-99]\ndraw\n$more_men [5,-3,1,-50,-1,-99]\nwomen\n$more_men [5,3,1,-50,-1,99]\nmen\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT half_compare\nhalf_compare [5,-5]\nhalf_compare [5,-4]\nhalf_compare [5,-6]\nhalf_compare [5,3]\nhalf_compare [3,5]\nhalf_compare [5,3,-1,50,10,-999]\nhalf_compare [50,-98,2,-50,-1,-99]\nhalf_compare [51,99,1,-50,-1,-99]\nend\n======== EXPECT\n$half_compare [5,-5]\ndraw\n$half_compare [5,-4]\nfirst\n$half_compare [5,-6]\nsecond\n$half_compare [5,3]\nfirst\n$half_compare [3,5]\nsecond\n$half_compare [5,3,-1,50,10,-999]\nsecond\n$half_compare [50,-98,2,-50,-1,-99]\ndraw\n$half_compare [51,99,1,-50,-1,-99]\nfirst\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT sex_battle\nsex_battle [5,3,-1,-50,-10,-999]\nsex_battle [50,98,2,-50,-1,9991]\nsex_battle [-50,99,1,50,-1,-99]\nend\n======== EXPECT\n$sex_battle [5,3,-1,-50,-10,-999]\nwomen\n$sex_battle [50,98,2,-50,-1,9991]\nmen\n$sex_battle [-50,99,1,50,-1,-99]\ndraw\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "function input() { return \"\"; }\nexport {};\n\nfunction count(vet: number[], value: number): number {\n    return 0;\n}\n\nfunction sum(vet: number[]): number {\n    return 0;\n}\n\nfunction average(vet: number[]): number {\n    return 0;\n}\n\nfunction more_men(vet: number[]): string {\n    return \"\";\n}\n\nfunction half_compare(vet: number[]): string {\n    return \"\";\n}\n\nfunction sex_battle(vet: number[]): string {\n    return \"\";\n}\n\nfunction main() {\n    while (true) {\n        let line = input();\n        console.log(\"$\" + line);\n\n        let args = line.split(\" \");\n        let cmd = args[0];\n\n        if      (cmd === \"end\")          { break;                                             }\n        else if (cmd === \"count\")        { console.log(count(to_vet(args[1]), +args[2]));     }\n        else if (cmd === \"sum\")          { console.log(sum(to_vet(args[1])));                 }\n        else if (cmd === \"average\")      { console.log(average(to_vet(args[1]))?.toFixed(2)); }\n        else if (cmd === \"more_men\")     { console.log(more_men(to_vet(args[1])));            }\n        else if (cmd === \"half_compare\") { console.log(half_compare(to_vet(args[1])));        }\n        else if (cmd === \"sex_battle\")   { console.log(sex_battle(to_vet(args[1])));          }\n        else                             { console.log(\"fail: comando invalido\");             }\n    }\n}\n\n// Fun\u00e7\u00e3o auxiliar para converter de string para vetor\n// \"[1,2,3,4]\" para [1, 2, 3, 4]\nfunction to_vet(token: string): number[] {\n    let size = token.length;\n    let inside = token.substring(1, size - 1);\n    return inside === \"\" ? [] : inside.split(\",\").map(x => +x)\n}\n\n\nmain()\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.List;\nimport java.util.Arrays;\nimport java.util.Scanner;\nimport java.util.ArrayList;\nimport java.text.DecimalFormat;\n\nclass Student {\n\n    public static int count(List<Integer> vet, int value) {\n        return 0;\n    }\n\n    public static int sum(List<Integer> vet) {\n        return 0;\n    }\n\n    public static double average(List<Integer> vet) {\n        return 0;\n    }\n\n    public static String moreMen(List<Integer> vet) {\n        return \"\";\n    }\n\n    public static String halfCompare(List<Integer> vet) {\n        return \"\";\n    }\n\n    public static String sexBattle(List<Integer> vet) {\n        return \"\";\n    }\n}\n\n\npublic class Shell {\n    public static void main(String[] _args) {\n        while (true) {\n            String line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n            \n            var args = line.split(\" \");\n            var cmd = args[0];\n            \n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (args[0].equals(\"count\")) {\n                int result = Student.count(strToVet(args[1]), Integer.parseInt(args[2]));\n                System.out.println(\"\" + result);\n            }\n            else if (args[0].equals(\"half_compare\")) {\n                String result = Student.halfCompare(strToVet(args[1]));\n                System.out.println(result);\n            }\n            else if (args[0].equals(\"sex_battle\")) {\n                String result = Student.sexBattle(strToVet(args[1]));\n                System.out.println(result);\n            }\n            else if (args[0].equals(\"sum\")) {\n                int result = Student.sum(strToVet(args[1]));\n                System.out.println(\"\" + result);\n            }\n            else if (args[0].equals(\"average\")) {\n                DecimalFormat df = new DecimalFormat(\"0.00\");\n                String result = df.format(Student.average(strToVet(args[1])));\n                System.out.println(result);\n            }\n            else if (args[0].equals(\"more_men\")) {\n                String result = Student.moreMen(strToVet(args[1]));\n                System.out.println(result);\n            }\n            else {\n                System.out.println(\"fail: comando invalido\");\n            }\n        }\n    }\n\n    public static List<Integer> strToVet(String s) {\n        if (s.length() == 2) return new ArrayList<>();\n        List<String> parts = Arrays.asList(s.substring(1, s.length() - 1).split(\",\"));\n        List<Integer> result = new ArrayList<>();\n        for (String part : parts) {\n            result.add(Integer.parseInt(part.trim()));\n        }\n        return result;\n    }\n\n    static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include <sstream>\n#include <iomanip> //setprecision\nusing namespace std;\n\ninline int count(vector<int> vet, int x) {\n    (void) vet;\n    (void) x;\n    return 0;\n}\n\ninline int sum(vector<int> vet) {\n    (void) vet;\n    return 0;\n}\n\ninline double average(const vector<int>& vet) {\n    // (void) vet;\n    return 0;\n}\n\ninline string more_men(const vector<int>& vet) {\n    (void) vet;\n    return \"\";\n}\n\ninline string half_compare(const vector<int>& vet) {\n    (void) vet;\n    return \"\";\n}\n\ninline string sex_battle(const vector<int>& vet) {\n    (void) vet;\n    return \"\";\n}\n\nvector<int> str2vet(string s);\nvector<string> split(string s, char delim);\n\nint main() {\n    while (true) {\n\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        auto args = split(line, ' ');\n\n        if (args[0] == \"end\") {\n            break;\n        } else if (args[0] == \"count\") {\n            cout << count(str2vet(args[1]), stoi(args[2])) << endl;\n        } else if (args[0] == \"sum\") {\n            cout << sum(str2vet(args[1])) << endl;\n        } else if (args[0] == \"more_men\") {\n            cout << more_men(str2vet(args[1])) << endl;\n        } else if (args[0] == \"half_compare\") {\n            cout << half_compare(str2vet(args[1])) << endl;\n        } else if (args[0] == \"more_men_or_women\") {\n            cout << more_men(str2vet(args[1])) << endl;\n        } else if (args[0] == \"sex_battle\") {\n            cout << sex_battle(str2vet(args[1])) << endl;\n        } else if (args[0] == \"average\") {\n            cout << fixed << setprecision(2) << average(str2vet(args[1])) << endl;\n        } else {\n            cout << \"fail: unknown command\" << endl;\n        }\n    }     \n}\n\nvector<int> str2vet(string s) {\n    vector<int> vet;\n    auto sub = s.substr(1, s.size() - 2);\n    stringstream ss(sub);\n    string token;\n    while (getline(ss, token, ',')) {\n        vet.push_back(stoi(token));\n    }\n    return vet;\n}\n\nvector<string> split(string s, char delim) {\n    vector<string> tokens;\n    stringstream ss(s);\n    string token;\n    while (getline(ss, token, delim)) {\n        tokens.push_back(token);\n    }\n    return tokens;\n}\n",
                "type": "show"
            }
        ],
        "go": [
            {
                "name": "shell.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc count(vet []int, x int) int {\n\t_ = vet\n\t_ = x\n\treturn 0\n}\n\nfunc sum(vet []int) int {\n\t_ = vet\n\treturn 0\n}\n\nfunc average(vet []int) float64 {\n\treturn 0\n}\n\nfunc moreMen(vet []int) string {\n\t_ = vet\n\treturn \"\"\n}\n\nfunc halfCompare(vet []int) string {\n\t_ = vet\n\treturn \"\"\n}\n\nfunc sexBattle(vet []int) string {\n\t_ = vet\n\treturn \"\"\n}\n\n// Fun\u00e7\u00f5es auxiliares\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tfmt.Printf(\"$%s\\n\", line)\n\t\targs := strings.Fields(line)\n\t\tif len(args) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tswitch args[0] {\n\t\tcase \"end\":\n\t\t\treturn\n\t\tcase \"count\":\n\t\t\tfmt.Println(count(str2vet(args[1]), toInt(args[2])))\n\t\tcase \"sum\":\n\t\t\tfmt.Println(sum(str2vet(args[1])))\n\t\tcase \"average\":\n\t\t\tfmt.Printf(\"%.2f\\n\", average(str2vet(args[1])))\n\t\tcase \"more_men\":\n\t\t\tfmt.Println(moreMen(str2vet(args[1])))\n\t\tcase \"half_compare\":\n\t\t\tfmt.Println(halfCompare(str2vet(args[1])))\n\t\tcase \"sex_battle\":\n\t\t\tfmt.Println(sexBattle(str2vet(args[1])))\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: unknown command\")\n\t\t}\n\t}\n}\n\nfunc str2vet(s string) []int {\n\tsub := s[1 : len(s)-1]\n\tparts := strings.Split(sub, \",\")\n\tvar vet []int\n\tfor _, part := range parts {\n\t\tif part == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tval, _ := strconv.Atoi(part)\n\t\tvet = append(vet, val)\n\t}\n\treturn vet\n}\n\nfunc toInt(s string) int {\n\tval, _ := strconv.Atoi(s)\n\treturn val\n}\n",
                "type": "show"
            }
        ]
    }
}
