{
    "title": "@contagem: Estressados Opera\u00e7\u00f5es II",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@contagem: Estressados Opera\u00e7\u00f5es II</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Estressados Opera\u00e7\u00f5es II</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n<th><a href=\"#alien\">Alien</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"cover\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/contagem/cover.jpg\" /></p>\n<hr />\n<h2>Intro</h2>\n<ul>\n<li><strong>count</strong>: quantas vezes o valor X apareceu na fila?</li>\n<li><strong>sum</strong>: qual a soma de todos os valores de stress da fila?</li>\n<li><strong>average</strong>: qual a m\u00e9dia de stress?</li>\n<li><strong>half_compare</strong>: qual metade da lista \u00e9 mais estressada? A primeira metade ou a segunda metade? A quantidade de elementos na lista sempre ser\u00e1 par. [draw, first, second]</li>\n<li><strong>more_men_or_women</strong>: existem mais homens ou mulheres? [draw, men, women]</li>\n<li><strong>sex_battle</strong>: quem \u00e9 mais estressado em m\u00e9dia? [draw, men, women]</li>\n</ul>\n<h2>Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/contagem/.cache/draft/cpp/shell.cpp\">shell.cpp</a></li>\n</ul>\n</li>\n<li>go<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/contagem/.cache/draft/go/shell.go\">shell.go</a></li>\n</ul>\n</li>\n<li>java<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/contagem/.cache/draft/java/Shell.java\">Shell.java</a></li>\n</ul>\n</li>\n<li>ts<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/contagem/.cache/draft/ts/shell.ts\">shell.ts</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n\n<h2>Shell</h2>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE count</span>\n<span class=\"nv\">$count</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,3,-1,-50,-1,-99<span class=\"o\">]</span><span class=\"w\"> </span>-1\n<span class=\"m\">2</span>\n<span class=\"nv\">$count</span><span class=\"w\"> </span><span class=\"o\">[</span>-1,-50,-1,-99,-444<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"m\">10</span>\n<span class=\"m\">0</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE sum</span>\n<span class=\"nv\">$sum</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,-1<span class=\"o\">]</span>\n<span class=\"m\">2</span>\n<span class=\"nv\">$sum</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,3,-1<span class=\"o\">]</span>\n<span class=\"m\">9</span>\n<span class=\"nv\">$sum</span><span class=\"w\"> </span><span class=\"o\">[</span>-1,-50<span class=\"o\">]</span>\n<span class=\"m\">51</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE average</span>\n<span class=\"nv\">$average</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,3,-1,-50,-1,-99<span class=\"o\">]</span>\n<span class=\"m\">26</span>.50\n<span class=\"nv\">$average</span><span class=\"w\"> </span><span class=\"o\">[</span>-1,-50,-1,-99,-444<span class=\"o\">]</span>\n<span class=\"m\">119</span>.00\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE more_men</span>\n<span class=\"nv\">$more_men</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,3,1,-50,-1,-99<span class=\"o\">]</span>\ndraw\n<span class=\"nv\">$more_men</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,-3,1,-50,-1,-99<span class=\"o\">]</span>\nwomen\n<span class=\"nv\">$more_men</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,3,1,-50,-1,99<span class=\"o\">]</span>\nmen\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE half_compare</span>\n<span class=\"nv\">$half_compare</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,-5<span class=\"o\">]</span>\ndraw\n<span class=\"nv\">$half_compare</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,-4<span class=\"o\">]</span>\nfirst\n<span class=\"nv\">$half_compare</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,-6<span class=\"o\">]</span>\nsecond\n<span class=\"nv\">$half_compare</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,3<span class=\"o\">]</span>\nfirst\n<span class=\"nv\">$half_compare</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">3</span>,5<span class=\"o\">]</span>\nsecond\n<span class=\"nv\">$half_compare</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,3,-1,50,10,-999<span class=\"o\">]</span>\nsecond\n<span class=\"nv\">$half_compare</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">50</span>,-98,2,-50,-1,-99<span class=\"o\">]</span>\ndraw\n<span class=\"nv\">$half_compare</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">51</span>,99,1,-50,-1,-99<span class=\"o\">]</span>\nfirst\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE sex_battle</span>\n<span class=\"nv\">$sex_battle</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>,3,-1,-50,-10,-999<span class=\"o\">]</span>\nwomen\n<span class=\"nv\">$sex_battle</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">50</span>,98,2,-50,-1,9991<span class=\"o\">]</span>\nmen\n<span class=\"nv\">$sex_battle</span><span class=\"w\"> </span><span class=\"o\">[</span>-50,99,1,50,-1,-99<span class=\"o\">]</span>\ndraw\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<h2>Alien</h2>\n<p><a href=\"https://www.youtube.com/watch?v=yEks2RnwgeA\"><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/contagem/../../wiki/images/alien4.jpg\" /></a></p>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT count\ncount [5,3,-1,-50,-1,-99] -1\ncount [-1,-50,-1,-99,-444] 10\nend\n======== EXPECT\n$count [5,3,-1,-50,-1,-99] -1\n2\n$count [-1,-50,-1,-99,-444] 10\n0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT sum\nsum [1,-1]\nsum [5,3,-1]\nsum [-1,-50]\nend\n======== EXPECT\n$sum [1,-1]\n2\n$sum [5,3,-1]\n9\n$sum [-1,-50]\n51\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT average\naverage [5,3,-1,-50,-1,-99]\naverage [-1,-50,-1,-99,-444]\nend\n======== EXPECT\n$average [5,3,-1,-50,-1,-99]\n26.50\n$average [-1,-50,-1,-99,-444]\n119.00\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT more_men\nmore_men [5,3,1,-50,-1,-99]\nmore_men [5,-3,1,-50,-1,-99]\nmore_men [5,3,1,-50,-1,99]\nend\n======== EXPECT\n$more_men [5,3,1,-50,-1,-99]\ndraw\n$more_men [5,-3,1,-50,-1,-99]\nwomen\n$more_men [5,3,1,-50,-1,99]\nmen\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT half_compare\nhalf_compare [5,-5]\nhalf_compare [5,-4]\nhalf_compare [5,-6]\nhalf_compare [5,3]\nhalf_compare [3,5]\nhalf_compare [5,3,-1,50,10,-999]\nhalf_compare [50,-98,2,-50,-1,-99]\nhalf_compare [51,99,1,-50,-1,-99]\nend\n======== EXPECT\n$half_compare [5,-5]\ndraw\n$half_compare [5,-4]\nfirst\n$half_compare [5,-6]\nsecond\n$half_compare [5,3]\nfirst\n$half_compare [3,5]\nsecond\n$half_compare [5,3,-1,50,10,-999]\nsecond\n$half_compare [50,-98,2,-50,-1,-99]\ndraw\n$half_compare [51,99,1,-50,-1,-99]\nfirst\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT sex_battle\nsex_battle [5,3,-1,-50,-10,-999]\nsex_battle [50,98,2,-50,-1,9991]\nsex_battle [-50,99,1,50,-1,-99]\nend\n======== EXPECT\n$sex_battle [5,3,-1,-50,-10,-999]\nwomen\n$sex_battle [50,98,2,-50,-1,9991]\nmen\n$sex_battle [-50,99,1,50,-1,-99]\ndraw\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "function input() { return \"\"; }\nexport {};\n\nfunction count(vet: number[], value: number): number {\n    return 0;\n}\n\nfunction sum(vet: number[]): number {\n    return 0;\n}\n\nfunction average(vet: number[]): number {\n    return 0;\n}\n\nfunction more_men(vet: number[]): string {\n    return \"\";\n}\n\nfunction half_compare(vet: number[]): string {\n    return \"\";\n}\n\nfunction sex_battle(vet: number[]): string {\n    return \"\";\n}\n\nfunction main() {\n    while (true) {\n        let line = input();\n        console.log(\"$\" + line);\n\n        let args = line.split(\" \");\n        let cmd = args[0];\n\n        if      (cmd === \"end\")          { break;                                             }\n        else if (cmd === \"count\")        { console.log(count(to_vet(args[1]), +args[2]));     }\n        else if (cmd === \"sum\")          { console.log(sum(to_vet(args[1])));                 }\n        else if (cmd === \"average\")      { console.log(average(to_vet(args[1]))?.toFixed(2)); }\n        else if (cmd === \"more_men\")     { console.log(more_men(to_vet(args[1])));            }\n        else if (cmd === \"half_compare\") { console.log(half_compare(to_vet(args[1])));        }\n        else if (cmd === \"sex_battle\")   { console.log(sex_battle(to_vet(args[1])));          }\n        else                             { console.log(\"fail: comando invalido\");             }\n    }\n}\n\n// Fun\u00e7\u00e3o auxiliar para converter de string para vetor\n// \"[1,2,3,4]\" para [1, 2, 3, 4]\nfunction to_vet(token: string): number[] {\n    let size = token.length;\n    let inside = token.substring(1, size - 1);\n    return inside === \"\" ? [] : inside.split(\",\").map(x => +x)\n}\n\n\nmain()\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.List;\nimport java.util.Arrays;\nimport java.util.Scanner;\nimport java.util.ArrayList;\nimport java.text.DecimalFormat;\n\nclass Student {\n\n    public static int count(List<Integer> vet, int value) {\n        return 0;\n    }\n\n    public static int sum(List<Integer> vet) {\n        return 0;\n    }\n\n    public static double average(List<Integer> vet) {\n        return 0;\n    }\n\n    public static String moreMen(List<Integer> vet) {\n        return \"\";\n    }\n\n    public static String halfCompare(List<Integer> vet) {\n        return \"\";\n    }\n\n    public static String sexBattle(List<Integer> vet) {\n        return \"\";\n    }\n}\n\n\npublic class Shell {\n    public static void main(String[] _args) {\n        while (true) {\n            String line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n            \n            var args = line.split(\" \");\n            var cmd = args[0];\n            \n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (args[0].equals(\"count\")) {\n                int result = Student.count(strToVet(args[1]), Integer.parseInt(args[2]));\n                System.out.println(\"\" + result);\n            }\n            else if (args[0].equals(\"half_compare\")) {\n                String result = Student.halfCompare(strToVet(args[1]));\n                System.out.println(result);\n            }\n            else if (args[0].equals(\"sex_battle\")) {\n                String result = Student.sexBattle(strToVet(args[1]));\n                System.out.println(result);\n            }\n            else if (args[0].equals(\"sum\")) {\n                int result = Student.sum(strToVet(args[1]));\n                System.out.println(\"\" + result);\n            }\n            else if (args[0].equals(\"average\")) {\n                DecimalFormat df = new DecimalFormat(\"0.00\");\n                String result = df.format(Student.average(strToVet(args[1])));\n                System.out.println(result);\n            }\n            else if (args[0].equals(\"more_men\")) {\n                String result = Student.moreMen(strToVet(args[1]));\n                System.out.println(result);\n            }\n            else {\n                System.out.println(\"fail: comando invalido\");\n            }\n        }\n    }\n\n    public static List<Integer> strToVet(String s) {\n        if (s.length() == 2) return new ArrayList<>();\n        List<String> parts = Arrays.asList(s.substring(1, s.length() - 1).split(\",\"));\n        List<Integer> result = new ArrayList<>();\n        for (String part : parts) {\n            result.add(Integer.parseInt(part.trim()));\n        }\n        return result;\n    }\n\n    static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include <sstream>\n#include <iomanip> //setprecision\nusing namespace std;\n\ninline int count(vector<int> vet, int x) {\n    (void) vet;\n    (void) x;\n    return 0;\n}\n\ninline int sum(vector<int> vet) {\n    (void) vet;\n    return 0;\n}\n\ninline double average(const vector<int>& vet) {\n    // (void) vet;\n    return 0;\n}\n\ninline string more_men(const vector<int>& vet) {\n    (void) vet;\n    return \"\";\n}\n\ninline string half_compare(const vector<int>& vet) {\n    (void) vet;\n    return \"\";\n}\n\ninline string sex_battle(const vector<int>& vet) {\n    (void) vet;\n    return \"\";\n}\n\nvector<int> str2vet(string s);\nvector<string> split(string s, char delim);\n\nint main() {\n    while (true) {\n\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        auto args = split(line, ' ');\n\n        if (args[0] == \"end\") {\n            break;\n        } else if (args[0] == \"count\") {\n            cout << count(str2vet(args[1]), stoi(args[2])) << endl;\n        } else if (args[0] == \"sum\") {\n            cout << sum(str2vet(args[1])) << endl;\n        } else if (args[0] == \"more_men\") {\n            cout << more_men(str2vet(args[1])) << endl;\n        } else if (args[0] == \"half_compare\") {\n            cout << half_compare(str2vet(args[1])) << endl;\n        } else if (args[0] == \"more_men_or_women\") {\n            cout << more_men(str2vet(args[1])) << endl;\n        } else if (args[0] == \"sex_battle\") {\n            cout << sex_battle(str2vet(args[1])) << endl;\n        } else if (args[0] == \"average\") {\n            cout << fixed << setprecision(2) << average(str2vet(args[1])) << endl;\n        } else {\n            cout << \"fail: unknown command\" << endl;\n        }\n    }     \n}\n\nvector<int> str2vet(string s) {\n    vector<int> vet;\n    auto sub = s.substr(1, s.size() - 2);\n    stringstream ss(sub);\n    string token;\n    while (getline(ss, token, ',')) {\n        vet.push_back(stoi(token));\n    }\n    return vet;\n}\n\nvector<string> split(string s, char delim) {\n    vector<string> tokens;\n    stringstream ss(s);\n    string token;\n    while (getline(ss, token, delim)) {\n        tokens.push_back(token);\n    }\n    return tokens;\n}\n",
                "type": "show"
            }
        ],
        "go": [
            {
                "name": "shell.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc count(vet []int, x int) int {\n\t_ = vet\n\t_ = x\n\treturn 0\n}\n\nfunc sum(vet []int) int {\n\t_ = vet\n\treturn 0\n}\n\nfunc average(vet []int) float64 {\n\treturn 0\n}\n\nfunc moreMen(vet []int) string {\n\t_ = vet\n\treturn \"\"\n}\n\nfunc halfCompare(vet []int) string {\n\t_ = vet\n\treturn \"\"\n}\n\nfunc sexBattle(vet []int) string {\n\t_ = vet\n\treturn \"\"\n}\n\n// Fun\u00e7\u00f5es auxiliares\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tfmt.Printf(\"$%s\\n\", line)\n\t\targs := strings.Fields(line)\n\t\tif len(args) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tswitch args[0] {\n\t\tcase \"end\":\n\t\t\treturn\n\t\tcase \"count\":\n\t\t\tfmt.Println(count(str2vet(args[1]), toInt(args[2])))\n\t\tcase \"sum\":\n\t\t\tfmt.Println(sum(str2vet(args[1])))\n\t\tcase \"average\":\n\t\t\tfmt.Printf(\"%.2f\\n\", average(str2vet(args[1])))\n\t\tcase \"more_men\":\n\t\t\tfmt.Println(moreMen(str2vet(args[1])))\n\t\tcase \"half_compare\":\n\t\t\tfmt.Println(halfCompare(str2vet(args[1])))\n\t\tcase \"sex_battle\":\n\t\t\tfmt.Println(sexBattle(str2vet(args[1])))\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: unknown command\")\n\t\t}\n\t}\n}\n\nfunc str2vet(s string) []int {\n\tsub := s[1 : len(s)-1]\n\tparts := strings.Split(sub, \",\")\n\tvar vet []int\n\tfor _, part := range parts {\n\t\tif part == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tval, _ := strconv.Atoi(part)\n\t\tvet = append(vet, val)\n\t}\n\treturn vet\n}\n\nfunc toInt(s string) int {\n\tval, _ := strconv.Atoi(s)\n\treturn val\n}\n",
                "type": "show"
            }
        ]
    }
}
