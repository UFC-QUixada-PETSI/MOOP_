{
    "title": "@junkfood: Comprando comida cara e duvidosa",
    "description": "# Comprando comida cara e duvidosa\n\n<!-- toch -->\n[Intro](#intro) | [Draft](#draft) | [Guide](#guide) | [Shell](#shell) | [Resolu\u00e7\u00e3o](#resolu\u00e7\u00e3o)\n-- | -- | -- | -- | --\n<!-- toch -->\n\n![cover](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/junkfood/cover.jpg)\n\n## Intro\n\nM\u00e1quinas de junk food s\u00f3 servem pra 2 coisas, 1 vender comidas que fazem mal pra sa\u00fade, 2 rejeitar as notas velhas que voc\u00ea tem.\n\nO objetivo dessa atividade \u00e9 implementar uma classe respons\u00e1vel por uma m\u00e1quina de vender JunkFood. Na m\u00e1quina existem v\u00e1rias espirais (slots). Uma espiral cont\u00e9m uma certa quantidade de produtos do mesmo tipo e mesmo pre\u00e7o. O usu\u00e1rio coloca o dinheiro, compra o produto e recebe o troco.\n\n- **Descri\u00e7\u00e3o**\n  - A m\u00e1quina de vendas \u00e9 representada pela classe `Machine`, que cont\u00e9m um conjunto de \"espirais\", cada uma associada a um produto.\n  - Os m\u00e9todos implementados permitem configurar os produtos dispon\u00edveis na m\u00e1quina, inserir dinheiro, solicitar troco, comprar produtos e visualizar o estado atual da m\u00e1quina.\n  - Cada espiral pode conter um produto, representado pela classe `Slot`, que armazena o nome, quantidade e pre\u00e7o do produto.\n  - Os m\u00e9todos fornecidos incluem valida\u00e7\u00f5es para garantir a integridade das opera\u00e7\u00f5es, como verificar se o saldo \u00e9 suficiente para a compra, se h\u00e1 produtos dispon\u00edveis, entre outros.\n\n- **Responsabilidades**\n  - Na classe Slot\n    - Inicialize as vari\u00e1veis do construtor\n      - name: string = \"empty\",\n      - qtd: number = 0 e\n      - preco: number = 0.0\n    - Implemente os gets e sets\n    - Crie o retorno do toString como no modelo: `[   empty : 0 U : 0.00 RS]`\n  - A classe `Machine` \u00e9 respons\u00e1vel por gerenciar as opera\u00e7\u00f5es da m\u00e1quina de vendas.\n    - M\u00e9todos a serem implementados:\n      - `getSlot(index: int) : Slot`:  Se houver slot nessa posi\u00e7\u00e3o, retorna.\n      - `setSlot(indice: number, name: string, qtd: number, price: number)`: Altera o valor slot na posi\u00e7\u00e3o indice.\n        - erro: `fail: indice nao existe`.\n      - `limpar(indice: number)`: Limpa as informa\u00e7\u00f5es do slot nessa posi\u00e7\u00e3o.\n      - `inserirDinheiro(value: number)`: Insere dinheiro na m\u00e1quina.\n      - `pedirTroco(): number`: Retorna o troco para o cliente.\n      - `comprar(ind: number)`: Realiza a compra de um produto de um slot na m\u00e1quina. A compra s\u00f3 pode ser realizada se existir produto nessa posi\u00e7\u00e3o, se o saldo for suficiente e se a quantidade do produto for maior que zero. Caso positivo, quantidade \u00e9 reduzida em 1 e o valor do produto \u00e9 decrementado no saldo.\n        - erros: `fail: indice nao existe`, `fail: saldo insuficiente`, `fail: espiral sem produtos`.\n      - `getSaldo(): number`: Retorna o saldo atual na m\u00e1quina.\n      - `toString(): string`: Retorna uma representa\u00e7\u00e3o em string do estado atual da m\u00e1quina.\n\n## Draft\n\n- [draft.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/junkfood/.cache/draft.cpp)\n- [draft.ts](https://github.com/qxcodepoo/arcade/blob/master/base/junkfood/.cache/draft.ts)\n\n## Guide\n\n![diagrama](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/junkfood/diagrama.png)\n\n<!-- load diagrama.puml fenced=ts:filter -->\n\n```ts\n\n@startuml\n\nskinparam defaultFontName \"Source Code Pro\"\nskinparam dpi 150\n\n\nclass Slot {\n    - name : String\n    - price : float\n    - quantity : int\n    __\n    + Slot(name : String, price: float, quantity: int)\n    __\n    + getName() : String\n    + getPrice() : float\n    + getQuantity() : int\n    + setName(name: String) : void\n    + setPrice(price: float) : void\n    + setQuantity(quantity: int) : void\n    __\n    + toString() : String\n}\n\nclass VendingMachine {\n    - slots : Array<Slot>\n    - profit : float\n    - cash   : float\n    - capacity : int\n    __\n\n    ' inicialize a m\u00e1quina criando todos os slots\n    + VendingMachine(capacity: int)\n    __\n\n    ' se houver slot nessa posi\u00e7\u00e3o, retorne\n    ' se n\u00e3o, retorne null ou lan\u00e7e uma excess\u00e3o\n    + getSlot(index: int) : Slot\n\n    ' altere o valor slot nessa posi\u00e7\u00e3o\n    + setSlot(index: int, slot: Slot) : void\n\n    ' limpe as informa\u00e7\u00f5es do slot nessa posi\u00e7\u00e3o\n    + clearSlot(index: int) : void\n    __\n\n    ' adicione dinheiro no cash da m\u00e1quina\n    + insertCash(cash: float) : void\n\n    ' retorne o valor do cash da m\u00e1quina e zere o cash\n    + withdrawCash() : float\n\n    ' informe o valor do cash sem zerar o cash\n    + getCash() : float\n\n    ' informe o valor apurado com todas as vendas\n    + getProfit() : float\n    __\n\n    ' se existir produto nessa posi\u00e7\u00e3o\n    ' se o dinheiro do cash for suficiente\n    ' se a quantidade do produto for maior que zero\n    ' deduza da quantidade 1\n    ' deduza do cash o valor do produto\n    + buyItem(index: int) : void\n    --\n    + toString() : String\n}\n\nVendingMachine \"1\" o-- \"1..*\" Slot\n@enduml\n\n```\n\n<!-- load -->\n\n***\n\n- Fa\u00e7a primeiro a classe Espiral.\n- No construtor da class Maquina receba a quantidade de espirais. Para iniciar o vetor de espirais voc\u00ea pode fazer um la\u00e7o inserindo qtd Espirais no vetor (Java).\n\n- Exemplo em Java\n\n```java\nclass Espiral{\n    ...\n    public Espiral({\n    ...\n    }\n}\n\nclass Machine{\n    ...\n    espirais : ArrayList<Espiral>;\n    public Machine(nespirais : number){\n        this.espirais = new ArrayList<>();\n        for(int i = 0; i < nespirais; i++){\n            this.espirais.add(new Espiral(\"empty\", 0, 0f)); //adicionando nespirais vazias\n        }\n    }\n}\n```\n\n- Exemplo c++\n\n```c++\n//c++\nclass Espiral{\n    //atributos\n    Espiral(){\n        //inicializacao\n    }\n}\nclass Maquina{\n    std::vector<Espiral> espirais;\n    //outros atributos\npublic:\n    //invocando o construtor na lista de inicializa\u00e7\u00e3o\n    Maquina(int nespirais): espirais{nespirais}{ \n    }\n}\n```\n\n## Shell\n\n```bash\n#TEST_CASE init\n\n# init _espirais\n$init 3\n$show\nsaldo: 0.00\n0 [   empty : 0 U : 0.00 RS]\n1 [   empty : 0 U : 0.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n\n#TEST_CASE inserindo comida\n# set _ind _nome _qtd _valor \n$set 2 todinho 3 2.50\n$show\nsaldo: 0.00\n0 [   empty : 0 U : 0.00 RS]\n1 [   empty : 0 U : 0.00 RS]\n2 [ todinho : 3 U : 2.50 RS]\n\n$set 0 tampico 1 1.50\n$set 1 xaverde 3 5.00\n$show   \nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [ todinho : 3 U : 2.50 RS]\n\n#TEST_CASE limpando\n# limpar _ind\n$limpar 2\n$show\nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$set 4 ovo 2 4.30\nfail: indice nao existe\n\n#TEST_CASE dinheiro\n# dinheiro _valor\n$dinheiro 5\n$dinheiro 4\n$show   \nsaldo: 9.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n\n#TEST_CASE troco\n$troco\nvoce recebeu 9.00 RS\n$show\nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$dinheiro 8\n\n#TEST_CASE comprar\n# comprar _ind\n$comprar 1\nvoce comprou um xaverde\n\n#TEST_CASE comprar sem dinheiro\n$comprar 1\nfail: saldo insuficiente\n\n#TEST_CASE comprar\n$comprar 0\nvoce comprou um tampico\n$show\nsaldo: 1.50\n0 [ tampico : 0 U : 1.50 RS]\n1 [ xaverde : 2 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n\n#TEST_CASE comprar sem produtos\n$comprar 0\nfail: espiral sem produtos\n\n#TEST_CASE comprar fora do indice\n$comprar 4\nfail: indice nao existe\n\n$troco\nvoce recebeu 1.50 RS\n$end\n#__end__\n```\n\n## Resolu\u00e7\u00e3o\n\nN\u00e3o assista sem antes tentar resolver o problema: [LINK](https://youtu.be/wabygPIeP2w)\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT init\ninit 3\nshow\nend\n======== EXPECT\n$init 3\n$show\nsaldo: 0.00\n0 [   empty : 0 U : 0.00 RS]\n1 [   empty : 0 U : 0.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT inserindo comida\ninit 3\nshow\nset 2 todinho 3 2.50\nshow\nset 0 tampico 1 1.50\nset 1 xaverde 3 5.00\nshow   \nend\n======== EXPECT\n$init 3\n$show\nsaldo: 0.00\n0 [   empty : 0 U : 0.00 RS]\n1 [   empty : 0 U : 0.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$set 2 todinho 3 2.50\n$show\nsaldo: 0.00\n0 [   empty : 0 U : 0.00 RS]\n1 [   empty : 0 U : 0.00 RS]\n2 [ todinho : 3 U : 2.50 RS]\n$set 0 tampico 1 1.50\n$set 1 xaverde 3 5.00\n$show   \nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [ todinho : 3 U : 2.50 RS]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT limpando\ninit 3\nshow\nset 2 todinho 3 2.50\nshow\nset 0 tampico 1 1.50\nset 1 xaverde 3 5.00\nshow   \nlimpar 2\nshow\nset 4 ovo 2 4.30\nend\n======== EXPECT\n$init 3\n$show\nsaldo: 0.00\n0 [   empty : 0 U : 0.00 RS]\n1 [   empty : 0 U : 0.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$set 2 todinho 3 2.50\n$show\nsaldo: 0.00\n0 [   empty : 0 U : 0.00 RS]\n1 [   empty : 0 U : 0.00 RS]\n2 [ todinho : 3 U : 2.50 RS]\n$set 0 tampico 1 1.50\n$set 1 xaverde 3 5.00\n$show   \nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [ todinho : 3 U : 2.50 RS]\n$limpar 2\n$show\nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$set 4 ovo 2 4.30\nfail: indice nao existe\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dinheiro\ninit 3\nshow\nset 2 todinho 3 2.50\nshow\nset 0 tampico 1 1.50\nset 1 xaverde 3 5.00\nshow   \nlimpar 2\nshow\nset 4 ovo 2 4.30\ndinheiro 5\ndinheiro 4\nshow   \nend\n======== EXPECT\n$init 3\n$show\nsaldo: 0.00\n0 [   empty : 0 U : 0.00 RS]\n1 [   empty : 0 U : 0.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$set 2 todinho 3 2.50\n$show\nsaldo: 0.00\n0 [   empty : 0 U : 0.00 RS]\n1 [   empty : 0 U : 0.00 RS]\n2 [ todinho : 3 U : 2.50 RS]\n$set 0 tampico 1 1.50\n$set 1 xaverde 3 5.00\n$show   \nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [ todinho : 3 U : 2.50 RS]\n$limpar 2\n$show\nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$set 4 ovo 2 4.30\nfail: indice nao existe\n$dinheiro 5\n$dinheiro 4\n$show   \nsaldo: 9.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT troco\ninit 3\nshow\nset 2 todinho 3 2.50\nshow\nset 0 tampico 1 1.50\nset 1 xaverde 3 5.00\nshow   \nlimpar 2\nshow\nset 4 ovo 2 4.30\ndinheiro 5\ndinheiro 4\nshow   \ntroco\nshow\ndinheiro 8\nend\n======== EXPECT\n$init 3\n$show\nsaldo: 0.00\n0 [   empty : 0 U : 0.00 RS]\n1 [   empty : 0 U : 0.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$set 2 todinho 3 2.50\n$show\nsaldo: 0.00\n0 [   empty : 0 U : 0.00 RS]\n1 [   empty : 0 U : 0.00 RS]\n2 [ todinho : 3 U : 2.50 RS]\n$set 0 tampico 1 1.50\n$set 1 xaverde 3 5.00\n$show   \nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [ todinho : 3 U : 2.50 RS]\n$limpar 2\n$show\nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$set 4 ovo 2 4.30\nfail: indice nao existe\n$dinheiro 5\n$dinheiro 4\n$show   \nsaldo: 9.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$troco\nvoce recebeu 9.00 RS\n$show\nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$dinheiro 8\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT comprar\ninit 3\nshow\nset 2 todinho 3 2.50\nshow\nset 0 tampico 1 1.50\nset 1 xaverde 3 5.00\nshow   \nlimpar 2\nshow\nset 4 ovo 2 4.30\ndinheiro 5\ndinheiro 4\nshow   \ntroco\nshow\ndinheiro 8\ncomprar 1\nend\n======== EXPECT\n$init 3\n$show\nsaldo: 0.00\n0 [   empty : 0 U : 0.00 RS]\n1 [   empty : 0 U : 0.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$set 2 todinho 3 2.50\n$show\nsaldo: 0.00\n0 [   empty : 0 U : 0.00 RS]\n1 [   empty : 0 U : 0.00 RS]\n2 [ todinho : 3 U : 2.50 RS]\n$set 0 tampico 1 1.50\n$set 1 xaverde 3 5.00\n$show   \nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [ todinho : 3 U : 2.50 RS]\n$limpar 2\n$show\nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$set 4 ovo 2 4.30\nfail: indice nao existe\n$dinheiro 5\n$dinheiro 4\n$show   \nsaldo: 9.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$troco\nvoce recebeu 9.00 RS\n$show\nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$dinheiro 8\n$comprar 1\nvoce comprou um xaverde\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT comprar sem dinheiro\ninit 3\nshow\nset 2 todinho 3 2.50\nshow\nset 0 tampico 1 1.50\nset 1 xaverde 3 5.00\nshow   \nlimpar 2\nshow\nset 4 ovo 2 4.30\ndinheiro 5\ndinheiro 4\nshow   \ntroco\nshow\ndinheiro 8\ncomprar 1\ncomprar 1\nend\n======== EXPECT\n$init 3\n$show\nsaldo: 0.00\n0 [   empty : 0 U : 0.00 RS]\n1 [   empty : 0 U : 0.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$set 2 todinho 3 2.50\n$show\nsaldo: 0.00\n0 [   empty : 0 U : 0.00 RS]\n1 [   empty : 0 U : 0.00 RS]\n2 [ todinho : 3 U : 2.50 RS]\n$set 0 tampico 1 1.50\n$set 1 xaverde 3 5.00\n$show   \nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [ todinho : 3 U : 2.50 RS]\n$limpar 2\n$show\nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$set 4 ovo 2 4.30\nfail: indice nao existe\n$dinheiro 5\n$dinheiro 4\n$show   \nsaldo: 9.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$troco\nvoce recebeu 9.00 RS\n$show\nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$dinheiro 8\n$comprar 1\nvoce comprou um xaverde\n$comprar 1\nfail: saldo insuficiente\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT comprar\ninit 3\nshow\nset 2 todinho 3 2.50\nshow\nset 0 tampico 1 1.50\nset 1 xaverde 3 5.00\nshow   \nlimpar 2\nshow\nset 4 ovo 2 4.30\ndinheiro 5\ndinheiro 4\nshow   \ntroco\nshow\ndinheiro 8\ncomprar 1\ncomprar 1\ncomprar 0\nshow\nend\n======== EXPECT\n$init 3\n$show\nsaldo: 0.00\n0 [   empty : 0 U : 0.00 RS]\n1 [   empty : 0 U : 0.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$set 2 todinho 3 2.50\n$show\nsaldo: 0.00\n0 [   empty : 0 U : 0.00 RS]\n1 [   empty : 0 U : 0.00 RS]\n2 [ todinho : 3 U : 2.50 RS]\n$set 0 tampico 1 1.50\n$set 1 xaverde 3 5.00\n$show   \nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [ todinho : 3 U : 2.50 RS]\n$limpar 2\n$show\nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$set 4 ovo 2 4.30\nfail: indice nao existe\n$dinheiro 5\n$dinheiro 4\n$show   \nsaldo: 9.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$troco\nvoce recebeu 9.00 RS\n$show\nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$dinheiro 8\n$comprar 1\nvoce comprou um xaverde\n$comprar 1\nfail: saldo insuficiente\n$comprar 0\nvoce comprou um tampico\n$show\nsaldo: 1.50\n0 [ tampico : 0 U : 1.50 RS]\n1 [ xaverde : 2 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT comprar sem produtos\ninit 3\nshow\nset 2 todinho 3 2.50\nshow\nset 0 tampico 1 1.50\nset 1 xaverde 3 5.00\nshow   \nlimpar 2\nshow\nset 4 ovo 2 4.30\ndinheiro 5\ndinheiro 4\nshow   \ntroco\nshow\ndinheiro 8\ncomprar 1\ncomprar 1\ncomprar 0\nshow\ncomprar 0\nend\n======== EXPECT\n$init 3\n$show\nsaldo: 0.00\n0 [   empty : 0 U : 0.00 RS]\n1 [   empty : 0 U : 0.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$set 2 todinho 3 2.50\n$show\nsaldo: 0.00\n0 [   empty : 0 U : 0.00 RS]\n1 [   empty : 0 U : 0.00 RS]\n2 [ todinho : 3 U : 2.50 RS]\n$set 0 tampico 1 1.50\n$set 1 xaverde 3 5.00\n$show   \nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [ todinho : 3 U : 2.50 RS]\n$limpar 2\n$show\nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$set 4 ovo 2 4.30\nfail: indice nao existe\n$dinheiro 5\n$dinheiro 4\n$show   \nsaldo: 9.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$troco\nvoce recebeu 9.00 RS\n$show\nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$dinheiro 8\n$comprar 1\nvoce comprou um xaverde\n$comprar 1\nfail: saldo insuficiente\n$comprar 0\nvoce comprou um tampico\n$show\nsaldo: 1.50\n0 [ tampico : 0 U : 1.50 RS]\n1 [ xaverde : 2 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$comprar 0\nfail: espiral sem produtos\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT comprar fora do indice\ninit 3\nshow\nset 2 todinho 3 2.50\nshow\nset 0 tampico 1 1.50\nset 1 xaverde 3 5.00\nshow   \nlimpar 2\nshow\nset 4 ovo 2 4.30\ndinheiro 5\ndinheiro 4\nshow   \ntroco\nshow\ndinheiro 8\ncomprar 1\ncomprar 1\ncomprar 0\nshow\ncomprar 0\ncomprar 4\ntroco\nend\n======== EXPECT\n$init 3\n$show\nsaldo: 0.00\n0 [   empty : 0 U : 0.00 RS]\n1 [   empty : 0 U : 0.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$set 2 todinho 3 2.50\n$show\nsaldo: 0.00\n0 [   empty : 0 U : 0.00 RS]\n1 [   empty : 0 U : 0.00 RS]\n2 [ todinho : 3 U : 2.50 RS]\n$set 0 tampico 1 1.50\n$set 1 xaverde 3 5.00\n$show   \nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [ todinho : 3 U : 2.50 RS]\n$limpar 2\n$show\nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$set 4 ovo 2 4.30\nfail: indice nao existe\n$dinheiro 5\n$dinheiro 4\n$show   \nsaldo: 9.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$troco\nvoce recebeu 9.00 RS\n$show\nsaldo: 0.00\n0 [ tampico : 1 U : 1.50 RS]\n1 [ xaverde : 3 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$dinheiro 8\n$comprar 1\nvoce comprou um xaverde\n$comprar 1\nfail: saldo insuficiente\n$comprar 0\nvoce comprou um tampico\n$show\nsaldo: 1.50\n0 [ tampico : 0 U : 1.50 RS]\n1 [ xaverde : 2 U : 5.00 RS]\n2 [   empty : 0 U : 0.00 RS]\n$comprar 0\nfail: espiral sem produtos\n$comprar 4\nfail: indice nao existe\n$troco\nvoce recebeu 1.50 RS\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport { };\n\n\nfunction main() {\n    while (true) {\n        let line = input();\n        console.log(\"$\" + line);\n\n        let args = line.split(\" \");\n        let cmd = args[0];\n\n        if (cmd == \"show\") {\n        } else if (cmd == \"init\") {\n            // let qtd_espirais = parseInt(args[1]);\n        } else if (cmd == \"limpar\") {\n            // let indice = parseInt(args[1]);\n        } else if (cmd == \"dinheiro\") {\n            // let value = parseFloat(args[1]);\n        } else if (cmd == \"comprar\") {\n            // let ind = parseInt(args[1]);\n        } else if (cmd == \"set\") {\n            // let indice = parseInt(args[1]);\n            // let nome = args[2];\n            // let qtd = parseInt(args[3]);\n            // let preco = parseFloat(args[4]);\n        } else if (cmd == \"troco\") {\n        } else if (cmd == \"end\") {\n            break;\n        } else {\n            console.log(\"comando invalido\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.*;\n\npublic class Shell {\n\n    static Scanner scanner = new Scanner(System.in);\n    public static void main(String[] args) {\n\n        while (true) {\n            String line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            String[] argsSplit = line.split(\" \");\n            String cmd = argsSplit[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            } else if (cmd.equals(\"show\")) {\n            } else if (cmd.equals(\"init\")) {\n                // int qtdEspirais = Integer.parseInt(argsSplit[1]);\n            } else if (cmd.equals(\"limpar\")) {\n                // int indice = Integer.parseInt(argsSplit[1]);\n            } else if (cmd.equals(\"dinheiro\")) {\n                // double value = Double.parseDouble(argsSplit[1]);\n            } else if (cmd.equals(\"comprar\")) {\n                // int ind = Integer.parseInt(argsSplit[1]);\n            } else if (cmd.equals(\"set\")) {\n                // int indice = Integer.parseInt(argsSplit[1]);\n                // String nome = argsSplit[2];\n                // int qtd = Integer.parseInt(argsSplit[3]);\n                // double preco = Double.parseDouble(argsSplit[4]);\n            } else if (cmd.equals(\"troco\")) {\n                // double troco = machine.pedirTroco();\n            } else {\n                System.out.println(\"comando invalido\");\n            }\n        }\n    }\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include <sstream>\n#include <iomanip>\nusing namespace std;\n\ntemplate<typename CONTAINER, typename FUNC>\nstring map_join(const CONTAINER& cont, FUNC func, string delim) {\n    stringstream ss;\n    for (auto it = cont.begin(); it != cont.end(); it++) {\n        ss << (it == cont.begin() ? \"\" : delim);\n        ss << func(*it);\n    }\n    return ss.str();\n}\n\n\nint main() {\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        try {\n            if (cmd == \"show\") {\n                // IMPRIMIR\n            } else if (cmd == \"init\") {\n                // int n_espirais {};\n                // ss >> n_espirais;\n            } else if (cmd == \"limpar\") {\n                // int indice {};\n                // ss >> indice;\n            } else if (cmd == \"dinheiro\") {\n                // int value {};\n                // ss >> value;\n            } else if (cmd == \"comprar\") {\n                // int index {};\n                // ss >> index;\n            } else if (cmd == \"set\") {\n                // int index {};\n                // string name;\n                // int qtd {};\n                // double price {};\n                // ss >> index >> name >> qtd >> price;\n            } else if (cmd == \"troco\") {\n            } else if (cmd == \"end\") {\n                break;\n            } else {\n                cout << \"comando invalido\" << endl;\n            }\n        } catch (const char* e) {\n            cout << e << endl;\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
