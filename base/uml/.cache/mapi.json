{
    "title": "Relacionamentos Resumo",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>Relacionamentos Resumo</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n  </style>\n  <link rel=\"stylesheet\" href=\"/tmp/tmpe1nv0oyd.css\" />\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h1 id=\"relacionamentos-resumo\">Relacionamentos Resumo</h1>\n<p>Veja a vers\u00e3o online: <a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/uml/Readme.md\">aqui.</a></p>\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/uml/diagrama.png\"\nalt=\"_\" />\n<figcaption aria-hidden=\"true\">_</figcaption>\n</figure>\n<h2 id=\"rela\u00e7\u00f5es-de-agrega\u00e7\u00e3o-tem-umhas-a\">Rela\u00e7\u00f5es de Agrega\u00e7\u00e3o (tem\num/has a)</h2>\n<ul>\n<li>Casa e moradores: se a casa for destru\u00edda, os moradores n\u00e3o ser\u00e3o,\neles podem ser realocados.</li>\n<li>C\u00f4modo e m\u00f3veis: se o c\u00f4modo for destru\u00eddo, os m\u00f3veis n\u00e3o ser\u00e3o,\neles podem ser realocados.</li>\n<li>Tanto m\u00f3veis quanto moradores podem existir sem a casa ou o c\u00f4modo,\nrespectivamente.</li>\n</ul>\n<h2 id=\"rela\u00e7\u00f5es-de-composi\u00e7\u00e3o-cont\u00e9mcontains-a\">Rela\u00e7\u00f5es de composi\u00e7\u00e3o\n(cont\u00e9m/contains a)</h2>\n<ul>\n<li>Casa e c\u00f4modos: se a casa for destru\u00edda, os c\u00f4modos tamb\u00e9m\nser\u00e3o.</li>\n<li>C\u00f4modo e paredes: se o c\u00f4modo for destru\u00eddo, as paredes tamb\u00e9m\nser\u00e3o.</li>\n<li>Ambos os c\u00f4modos e as paredes n\u00e3o podem existir sem a casa ou o\nc\u00f4modo, respectivamente.</li>\n</ul>\n<h2\nid=\"rela\u00e7\u00f5es-de-interface-tem-a-capacidade-dehas-a-capacity-to\">Rela\u00e7\u00f5es\nde interface (tem a capacidade de/has a capacity to)</h2>\n<ul>\n<li>Tanto Pet quanto Pessoa s\u00e3o Moradores.</li>\n<li>Morador \u00e9 uma interface que define uma atribui\u00e7\u00e3o, reponsabilidade\nou papel que uma classe pode ter.</li>\n<li>Pessoa e Pet s\u00e3o classes que implementam a interface Morador.</li>\n</ul>\n<h2 id=\"rela\u00e7\u00f5es-de-heran\u00e7a-\u00e9-umis-a\">Rela\u00e7\u00f5es de heran\u00e7a (\u00e9 um/is\na)</h2>\n<ul>\n<li>Tanto Crian\u00e7a quanto Adulto s\u00e3o Pessoas.</li>\n<li>Pessoa \u00e9 uma classe abstrata, Crian\u00e7a e Adulto s\u00e3o classes\nconcretas.</li>\n</ul>\n<h2 id=\"diferen\u00e7as-entre-heran\u00e7a-e-interface\">Diferen\u00e7as entre heran\u00e7a e\ninterface</h2>\n<ul>\n<li>Flexibilidade: Interfaces s\u00e3o mais flex\u00edveis do que heran\u00e7a, pois\npermitem que as classes implementem m\u00faltiplos contratos, enquanto a\nheran\u00e7a pode ser mais restritiva com rela\u00e7\u00e3o a heran\u00e7a m\u00faltipla.</li>\n<li>Acoplamento: A heran\u00e7a tende a acoplar mais fortemente a subclasse \u00e0\nsuperclasse, enquanto interfaces promovem um acoplamento mais\nfraco.</li>\n<li>Funcionalidade: A heran\u00e7a pode ser usada para herdar implementa\u00e7\u00f5es\nde c\u00f3digo e estado (atributos), enquanto interfaces apenas especificam\num contrato de m\u00e9todos sem estados.</li>\n<li>Prop\u00f3sito: Heran\u00e7a \u00e9 usada para modelar uma rela\u00e7\u00e3o hier\u00e1rquica\nentre classes base e derivadas, enquanto interfaces s\u00e3o usadas para\ndefinir capacidades comuns entre classes que n\u00e3o necessariamente\ncompartilham uma rela\u00e7\u00e3o de pai-filho.</li>\n</ul>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": []
}
