{
    "title": "De c\u00edrculos e ret\u00e2ngulos, calcule a \u00e1rea e o @perimetro",
    "description": "# De c\u00edrculos e ret\u00e2ngulos, calcule a \u00e1rea e o @perimetro\n\n<!-- toch -->\n[Intro](#intro) | [Draft](#draft) | [Guide](#guide) | [Shell](#shell)\n-- | -- | -- | --\n<!-- toch -->\n\n![cover](cover.jpg)\n\n- Fa\u00e7a um programa para gerenciar figuras geom\u00e9tricas.\n- Deve ser poss\u00edvel conseguir obter a \u00e1rea e o per\u00edmetro de cada figura.\n\n## Intro\n\nAs figuras geom\u00e9tricas podem ser c\u00edrculos ou ret\u00e2ngulos.\n\nO ret\u00e2ngulo \u00e9 definido por dois pontos: o ponto inferior esquerdo e o ponto superior direito.\n\nO c\u00edrculo pode ser definido pelo ponto do centro e pelo raio.\n\n## Draft\n\n[draft.ts](.cache/draft.ts)\n[draft.cpp](.cache/draft.cpp)\n\n## Guide\n\n![diagrama](diagrama.png)\n\n<!-- load diagrama.puml fenced=ts:filter -->\n\n```ts\n\nclass Point2D {\n    + x: double\n    + y: double\n    \n    + Point2D(x: double, y: double)\n\n    ' gera uma string no formato\n    ' (0.00, 0.00)\n    + toString(): string\n}\n\nclass Calc {\n    ' m\u00e9todo est\u00e1tico para calcular a dist\u00e2ncia entre dois pontos\n    + {static} distance(a: Point2D, b: Point2D): double\n}\n\ninterface Shape {\n    ' getName(): string\n    + getName(): string\n\n    ' os m\u00e9todos abaixo n\u00e3o s\u00e3o implementadas\n    ' na classe Shape, apenas nas classes filhas\n\n    ' retorna se o ponto est\u00e1 dentro da forma\n    + inside(Point2D: point): boolean\n\n    ' retorna a \u00e1rea da forma\n    + getArea(): double\n\n    ' retorna o per\u00edmetro da forma\n    + getPerimeter(): double\n}\n\nclass Circle {\n    + center: Point2D\n    + radius: double\n\n    __\n    ' invoca o construtor da superclasse\n    ' passando o nome Circ\n    ' guarda os outros valores nos atributos\n    ' da classe Circle\n    + Circle(center: Point2D, radius: double)\n\n    ' implementa os m\u00e9todos abstratos\n    + inside(point: Point2D): boolean\n    + getArea(): double\n    + getPerimeter(): double\n\n    ' retorna o nome da classe e os valores no seguinte formato\n    ' Circ: C=(0.00, 0.00), R=0.00\n    ' O ponto deve ser gerado pelo m\u00e9todo toString da classe Point2D\n    + toString(): string\n}\n\nclass Rectangle {\n    ' ponto superior esquerdo\n    + P1: Point2D\n    ' ponto inferior direito\n    + P2: Point2D\n\n    __\n    ' invoca o construtor da superclasse\n    ' passando o nome Rect\n    ' inicializa o resto dos atributos\n    + Rectangle(P1: Point2D, P2: Point2D)\n\n    ' implementa os m\u00e9todos abstratos\n    + inside(point: Point2D): boolean\n    + getArea(): double\n    + getPerimeter(): double\n\n    ' retorna o nome da classe e os valores no seguinte formato\n    ' Rect: P1=(0.00, 0.00) P2=(0.00, 0.00)\n    + toString(): string\n}\n\n```\n\n<!-- load -->\n\n## Shell\n\n```sh\n#__case creating figures\n$circle 2 3 5\n\n#__case showing\n$show\nCirc: C=(2.00, 3.00), R=5.00\n\n#__case creating more figures\n$rect 1 1 3 3\n$rect 2 4.53 5 10\n$circle 1 1 1.5\n\n#__case showing all\n$show\nCirc: C=(2.00, 3.00), R=5.00\nRect: P1=(1.00, 1.00) P2=(3.00, 3.00)\nRect: P1=(2.00, 4.53) P2=(5.00, 10.00)\nCirc: C=(1.00, 1.00), R=1.50\n\n\n#__case showing area and perimeter\n$info\nCirc: A=78.54 P=31.42\nRect: A=4.00 P=8.00\nRect: A=16.41 P=16.94\nCirc: A=7.07 P=9.42\n\n$end\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> creating figures\ncircle 2 3 5\nend\n========\n$circle 2 3 5\n$end\n<<<<<<<<\n\n>>>>>>>> showing\ncircle 2 3 5\nshow\nend\n========\n$circle 2 3 5\n$show\nCirc: C=(2.00, 3.00), R=5.00\n$end\n<<<<<<<<\n\n>>>>>>>> creating more figures\ncircle 2 3 5\nshow\nrect 1 1 3 3\nrect 2 4.53 5 10\ncircle 1 1 1.5\nend\n========\n$circle 2 3 5\n$show\nCirc: C=(2.00, 3.00), R=5.00\n$rect 1 1 3 3\n$rect 2 4.53 5 10\n$circle 1 1 1.5\n$end\n<<<<<<<<\n\n>>>>>>>> showing all\ncircle 2 3 5\nshow\nrect 1 1 3 3\nrect 2 4.53 5 10\ncircle 1 1 1.5\nshow\nend\n========\n$circle 2 3 5\n$show\nCirc: C=(2.00, 3.00), R=5.00\n$rect 1 1 3 3\n$rect 2 4.53 5 10\n$circle 1 1 1.5\n$show\nCirc: C=(2.00, 3.00), R=5.00\nRect: P1=(1.00, 1.00) P2=(3.00, 3.00)\nRect: P1=(2.00, 4.53) P2=(5.00, 10.00)\nCirc: C=(1.00, 1.00), R=1.50\n$end\n<<<<<<<<\n\n>>>>>>>> showing area and perimeter\ncircle 2 3 5\nshow\nrect 1 1 3 3\nrect 2 4.53 5 10\ncircle 1 1 1.5\nshow\ninfo\nend\n========\n$circle 2 3 5\n$show\nCirc: C=(2.00, 3.00), R=5.00\n$rect 1 1 3 3\n$rect 2 4.53 5 10\n$circle 1 1 1.5\n$show\nCirc: C=(2.00, 3.00), R=5.00\nRect: P1=(1.00, 1.00) P2=(3.00, 3.00)\nRect: P1=(2.00, 4.53) P2=(5.00, 10.00)\nCirc: C=(1.00, 1.00), R=1.50\n$info\nCirc: A=78.54 P=31.42\nRect: A=4.00 P=8.00\nRect: A=16.41 P=16.94\nCirc: A=7.07 P=9.42\n$end\n<<<<<<<<\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
