{
    "title": "@agenda: Gerencie os v\u00e1rios contatos de uma agenda",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@agenda: Gerencie os v\u00e1rios contatos de uma agenda</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h1 id=\"gerencie-os-v\u00e1rios-contatos-de-uma-agenda\">Gerencie os v\u00e1rios\ncontatos de uma agenda</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr class=\"header\">\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<!-- toch -->\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/agenda/cover.jpg\"\nalt=\"cover\" />\n<figcaption aria-hidden=\"true\">cover</figcaption>\n</figure>\n<p>Sua agenda possui v\u00e1rios contatos e cada contato possui v\u00e1rios\ntelefones.</p>\n<p>Essa atividade \u00e9 uma continua\u00e7\u00e3o da <span class=\"citation\"\ndata-cites=\"014\">@014</span> Contato. L\u00e1 \u00e9 explicado com mais detalhes\ncomo criar a classe <code>Contact</code> e a classe\n<code>Fone</code>.</p>\n<hr />\n<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>Adicionar contato\n<ul>\n<li>O contato possui o nome como chave.</li>\n<li>Se tentar adicionar outro contato com o mesmo nome, adicione os\ntelefones ao contato existente.</li>\n<li>Adicionar os novos n\u00fameros de telefone no contato j\u00e1 existente.</li>\n</ul></li>\n<li>Mostrar\n<ul>\n<li>Mostrar os contatos da agenda pela ordem alfab\u00e9tica.</li>\n</ul></li>\n<li>Remo\u00e7\u00e3o\n<ul>\n<li>Remover contato pela chave.</li>\n<li>Remover telefone do contato.</li>\n</ul></li>\n<li>Busca\n<ul>\n<li>Fazer uma busca por padr\u00e3o em todos os atributos do contato, nome e\ntelefones.</li>\n<li>Se o contato tiver qualquer campo que combine com a string pattern\nde busca, ele deve ser retornado. Se o pattern \u00e9 maria, devem ser\nretornados os contatos como \u201cmaria julia\u201d, \u201cmariana\u201d, \u201cana maria\u201d, etc.\nTamb\u00e9m inclua na busca o id do telefone ou o n\u00famero do telefone.</li>\n</ul></li>\n<li>Favoritos\n<ul>\n<li>Favoritar e Desfavoritar um contato.</li>\n<li>Mostrar os favoritos. ***</li>\n</ul></li>\n</ul>\n<h2 id=\"guide\">Guide</h2>\n<ul>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/agenda/.cache/draft.cpp\">solver.cpp</a></li>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/agenda/.cache/draft.ts\">solver.ts</a></li>\n</ul>\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/agenda/diagrama.png\"\nalt=\"diagrama\" />\n<figcaption aria-hidden=\"true\">diagrama</figcaption>\n</figure>\n<!-- load diagrama.puml fenced=ts:filter -->\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode ts\"><code class=\"sourceCode typescript\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"st\">&#39;--</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>@startuml</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>skinparam defaultFontName Hasklig</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>skinparam dpi <span class=\"dv\">150</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"st\">&#39;==</span></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> Fone {</span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">-</span> id <span class=\"op\">:</span> str</span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">-</span> number <span class=\"op\">:</span> str</span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>  __</span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; inicializa as variaveis</span></span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">+</span> <span class=\"fu\">Fone</span>(id <span class=\"op\">:</span> str<span class=\"op\">,</span> number <span class=\"op\">:</span> str)</span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>  </span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; verifica se o n\u00famero \u00e9 um n\u00famero de telefone v\u00e1lido</span></span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; crie uma str &quot;validos&quot; com todos os caracteres v\u00e1lidos</span></span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; para cada caractere c do n\u00famero:</span></span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39;   se c n\u00e3o estiver em validos:</span></span>\n<span id=\"cb1-20\"><a href=\"#cb1-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39;     retorne false</span></span>\n<span id=\"cb1-21\"><a href=\"#cb1-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; retorne true</span></span>\n<span id=\"cb1-22\"><a href=\"#cb1-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">+</span> <span class=\"fu\">isValid</span>() <span class=\"op\">:</span> bool</span>\n<span id=\"cb1-23\"><a href=\"#cb1-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>  __</span>\n<span id=\"cb1-24\"><a href=\"#cb1-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">+</span> <span class=\"fu\">getId</span>() <span class=\"op\">:</span> str</span>\n<span id=\"cb1-25\"><a href=\"#cb1-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">+</span> <span class=\"fu\">getNumber</span>() <span class=\"op\">:</span> str</span>\n<span id=\"cb1-26\"><a href=\"#cb1-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>  __</span>\n<span id=\"cb1-27\"><a href=\"#cb1-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; Gera uma string para impress\u00e3o</span></span>\n<span id=\"cb1-28\"><a href=\"#cb1-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; ex: oi:1234</span></span>\n<span id=\"cb1-29\"><a href=\"#cb1-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">+</span> <span class=\"fu\">toString</span>() <span class=\"op\">:</span> str</span>\n<span id=\"cb1-30\"><a href=\"#cb1-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>}</span>\n<span id=\"cb1-31\"><a href=\"#cb1-31\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-32\"><a href=\"#cb1-32\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> Contact {</span>\n<span id=\"cb1-33\"><a href=\"#cb1-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">-</span> favorited <span class=\"op\">:</span> bool</span>\n<span id=\"cb1-34\"><a href=\"#cb1-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">-</span> fones <span class=\"op\">:</span> List<span class=\"op\">&lt;</span>Fone<span class=\"op\">&gt;</span></span>\n<span id=\"cb1-35\"><a href=\"#cb1-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">-</span> name <span class=\"op\">:</span> str</span>\n<span id=\"cb1-36\"><a href=\"#cb1-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>  __</span>\n<span id=\"cb1-37\"><a href=\"#cb1-37\" aria-hidden=\"true\" tabindex=\"-1\"></a>  </span>\n<span id=\"cb1-38\"><a href=\"#cb1-38\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; inicialize o fone com o nome, favorited como false e a lista de fones vazia</span></span>\n<span id=\"cb1-39\"><a href=\"#cb1-39\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">+</span> <span class=\"fu\">Contact</span>(name <span class=\"op\">:</span> str)</span>\n<span id=\"cb1-40\"><a href=\"#cb1-40\" aria-hidden=\"true\" tabindex=\"-1\"></a>  __</span>\n<span id=\"cb1-41\"><a href=\"#cb1-41\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; se fone for v\u00e1lido:</span></span>\n<span id=\"cb1-42\"><a href=\"#cb1-42\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39;   insira no fim da lista de fones</span></span>\n<span id=\"cb1-43\"><a href=\"#cb1-43\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; se n\u00e3o:</span></span>\n<span id=\"cb1-44\"><a href=\"#cb1-44\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39;   informe o erro</span></span>\n<span id=\"cb1-45\"><a href=\"#cb1-45\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">+</span> <span class=\"fu\">addFone</span>(id<span class=\"op\">:</span> str<span class=\"op\">,</span> number <span class=\"op\">:</span> str)<span class=\"op\">:</span> <span class=\"dt\">void</span></span>\n<span id=\"cb1-46\"><a href=\"#cb1-46\" aria-hidden=\"true\" tabindex=\"-1\"></a>  </span>\n<span id=\"cb1-47\"><a href=\"#cb1-47\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; se o \u00edndice existir:</span></span>\n<span id=\"cb1-48\"><a href=\"#cb1-48\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39;   remove o fone pelo indice</span></span>\n<span id=\"cb1-49\"><a href=\"#cb1-49\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">+</span> <span class=\"fu\">rmFone</span>(index <span class=\"op\">:</span> int)<span class=\"op\">:</span> <span class=\"dt\">void</span></span>\n<span id=\"cb1-50\"><a href=\"#cb1-50\" aria-hidden=\"true\" tabindex=\"-1\"></a>  </span>\n<span id=\"cb1-51\"><a href=\"#cb1-51\" aria-hidden=\"true\" tabindex=\"-1\"></a>  __</span>\n<span id=\"cb1-52\"><a href=\"#cb1-52\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; favorita ou desfavorita o contato</span></span>\n<span id=\"cb1-53\"><a href=\"#cb1-53\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">+</span> <span class=\"fu\">toogleFavorited</span>()<span class=\"op\">:</span> <span class=\"dt\">void</span></span>\n<span id=\"cb1-54\"><a href=\"#cb1-54\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-55\"><a href=\"#cb1-55\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; retorna se o contato est\u00e1 favoritado</span></span>\n<span id=\"cb1-56\"><a href=\"#cb1-56\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">+</span> <span class=\"fu\">isFavorited</span>() <span class=\"op\">:</span> bool</span>\n<span id=\"cb1-57\"><a href=\"#cb1-57\" aria-hidden=\"true\" tabindex=\"-1\"></a>  __</span>\n<span id=\"cb1-58\"><a href=\"#cb1-58\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">+</span> <span class=\"fu\">getFones</span>() <span class=\"op\">:</span> List<span class=\"op\">&lt;</span>Fone<span class=\"op\">&gt;</span></span>\n<span id=\"cb1-59\"><a href=\"#cb1-59\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">+</span> <span class=\"fu\">getName</span>() <span class=\"op\">:</span> str</span>\n<span id=\"cb1-60\"><a href=\"#cb1-60\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">+</span> <span class=\"fu\">setName</span>(name <span class=\"op\">:</span> str)<span class=\"op\">:</span> <span class=\"dt\">void</span></span>\n<span id=\"cb1-61\"><a href=\"#cb1-61\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-62\"><a href=\"#cb1-62\" aria-hidden=\"true\" tabindex=\"-1\"></a>  __</span>\n<span id=\"cb1-63\"><a href=\"#cb1-63\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; use um contador para mostrar o \u00edndice do telefone</span></span>\n<span id=\"cb1-64\"><a href=\"#cb1-64\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; use o toString do fone para adicion\u00e1-lo \u00e0 sa\u00edda</span></span>\n<span id=\"cb1-65\"><a href=\"#cb1-65\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; se o contato estiver favoritado, adicione um @ antes do nome</span></span>\n<span id=\"cb1-66\"><a href=\"#cb1-66\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; o resultado dever ficar assim:</span></span>\n<span id=\"cb1-67\"><a href=\"#cb1-67\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; ex: - david [oi:123, tim:9081, claro:5431]</span></span>\n<span id=\"cb1-68\"><a href=\"#cb1-68\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">+</span> <span class=\"fu\">toString</span>() <span class=\"op\">:</span> str</span>\n<span id=\"cb1-69\"><a href=\"#cb1-69\" aria-hidden=\"true\" tabindex=\"-1\"></a>}</span>\n<span id=\"cb1-70\"><a href=\"#cb1-70\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-71\"><a href=\"#cb1-71\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> Agenda {</span>\n<span id=\"cb1-72\"><a href=\"#cb1-72\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-73\"><a href=\"#cb1-73\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; use um vector em c++</span></span>\n<span id=\"cb1-74\"><a href=\"#cb1-74\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; um ArrayList em Java</span></span>\n<span id=\"cb1-75\"><a href=\"#cb1-75\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; um Array em Typescript</span></span>\n<span id=\"cb1-76\"><a href=\"#cb1-76\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">-</span> contacts <span class=\"op\">:</span> List<span class=\"op\">&lt;</span>Contact<span class=\"op\">&gt;</span></span>\n<span id=\"cb1-77\"><a href=\"#cb1-77\" aria-hidden=\"true\" tabindex=\"-1\"></a>  __</span>\n<span id=\"cb1-78\"><a href=\"#cb1-78\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-79\"><a href=\"#cb1-79\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; procura o contato pelo nome</span></span>\n<span id=\"cb1-80\"><a href=\"#cb1-80\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; o nome do contato \u00e9 \u00fanico na agenda</span></span>\n<span id=\"cb1-81\"><a href=\"#cb1-81\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; se encontrar, retorne o \u00edndice do contato no array</span></span>\n<span id=\"cb1-82\"><a href=\"#cb1-82\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; se n\u00e3o encontrar, retorne -1</span></span>\n<span id=\"cb1-83\"><a href=\"#cb1-83\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">-</span> <span class=\"fu\">findPosByName</span>(name <span class=\"op\">:</span> <span class=\"bu\">String</span>) <span class=\"op\">:</span> int</span>\n<span id=\"cb1-84\"><a href=\"#cb1-84\" aria-hidden=\"true\" tabindex=\"-1\"></a>  __</span>\n<span id=\"cb1-85\"><a href=\"#cb1-85\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">+</span> <span class=\"fu\">Agenda</span>()</span>\n<span id=\"cb1-86\"><a href=\"#cb1-86\" aria-hidden=\"true\" tabindex=\"-1\"></a>  __</span>\n<span id=\"cb1-87\"><a href=\"#cb1-87\" aria-hidden=\"true\" tabindex=\"-1\"></a>  </span>\n<span id=\"cb1-88\"><a href=\"#cb1-88\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; use a fun\u00e7\u00e3o findPosByName para encontrar o \u00edndice do contato</span></span>\n<span id=\"cb1-89\"><a href=\"#cb1-89\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; se o contato existir:</span></span>\n<span id=\"cb1-90\"><a href=\"#cb1-90\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39;   adicione todos os telefones v\u00e1lidos ao contato</span></span>\n<span id=\"cb1-91\"><a href=\"#cb1-91\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; se n\u00e3o:</span></span>\n<span id=\"cb1-92\"><a href=\"#cb1-92\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39;   crie um novo contato</span></span>\n<span id=\"cb1-93\"><a href=\"#cb1-93\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39;   adicione todos os telefones v\u00e1lidos</span></span>\n<span id=\"cb1-94\"><a href=\"#cb1-94\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39;   reordene a lista de contatos</span></span>\n<span id=\"cb1-95\"><a href=\"#cb1-95\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">+</span> <span class=\"fu\">addContact</span> (name <span class=\"op\">:</span> <span class=\"bu\">String</span><span class=\"op\">,</span> fones <span class=\"op\">:</span> List<span class=\"op\">&lt;</span>Fone<span class=\"op\">&gt;</span>)</span>\n<span id=\"cb1-96\"><a href=\"#cb1-96\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-97\"><a href=\"#cb1-97\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; use a fun\u00e7\u00e3o findPosByName para encontrar o \u00edndice do contato</span></span>\n<span id=\"cb1-98\"><a href=\"#cb1-98\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; retorna uma refer\u00eancia para o contato</span></span>\n<span id=\"cb1-99\"><a href=\"#cb1-99\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; em C++, retorne um &#39;</span>Contact<span class=\"op\">*</span><span class=\"st\">&#39;</span></span>\n<span id=\"cb1-100\"><a href=\"#cb1-100\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; se n\u00e3o existir, retorne null</span></span>\n<span id=\"cb1-101\"><a href=\"#cb1-101\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">+</span> <span class=\"fu\">getContact</span>(name <span class=\"op\">:</span> <span class=\"bu\">String</span>) <span class=\"op\">:</span> Contact <span class=\"op\">|</span> <span class=\"dt\">null</span></span>\n<span id=\"cb1-102\"><a href=\"#cb1-102\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-103\"><a href=\"#cb1-103\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; use a fun\u00e7\u00e3o findPosByName para encontrar o \u00edndice do contato</span></span>\n<span id=\"cb1-104\"><a href=\"#cb1-104\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; se o contato existir:</span></span>\n<span id=\"cb1-105\"><a href=\"#cb1-105\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39;   remova o contato</span></span>\n<span id=\"cb1-106\"><a href=\"#cb1-106\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">+</span> <span class=\"fu\">rmContact</span>  (name <span class=\"op\">:</span> <span class=\"bu\">String</span>)</span>\n<span id=\"cb1-107\"><a href=\"#cb1-107\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-108\"><a href=\"#cb1-108\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; crie uma lista de contatos para armaenar os resultados</span></span>\n<span id=\"cb1-109\"><a href=\"#cb1-109\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; para cada contato na lista de contatos:</span></span>\n<span id=\"cb1-110\"><a href=\"#cb1-110\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39;   gere a string do contato usando contato.toString()</span></span>\n<span id=\"cb1-111\"><a href=\"#cb1-111\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39;   use uma fun\u00e7\u00e3o de busca por substring para verificar se o padr\u00e3o est\u00e1 na string do contato</span></span>\n<span id=\"cb1-112\"><a href=\"#cb1-112\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39;   se estiver:</span></span>\n<span id=\"cb1-113\"><a href=\"#cb1-113\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39;     adicione o contato \u00e0 lista de resultados</span></span>\n<span id=\"cb1-114\"><a href=\"#cb1-114\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; retorne a lista de resultados</span></span>\n<span id=\"cb1-115\"><a href=\"#cb1-115\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">+</span> <span class=\"fu\">search</span>     (pattern <span class=\"op\">:</span> <span class=\"bu\">String</span>) <span class=\"op\">:</span> List<span class=\"op\">&lt;</span>Contact<span class=\"op\">&gt;</span></span>\n<span id=\"cb1-116\"><a href=\"#cb1-116\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-117\"><a href=\"#cb1-117\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-118\"><a href=\"#cb1-118\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; cria uma lista de contatos vazia</span></span>\n<span id=\"cb1-119\"><a href=\"#cb1-119\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; para cada contato na lista de contatos:</span></span>\n<span id=\"cb1-120\"><a href=\"#cb1-120\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39;   se o contato estiver favoritado:</span></span>\n<span id=\"cb1-121\"><a href=\"#cb1-121\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39;     adicione o contato \u00e0 lista de favoritos</span></span>\n<span id=\"cb1-122\"><a href=\"#cb1-122\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; retorne a lista de favoritos</span></span>\n<span id=\"cb1-123\"><a href=\"#cb1-123\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">+</span> <span class=\"fu\">getFavorited</span>() <span class=\"op\">:</span> List<span class=\"op\">&lt;</span>Contact<span class=\"op\">&gt;</span></span>\n<span id=\"cb1-124\"><a href=\"#cb1-124\" aria-hidden=\"true\" tabindex=\"-1\"></a>  __</span>\n<span id=\"cb1-125\"><a href=\"#cb1-125\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-126\"><a href=\"#cb1-126\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; retorne a lista de contatos</span></span>\n<span id=\"cb1-127\"><a href=\"#cb1-127\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">+</span> <span class=\"fu\">getContacts</span>() <span class=\"op\">:</span> List<span class=\"op\">&lt;</span>Contact<span class=\"op\">&gt;</span></span>\n<span id=\"cb1-128\"><a href=\"#cb1-128\" aria-hidden=\"true\" tabindex=\"-1\"></a>  __</span>\n<span id=\"cb1-129\"><a href=\"#cb1-129\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-130\"><a href=\"#cb1-130\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"st\">&#39; retorna os contatos separados por uma quebra de linha</span></span>\n<span id=\"cb1-131\"><a href=\"#cb1-131\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">+</span> <span class=\"fu\">toString</span>() <span class=\"op\">:</span> <span class=\"bu\">String</span></span>\n<span id=\"cb1-132\"><a href=\"#cb1-132\" aria-hidden=\"true\" tabindex=\"-1\"></a>}</span>\n<span id=\"cb1-133\"><a href=\"#cb1-133\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-134\"><a href=\"#cb1-134\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"st\">&#39;--</span></span>\n<span id=\"cb1-135\"><a href=\"#cb1-135\" aria-hidden=\"true\" tabindex=\"-1\"></a>Contact <span class=\"st\">&quot;1&quot;</span> <span class=\"op\">*--</span>  <span class=\"st\">&quot;0..*&quot;</span> Fone</span>\n<span id=\"cb1-136\"><a href=\"#cb1-136\" aria-hidden=\"true\" tabindex=\"-1\"></a>Agenda  <span class=\"st\">&quot;1&quot;</span> <span class=\"op\">*--</span>  <span class=\"st\">&quot;0..*&quot;</span> Contact</span>\n<span id=\"cb1-137\"><a href=\"#cb1-137\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-138\"><a href=\"#cb1-138\" aria-hidden=\"true\" tabindex=\"-1\"></a>@enduml</span></code></pre></div>\n<!-- load -->\n<h2 id=\"shell\">Shell</h2>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode py\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE adicionando em lote</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>$add eva oio:<span class=\"dv\">8585</span> cla:<span class=\"dv\">9999</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>$add ana tim:<span class=\"dv\">3434</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>$add bia viv:<span class=\"dv\">5454</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>$show</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">-</span> ana [tim:<span class=\"dv\">3434</span>]</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">-</span> bia [viv:<span class=\"dv\">5454</span>]</span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">-</span> eva [oio:<span class=\"dv\">8585</span>, cla:<span class=\"dv\">9999</span>]</span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE adicionando a um contato existente</span></span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># como ana j\u00e1 existe, n\u00e3o crie um novo contato</span></span>\n<span id=\"cb2-15\"><a href=\"#cb2-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># adicione os telefones ao contato existente</span></span>\n<span id=\"cb2-16\"><a href=\"#cb2-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>$add ana cas:<span class=\"dv\">4567</span> oio:<span class=\"dv\">8754</span></span>\n<span id=\"cb2-17\"><a href=\"#cb2-17\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-18\"><a href=\"#cb2-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>$show</span>\n<span id=\"cb2-19\"><a href=\"#cb2-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">-</span> ana [tim:<span class=\"dv\">3434</span>, cas:<span class=\"dv\">4567</span>, oio:<span class=\"dv\">8754</span>]</span>\n<span id=\"cb2-20\"><a href=\"#cb2-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">-</span> bia [viv:<span class=\"dv\">5454</span>]</span>\n<span id=\"cb2-21\"><a href=\"#cb2-21\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">-</span> eva [oio:<span class=\"dv\">8585</span>, cla:<span class=\"dv\">9999</span>]</span>\n<span id=\"cb2-22\"><a href=\"#cb2-22\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-23\"><a href=\"#cb2-23\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-24\"><a href=\"#cb2-24\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE removendo telefone</span></span>\n<span id=\"cb2-25\"><a href=\"#cb2-25\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># remove o elemento indice 0 da ana</span></span>\n<span id=\"cb2-26\"><a href=\"#cb2-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>$rmFone ana <span class=\"dv\">0</span></span>\n<span id=\"cb2-27\"><a href=\"#cb2-27\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-28\"><a href=\"#cb2-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>$show</span>\n<span id=\"cb2-29\"><a href=\"#cb2-29\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">-</span> ana [cas:<span class=\"dv\">4567</span>, oio:<span class=\"dv\">8754</span>]</span>\n<span id=\"cb2-30\"><a href=\"#cb2-30\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">-</span> bia [viv:<span class=\"dv\">5454</span>]</span>\n<span id=\"cb2-31\"><a href=\"#cb2-31\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">-</span> eva [oio:<span class=\"dv\">8585</span>, cla:<span class=\"dv\">9999</span>]</span>\n<span id=\"cb2-32\"><a href=\"#cb2-32\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-33\"><a href=\"#cb2-33\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE removendo contato</span></span>\n<span id=\"cb2-34\"><a href=\"#cb2-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>$rm bia</span>\n<span id=\"cb2-35\"><a href=\"#cb2-35\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-36\"><a href=\"#cb2-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>$show</span>\n<span id=\"cb2-37\"><a href=\"#cb2-37\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">-</span> ana [cas:<span class=\"dv\">4567</span>, oio:<span class=\"dv\">8754</span>]</span>\n<span id=\"cb2-38\"><a href=\"#cb2-38\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">-</span> eva [oio:<span class=\"dv\">8585</span>, cla:<span class=\"dv\">9999</span>]</span>\n<span id=\"cb2-39\"><a href=\"#cb2-39\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-40\"><a href=\"#cb2-40\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE adicionando mais contatos</span></span>\n<span id=\"cb2-41\"><a href=\"#cb2-41\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-42\"><a href=\"#cb2-42\" aria-hidden=\"true\" tabindex=\"-1\"></a>$add ava tim:<span class=\"dv\">5454</span></span>\n<span id=\"cb2-43\"><a href=\"#cb2-43\" aria-hidden=\"true\" tabindex=\"-1\"></a>$add rui viv:<span class=\"dv\">2222</span> oio:<span class=\"dv\">9991</span></span>\n<span id=\"cb2-44\"><a href=\"#cb2-44\" aria-hidden=\"true\" tabindex=\"-1\"></a>$add zac rec:<span class=\"dv\">3131</span></span>\n<span id=\"cb2-45\"><a href=\"#cb2-45\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-46\"><a href=\"#cb2-46\" aria-hidden=\"true\" tabindex=\"-1\"></a>$show</span>\n<span id=\"cb2-47\"><a href=\"#cb2-47\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">-</span> ana [cas:<span class=\"dv\">4567</span>, oio:<span class=\"dv\">8754</span>]</span>\n<span id=\"cb2-48\"><a href=\"#cb2-48\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">-</span> ava [tim:<span class=\"dv\">5454</span>]</span>\n<span id=\"cb2-49\"><a href=\"#cb2-49\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">-</span> eva [oio:<span class=\"dv\">8585</span>, cla:<span class=\"dv\">9999</span>]</span>\n<span id=\"cb2-50\"><a href=\"#cb2-50\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">-</span> rui [viv:<span class=\"dv\">2222</span>, oio:<span class=\"dv\">9991</span>]</span>\n<span id=\"cb2-51\"><a href=\"#cb2-51\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">-</span> zac [rec:<span class=\"dv\">3131</span>]</span>\n<span id=\"cb2-52\"><a href=\"#cb2-52\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-53\"><a href=\"#cb2-53\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE busca por padrao</span></span>\n<span id=\"cb2-54\"><a href=\"#cb2-54\" aria-hidden=\"true\" tabindex=\"-1\"></a>$search va</span>\n<span id=\"cb2-55\"><a href=\"#cb2-55\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">-</span> ava [tim:<span class=\"dv\">5454</span>]</span>\n<span id=\"cb2-56\"><a href=\"#cb2-56\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">-</span> eva [oio:<span class=\"dv\">8585</span>, cla:<span class=\"dv\">9999</span>]</span>\n<span id=\"cb2-57\"><a href=\"#cb2-57\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-58\"><a href=\"#cb2-58\" aria-hidden=\"true\" tabindex=\"-1\"></a>$search <span class=\"dv\">999</span></span>\n<span id=\"cb2-59\"><a href=\"#cb2-59\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">-</span> eva [oio:<span class=\"dv\">8585</span>, cla:<span class=\"dv\">9999</span>]</span>\n<span id=\"cb2-60\"><a href=\"#cb2-60\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">-</span> rui [viv:<span class=\"dv\">2222</span>, oio:<span class=\"dv\">9991</span>]</span>\n<span id=\"cb2-61\"><a href=\"#cb2-61\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-62\"><a href=\"#cb2-62\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE toggle favoritos</span></span>\n<span id=\"cb2-63\"><a href=\"#cb2-63\" aria-hidden=\"true\" tabindex=\"-1\"></a>$tfav ana</span>\n<span id=\"cb2-64\"><a href=\"#cb2-64\" aria-hidden=\"true\" tabindex=\"-1\"></a>$tfav rui</span>\n<span id=\"cb2-65\"><a href=\"#cb2-65\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-66\"><a href=\"#cb2-66\" aria-hidden=\"true\" tabindex=\"-1\"></a>$show</span>\n<span id=\"cb2-67\"><a href=\"#cb2-67\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">@</span> ana [cas:<span class=\"dv\">4567</span>, oio:<span class=\"dv\">8754</span>]</span>\n<span id=\"cb2-68\"><a href=\"#cb2-68\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">-</span> ava [tim:<span class=\"dv\">5454</span>]</span>\n<span id=\"cb2-69\"><a href=\"#cb2-69\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">-</span> eva [oio:<span class=\"dv\">8585</span>, cla:<span class=\"dv\">9999</span>]</span>\n<span id=\"cb2-70\"><a href=\"#cb2-70\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">@</span> rui [viv:<span class=\"dv\">2222</span>, oio:<span class=\"dv\">9991</span>]</span>\n<span id=\"cb2-71\"><a href=\"#cb2-71\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">-</span> zac [rec:<span class=\"dv\">3131</span>]</span>\n<span id=\"cb2-72\"><a href=\"#cb2-72\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-73\"><a href=\"#cb2-73\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE favoritos</span></span>\n<span id=\"cb2-74\"><a href=\"#cb2-74\" aria-hidden=\"true\" tabindex=\"-1\"></a>$favs</span>\n<span id=\"cb2-75\"><a href=\"#cb2-75\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">@</span> ana [cas:<span class=\"dv\">4567</span>, oio:<span class=\"dv\">8754</span>]</span>\n<span id=\"cb2-76\"><a href=\"#cb2-76\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">@</span> rui [viv:<span class=\"dv\">2222</span>, oio:<span class=\"dv\">9991</span>]</span>\n<span id=\"cb2-77\"><a href=\"#cb2-77\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-78\"><a href=\"#cb2-78\" aria-hidden=\"true\" tabindex=\"-1\"></a>$end</span>\n<span id=\"cb2-79\"><a href=\"#cb2-79\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-80\"><a href=\"#cb2-80\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#__end__</span></span></code></pre></div>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT adicionando em lote\nadd eva oio:8585 cla:9999\nadd ana tim:3434\nadd bia viv:5454\nshow\nend\n======== EXPECT\n$add eva oio:8585 cla:9999\n$add ana tim:3434\n$add bia viv:5454\n$show\n- ana [tim:3434]\n- bia [viv:5454]\n- eva [oio:8585, cla:9999]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT adicionando a um contato existente\nadd eva oio:8585 cla:9999\nadd ana tim:3434\nadd bia viv:5454\nshow\nadd ana cas:4567 oio:8754\nshow\nend\n======== EXPECT\n$add eva oio:8585 cla:9999\n$add ana tim:3434\n$add bia viv:5454\n$show\n- ana [tim:3434]\n- bia [viv:5454]\n- eva [oio:8585, cla:9999]\n$add ana cas:4567 oio:8754\n$show\n- ana [tim:3434, cas:4567, oio:8754]\n- bia [viv:5454]\n- eva [oio:8585, cla:9999]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT removendo telefone\nadd eva oio:8585 cla:9999\nadd ana tim:3434\nadd bia viv:5454\nshow\nadd ana cas:4567 oio:8754\nshow\nrmFone ana 0\nshow\nend\n======== EXPECT\n$add eva oio:8585 cla:9999\n$add ana tim:3434\n$add bia viv:5454\n$show\n- ana [tim:3434]\n- bia [viv:5454]\n- eva [oio:8585, cla:9999]\n$add ana cas:4567 oio:8754\n$show\n- ana [tim:3434, cas:4567, oio:8754]\n- bia [viv:5454]\n- eva [oio:8585, cla:9999]\n$rmFone ana 0\n$show\n- ana [cas:4567, oio:8754]\n- bia [viv:5454]\n- eva [oio:8585, cla:9999]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT removendo contato\nadd eva oio:8585 cla:9999\nadd ana tim:3434\nadd bia viv:5454\nshow\nadd ana cas:4567 oio:8754\nshow\nrmFone ana 0\nshow\nrm bia\nshow\nend\n======== EXPECT\n$add eva oio:8585 cla:9999\n$add ana tim:3434\n$add bia viv:5454\n$show\n- ana [tim:3434]\n- bia [viv:5454]\n- eva [oio:8585, cla:9999]\n$add ana cas:4567 oio:8754\n$show\n- ana [tim:3434, cas:4567, oio:8754]\n- bia [viv:5454]\n- eva [oio:8585, cla:9999]\n$rmFone ana 0\n$show\n- ana [cas:4567, oio:8754]\n- bia [viv:5454]\n- eva [oio:8585, cla:9999]\n$rm bia\n$show\n- ana [cas:4567, oio:8754]\n- eva [oio:8585, cla:9999]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT adicionando mais contatos\nadd eva oio:8585 cla:9999\nadd ana tim:3434\nadd bia viv:5454\nshow\nadd ana cas:4567 oio:8754\nshow\nrmFone ana 0\nshow\nrm bia\nshow\nadd ava tim:5454\nadd rui viv:2222 oio:9991\nadd zac rec:3131\nshow\nend\n======== EXPECT\n$add eva oio:8585 cla:9999\n$add ana tim:3434\n$add bia viv:5454\n$show\n- ana [tim:3434]\n- bia [viv:5454]\n- eva [oio:8585, cla:9999]\n$add ana cas:4567 oio:8754\n$show\n- ana [tim:3434, cas:4567, oio:8754]\n- bia [viv:5454]\n- eva [oio:8585, cla:9999]\n$rmFone ana 0\n$show\n- ana [cas:4567, oio:8754]\n- bia [viv:5454]\n- eva [oio:8585, cla:9999]\n$rm bia\n$show\n- ana [cas:4567, oio:8754]\n- eva [oio:8585, cla:9999]\n$add ava tim:5454\n$add rui viv:2222 oio:9991\n$add zac rec:3131\n$show\n- ana [cas:4567, oio:8754]\n- ava [tim:5454]\n- eva [oio:8585, cla:9999]\n- rui [viv:2222, oio:9991]\n- zac [rec:3131]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT busca por padrao\nadd eva oio:8585 cla:9999\nadd ana tim:3434\nadd bia viv:5454\nshow\nadd ana cas:4567 oio:8754\nshow\nrmFone ana 0\nshow\nrm bia\nshow\nadd ava tim:5454\nadd rui viv:2222 oio:9991\nadd zac rec:3131\nshow\nsearch va\nsearch 999\nend\n======== EXPECT\n$add eva oio:8585 cla:9999\n$add ana tim:3434\n$add bia viv:5454\n$show\n- ana [tim:3434]\n- bia [viv:5454]\n- eva [oio:8585, cla:9999]\n$add ana cas:4567 oio:8754\n$show\n- ana [tim:3434, cas:4567, oio:8754]\n- bia [viv:5454]\n- eva [oio:8585, cla:9999]\n$rmFone ana 0\n$show\n- ana [cas:4567, oio:8754]\n- bia [viv:5454]\n- eva [oio:8585, cla:9999]\n$rm bia\n$show\n- ana [cas:4567, oio:8754]\n- eva [oio:8585, cla:9999]\n$add ava tim:5454\n$add rui viv:2222 oio:9991\n$add zac rec:3131\n$show\n- ana [cas:4567, oio:8754]\n- ava [tim:5454]\n- eva [oio:8585, cla:9999]\n- rui [viv:2222, oio:9991]\n- zac [rec:3131]\n$search va\n- ava [tim:5454]\n- eva [oio:8585, cla:9999]\n$search 999\n- eva [oio:8585, cla:9999]\n- rui [viv:2222, oio:9991]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT toggle favoritos\nadd eva oio:8585 cla:9999\nadd ana tim:3434\nadd bia viv:5454\nshow\nadd ana cas:4567 oio:8754\nshow\nrmFone ana 0\nshow\nrm bia\nshow\nadd ava tim:5454\nadd rui viv:2222 oio:9991\nadd zac rec:3131\nshow\nsearch va\nsearch 999\ntfav ana\ntfav rui\nshow\nend\n======== EXPECT\n$add eva oio:8585 cla:9999\n$add ana tim:3434\n$add bia viv:5454\n$show\n- ana [tim:3434]\n- bia [viv:5454]\n- eva [oio:8585, cla:9999]\n$add ana cas:4567 oio:8754\n$show\n- ana [tim:3434, cas:4567, oio:8754]\n- bia [viv:5454]\n- eva [oio:8585, cla:9999]\n$rmFone ana 0\n$show\n- ana [cas:4567, oio:8754]\n- bia [viv:5454]\n- eva [oio:8585, cla:9999]\n$rm bia\n$show\n- ana [cas:4567, oio:8754]\n- eva [oio:8585, cla:9999]\n$add ava tim:5454\n$add rui viv:2222 oio:9991\n$add zac rec:3131\n$show\n- ana [cas:4567, oio:8754]\n- ava [tim:5454]\n- eva [oio:8585, cla:9999]\n- rui [viv:2222, oio:9991]\n- zac [rec:3131]\n$search va\n- ava [tim:5454]\n- eva [oio:8585, cla:9999]\n$search 999\n- eva [oio:8585, cla:9999]\n- rui [viv:2222, oio:9991]\n$tfav ana\n$tfav rui\n$show\n@ ana [cas:4567, oio:8754]\n- ava [tim:5454]\n- eva [oio:8585, cla:9999]\n@ rui [viv:2222, oio:9991]\n- zac [rec:3131]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT favoritos\nadd eva oio:8585 cla:9999\nadd ana tim:3434\nadd bia viv:5454\nshow\nadd ana cas:4567 oio:8754\nshow\nrmFone ana 0\nshow\nrm bia\nshow\nadd ava tim:5454\nadd rui viv:2222 oio:9991\nadd zac rec:3131\nshow\nsearch va\nsearch 999\ntfav ana\ntfav rui\nshow\nfavs\nend\n======== EXPECT\n$add eva oio:8585 cla:9999\n$add ana tim:3434\n$add bia viv:5454\n$show\n- ana [tim:3434]\n- bia [viv:5454]\n- eva [oio:8585, cla:9999]\n$add ana cas:4567 oio:8754\n$show\n- ana [tim:3434, cas:4567, oio:8754]\n- bia [viv:5454]\n- eva [oio:8585, cla:9999]\n$rmFone ana 0\n$show\n- ana [cas:4567, oio:8754]\n- bia [viv:5454]\n- eva [oio:8585, cla:9999]\n$rm bia\n$show\n- ana [cas:4567, oio:8754]\n- eva [oio:8585, cla:9999]\n$add ava tim:5454\n$add rui viv:2222 oio:9991\n$add zac rec:3131\n$show\n- ana [cas:4567, oio:8754]\n- ava [tim:5454]\n- eva [oio:8585, cla:9999]\n- rui [viv:2222, oio:9991]\n- zac [rec:3131]\n$search va\n- ava [tim:5454]\n- eva [oio:8585, cla:9999]\n$search 999\n- eva [oio:8585, cla:9999]\n- rui [viv:2222, oio:9991]\n$tfav ana\n$tfav rui\n$show\n@ ana [cas:4567, oio:8754]\n- ava [tim:5454]\n- eva [oio:8585, cla:9999]\n@ rui [viv:2222, oio:9991]\n- zac [rec:3131]\n$favs\n@ ana [cas:4567, oio:8754]\n@ rui [viv:2222, oio:9991]\n$end\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "function input(): string { let X: any = input; X.L = X.L || require(\"fs\").readFileSync(0).toString().split(/\\r?\\n/); return X.L.shift(); } // _TEST_ONLY_\n// function input(): string { let X: any = input; X.P = X.P || require(\"readline-sync\"); return X.P.question() } // _FREE_ONLY_\nfunction write(text: any, endl=\"\\n\") { process.stdout.write(\"\" + text + endl); }\nexport {};\n\nfunction main(): void {\n    const agenda = new Agenda();\n    while (true) {\n        write(\"$\", \"\");\n        let line = input();\n        write(line); // _TEST_ONLY_\n        \n        let args = line.split(\" \");\n        \n        if (args[0] === \"end\") {\n            break;\n        } else if (args[0] === \"add\") {//name id:fone id:fone ...\n            const fones: Fone[] = [];\n            for (let i = 2; i < args.length; i++) {\n                const parts: string[] = args[i].split(':');\n                fones.push(new Fone(parts[0], parts[1]));\n            }\n            agenda.addContact(args[1], fones);\n        } else if (args[0] === \"show\") {\n            write(agenda.toString());\n        } else if (args[0] === \"rmFone\") {//id index\n            const contato: Contact | null = agenda.getContact(args[1]);\n            if (contato !== null) {\n                contato.rmFone(Number(args[2]));\n            }\n        } else if (args[0] === \"rm\") {//id\n            agenda.rmContact(args[1]);\n        } else if (args[0] === \"tfav\") {\n            const contato: Contact | null = agenda.getContact(args[1]);\n            if (contato !== null) {\n                contato.toogleFavorited();\n            }\n        } else if (args[0] === \"search\") {//pattern\n            write(agenda.search(args[1]).join(\"\\n\"));\n        } else if (args[0] === \"favs\") {//pattern\n            write(agenda.getFavorited().join(\"\\n\"));\n        } else {\n            write(\"fail: comando invalido\");\n        }\n    }\n}\n\n\nmain();\n",
                "encoding": 0
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.Collections;\n\n\npublic class Shell{\n\n    public static void main(String[] Args) {\n        Scanner scanner = new Scanner(System.in);\n        Agenda agenda = new Agenda();\n\n        while (true) {\n            String line = scanner.nextLine();\n            write(\"$\" + line);\n            String[] args = line.split(\" \");\n            \n            if      (args[0].equals(\"end\"))     { break;                           }\n            else if (args[0].equals(\"add\"))     {\n                ArrayList<Fone> fones = new ArrayList<>();\n                for (int i = 2; i < args.length; i++) {\n                    String[] fone = args[i].split(\":\");\n                    fones.add(new Fone(fone[0], fone[1]));\n                }\n                agenda.addContato(args[1], fones);\n            }\n            \n            else if (args[0].equals(\"show\"))    { write(agenda.str());                                     }\n            else if (args[0].equals(\"rm\"))      { agenda.rmContact(args[1]);                               }\n            else if (args[0].equals(\"favs\"))    { write(agenda.getFavorited().stream().map(contact -> contact.str()).collect(Collectors.joining(\"\\n\")));   }\n            else if (args[0].equals(\"search\"))  { write(agenda.search(args[1]).stream().map(contact -> contact.str()).collect(Collectors.joining(\"\\n\")));  }\n            \n            else if (args[0].equals(\"rmFone\"))  {\n                Contact contato = agenda.getContact(args[1]);\n                if (contato != null) contato.rmFone(number(args[2]));\n            }\n            else if (args[0].equals(\"tfav\"))    {\n                Contact contato = agenda.getContact(args[1]);\n                if (contato != null) contato.toogleFavorited();\n            }\n            \n            else                           {  write(\"fail: invalid command\");           }\n        }\n        scanner.close();\n    }\n    public static int number(String number) { return Integer.parseInt(number); }\n    public static void write(String str)    { System.out.println(str);         }\n}\n",
                "encoding": 0
            }
        ],
        "cpp": [
            {
                "name": "fn.hpp",
                "contents": "//--------------------------------------------------------\n// BIBLIOTECA HEADER ONLY PARA C++ \n//     MANIPULA\u00c7\u00c3O DE TEXTO\n//         FORMAT, TOSTR, PRINT, WRITE, SPLIT, JOIN\n//     E PROGRAMA\u00c7\u00c3O FUNCIONAL\n//         MAP, FILTER, SLICE, ENUMERATE\n//     EM MODO FUN\u00c7\u00c3O E MODO PIPELINE\n//--------------------------------------------------------\n//  VERS\u00c3O 1.0.0\n//  https://github.com/senapk/cppaux\n//--------------------------------------------------------\n\n#pragma once\n\n#include <iostream>\n#include <sstream>\n#include <iomanip>\n#include <array>\n#include <set>\n#include <map>\n#include <vector>\n#include <list>\n#include <unordered_map>\n#include <unordered_set>\n#include <memory>\n\nnamespace fn {\n\nusing str_view = std::string_view;\n\n//--------------------------------------------------------\n//-------------------- ALIGN -------------- --------------\n//--------------------------------------------------------\n\nclass Align {\n    char align_mode { 0 }; //< > or ^, default is center\n    int  align_size { 0 }; //size of the field\n    char pad_char   { ' ' }; //char used to pad the field\n    std::string format { \"\" }; //filtered format string\n\n    bool extract_align() {\n        std::string align_str_size;\n\n        size_t i {0}, j {0};\n        for (i = 0; i < format.size(); ++i) {\n            if (format[i] == '<' || format[i] == '>' || format[i] == '^') { //achei o alinhamento\n                this->align_mode = format[i];\n\n                for (j = i + 1; j < format.size(); ++j) { //extraindo o tamanho do alinhamento\n                    if (format[j] >= '0' && format[j] <= '9') {\n                        align_str_size += format[j];\n                    } else { // terminou o tamanho\n                        break;\n                    }\n                }\n                if (align_str_size.empty()) {\n                    this->align_size = 0;\n                    std::cout << \"fail: format symbol `\" << format[i] << \"` must be followed by a size\\n\";\n                    exit(1);\n                }\n                this->align_size = std::stoi(align_str_size);\n                this->format.erase(i, j - i);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    void extract_pad() {\n        //search for : char in format, if exists and is followed by a char, then use that char as padding, and remove both from string\n        auto pos = this->format.find(':');\n        if (pos != std::string::npos) {\n            if (pos + 1 < format.size()) {\n                this->pad_char = format[pos + 1];\n                this->format.erase(pos, 2);\n            } else {\n                std::cout << \"fail: format symbol `:` must be followed by a padding char\\n\";\n                exit(1);\n            }\n        }\n    }\npublic:\n\n    Align(str_view format) {\n        this->format = format;\n        this->extract_pad();\n        this->extract_align();\n    }\n\n    std::string align_text(const std::string& str) {\n        int len = str.length();\n        if(this->align_mode == 0 || this->align_size < len) { \n            return str; \n        }\n        int diff = this->align_size - len;\n        \n        //default is center\n        int padleft = diff/2;\n        int padright = diff - padleft;\n        if(this->align_mode == '>') {\n            padleft = diff;\n            padright = 0;\n        }\n        else if(this->align_mode == '<') {\n            padleft = 0;\n            padright = diff;\n        }\n        return std::string(padleft, this->pad_char) + str + std::string(padright, this->pad_char);\n    }\n\n    const std::string& get_filtered_format() {\n        return this->format;\n    }\n    int get_align_size() {\n        return this->align_size;\n    }\n    char get_pad_char() {\n        return this->pad_char;\n    }\n    char get_align_mode() {\n        return this->align_mode;\n    }\n};\n\n//--------------------------------------------------------\n//-------------------- CFMT  -----------------------------\n//--------------------------------------------------------\n\nclass CFMT {\n\n    //transformation using sprintf\n    template <typename T>\n    static std::string c_transform(const T& data, const str_view& format) {\n        std::string fmt(format);\n        auto size = std::snprintf(nullptr, 0, fmt.c_str(), data);\n        std::string output(size + 1, '\\0');\n        std::sprintf(&output[0], fmt.c_str(), data);\n        if (output.back() == '\\0') \n            output.pop_back();\n        return output;\n    }\n\n    //conversion to string using stringstream\n    template <typename T>\n    static std::string sstream_transform(const T& data) {\n        std::stringstream ss;\n        ss << data;\n        return ss.str();\n    }\n\n\n    template <typename T>\n    static std::string process(const T& data, const str_view& format) \n    {\n        if (format == \"%s\" || format == \"\") {\n            return sstream_transform(data);\n        }\n        if (format.size() > 0 && format.find(\"%s\") != std::string::npos) {//formatting a non string with %s\n            return process(sstream_transform(data), format);\n        }\n        return c_transform(data, format);\n    }\n\n    //validate if the format is correct for a string\n    static std::string process(const std::string& data, const str_view& format) \n    {\n        return process(data.c_str(), format);\n    }\n    \n    //validate if the format is correct for a const char *\n    //write specialization for const char *\n    static std::string process(const char* const& data, const str_view& format) \n    {\n        if (format == \"%s\" || format == \"\") {\n            return data;\n        }\n        return CFMT::c_transform(data, format);\n    };\n\n    \npublic:\n\n    template <typename T>\n    static std::string format(const T& data, const str_view& format) \n    {\n        Align align(format);\n        std::string filtered = align.get_filtered_format();\n        return align.align_text(process(data, filtered));\n    }\n};\n\n//--------------------------------------------------------\n//-------------------- TOSTR PROTOTYPE -------------------\n//--------------------------------------------------------\n\ntemplate <typename T> std::string tostr(const T& t     , const str_view& format = \"\");\n\n//--------------------------------------------------------\n//-------------------- JOIN  -----------------------------\n//--------------------------------------------------------\n\nnamespace hide {\ntemplate <typename CONTAINER> \nstd::string __join(const CONTAINER& container, const str_view& separator, const str_view& cfmt) \n{ \n    std::stringstream ss;\n    for (auto it = container.begin(); it != container.end(); ++it) {\n        ss << (it == container.begin() ? \"\" : separator);\n        ss << tostr(*it, cfmt);\n    }\n    return ss.str();\n}\n\ntemplate <typename... Ts>\nstd::string __join(std::tuple<Ts...> const &the_tuple, const str_view& separator, const str_view& cfmt)\n{\n    std::stringstream ss;\n    std::apply( [&](Ts const &...tuple_args) {\n            std::size_t n{0};\n            ((ss << tostr(tuple_args, cfmt) << (++n != sizeof...(Ts) ? separator : \"\")), ...);\n        }, the_tuple);\n    return ss.str();\n}\n\ntemplate <typename T1, typename T2>\nstd::string __join(const std::pair<T1, T2>& the_pair, const str_view& separator, const str_view& cfmt)\n{\n    std::stringstream ss;\n    ss << tostr(the_pair.first, cfmt) << separator << tostr(the_pair.second, cfmt);\n    return ss.str();\n}\n}\n//__guide join\n//[[join]]\n/**\n * @note #### `join(T container, str separator = \"\", str cfmt = \"\") -> str`\n * @note #### `T container| JOIN(str separator = \"\", str cfmt = \"\") -> str`\n * \n * @note - Transforma um container, par ou tupla em string.\n * @note - Se os elementos n\u00e3o forem strings, eles ser\u00e3o transformados pela fun\u00e7\u00e3o `tostr`.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` Container a ser transformado em string.\n * @note `param: separator` Separador entre os elementos.\n * @note `param: cfmt` String de formata\u00e7\u00e3o.\n * @note `return` String com os elementos concatenados.\n * \n * @note  #### Exemplos\n * @note `join(vector<int>{1, 2, 3}, \" \") | WRITE(); // \"1 2 3\"`\n * @note `vector<int>{1, 2, 3} | JOIN(\"=\") | WRITE(); // \"1=2=3\"`\n * @note `vector<int>{1, 2, 3} | JOIN(\"=\", \"%02d\") | WRITE(); // \"01=02=03\"`\n * \n * @note  #### Mais exemplos em https://github.com/senapk/cppaux#join\n */\ntemplate <typename T>\nstd::string join(const T& container, const str_view& separator = \"\", const str_view& cfmt = \"\") \n//[[join]]\n{\n    return hide::__join(container, separator, cfmt);\n}\n\n//class\nstruct JOIN {\n    str_view delimiter;\n    str_view cfmt;\n\n//__guide join\n/**\n * @note #### `join(T container, str separator = \"\", str cfmt = \"\") -> str`\n * @note #### `T container| JOIN(str separator = \"\", str cfmt = \"\") -> str`\n * \n * @note - Transforma um container, par ou tupla em string.\n * @note - Se os elementos n\u00e3o forem strings, eles ser\u00e3o transformados pela fun\u00e7\u00e3o `tostr`.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` Container a ser transformado em string.\n * @note `param: separator` Separador entre os elementos.\n * @note `param: cfmt` String de formata\u00e7\u00e3o.\n * @note `return` String com os elementos concatenados.\n * \n * @note  #### Exemplos\n * @note `join(vector<int>{1, 2, 3}, \" \") | WRITE(); // \"1 2 3\"`\n * @note `vector<int>{1, 2, 3} | JOIN(\"=\") | WRITE(); // \"1=2=3\"`\n * @note `vector<int>{1, 2, 3} | JOIN(\"=\", \"%02d\") | WRITE(); // \"01=02=03\"`\n * \n * @note  #### Mais exemplos em https://github.com/senapk/cppaux#join\n */\n    JOIN(const str_view& delimiter = \"\", const str_view& cfmt = \"\") : delimiter(delimiter), cfmt(cfmt) {}\n    template <typename CONTAINER> std::string operator()(const CONTAINER& v) const { return join(v, delimiter, cfmt); }\n    template <typename T> friend std::string operator|(const T& v, const JOIN& obj) { return obj(v); }\n};\n\n//--------------------------------------------------------\n//-------------------- TOSTR -----------------------------\n//--------------------------------------------------------\n\nnamespace hide {\ntemplate <typename T>             inline std::string __tostr(const T& t                      , const str_view& format) { return CFMT::format(t, format); }\n                                  inline std::string __tostr(int i                           , const str_view& format) { return CFMT::format(i, format); }\n                                  inline std::string __tostr(bool b                          , const str_view& format) { (void) format; return b ? \"true\" : \"false\"; }\n                                  inline std::string __tostr(const char* s                   , const str_view& format) { return CFMT::format(s, format); }\n                                  inline std::string __tostr(const std::string& s            , const str_view& format) { return CFMT::format(s, format); }\n                                  inline std::string __tostr(const str_view& s               , const str_view& format) { return CFMT::format(s, format); }\ntemplate <typename A, typename B> inline std::string __tostr(const std::pair<A,B>& p         , const str_view& format) { return \"(\" + tostr(p.first, format) + \", \" + tostr(p.second, format) + \")\"; }\ntemplate <typename T>             inline std::string __tostr(const std::list<T>& t           , const str_view& format) { return \"[\" + join(t, \", \", format) + \"]\"; }\ntemplate <typename T>             inline std::string __tostr(const std::vector<T>& t         , const str_view& format) { return \"[\" + join(t, \", \", format) + \"]\"; }\ntemplate <typename ...Ts>         inline std::string __tostr(const std::tuple<Ts...>& t      , const str_view& format) { return \"(\" + join(t, \", \", format) + \")\"; }\ntemplate <typename T, size_t N>   inline std::string __tostr(const std::array<T, N>& t       , const str_view& format) { return \"[\" + join(t, \", \", format) + \"]\"; }\ntemplate <typename T>             inline std::string __tostr(const std::set<T>& t            , const str_view& format) { return \"{\" + join(t, \", \", format) + \"}\"; }\ntemplate <typename K, typename T> inline std::string __tostr(const std::map<K,T>& t          , const str_view& format) { return \"{\" + join(t, \", \", format) + \"}\"; }\ntemplate <typename T>             inline std::string __tostr(const std::unordered_set<T>& t  , const str_view& format) { return \"{\" + join(t, \", \", format) + \"}\"; }\ntemplate <typename K, typename T> inline std::string __tostr(const std::unordered_map<K,T>& t, const str_view& format) { return \"{\" + join(t, \", \", format) + \"}\"; }\ntemplate <typename T>             inline std::string __tostr(const std::shared_ptr<T>& t     , const str_view& format) { return t == nullptr ? \"null\" : tostr(*t, format); }\n\n}\n\n//__guide tostr\n//[[tostr]]\n/**\n * @note #### `tostr(T data, str cfmt = \"\") -> str`\n * @note #### `T data| TOSTR(str cfmt = \"\") -> str`\n * @note - Converte o dado passado em string.\n * \n * @note #### Par\u00e2metros\n * @note `param: data` Dado a ser convertido.\n * @note `param: cfmt` Par\u00e2metro de formata\u00e7\u00e3o no modo printf.\n * @note `return` String com o dado convertido.\n * \n * @note #### Funcionamento para tipos primitivos\n * @note - Converte o dado em string.\n * @note - Se `cfmt` for passado, o dado ser\u00e1 formatado usando o modelo do `printf`.\n * @note `tostr(1.2) | WRITE(); // \"1.2\"`\n * @note `tostr(1.2, \"%.4f\") | WRITE(); // \"1.2000\"`\n * \n * @note #### Funcionamento para containers\n * @note - Elementos s\u00e3o impressos usando v\u00edrgulas como separador.\n * @note `vector`, `list` e `array` s\u00e3o impressos entre colchetes. \n * @note `map` e `set` s\u00e3o impressos entre chaves. \n * @note `pair` e `tuple` s\u00e3o impressos entre par\u00eanteses.\n * @note - O par\u00e2metro de formata\u00e7\u00e3o \u00e9 aplicado em todos os elementos do container recursivamente.\n * @note `tostr(list<int>{1,2,3}, \"%02d\") | WRITE(); //[01, 02, 03]`\n * \n * @note #### Formata\u00e7\u00e3o personalizada\n * @note - Veja a fun\u00e7\u00e3o `join`.\n * @note `std::vector<int> vet {1, 2, 3};`\n * @note `join(vet, \" - \", \"%02d\") | WRITE(); // \"01 - 02 - 03\"`\n * \n * @note #### Funcionamento para tipos do usu\u00e1rio\n * @note - Basta implementar a fun\u00e7\u00e3o de sa\u00edda\n * @note `ostream& operador <<(ostream& os, TIPO tipo)`.\n * \n * @note  #### Exemplos\n * @note `tostr(std::list<int>{1,2,3}, \"%02d\") | WRITE(); //[01, 02, 03]`\n * @note `std::pair<int, int>(2, 1) | TOSTR() | WRITE(); //(2, 1)`\n * \n * @note  #### Mais exemplos em https://github.com/senapk/cppaux#tostr\n */\ntemplate <typename T> std::string tostr(const T& data     , const str_view& cfmt) \n//[[tostr]]\n{ \n    return hide::__tostr(data, cfmt); \n}\n\n//class\nstruct TOSTR {\n    str_view cfmt;\n\n//__guide tostr\n/**\n * @note #### `tostr(T data, str cfmt = \"\") -> str`\n * @note #### `T data| TOSTR(str cfmt = \"\") -> str`\n * @note - Converte o dado passado em string.\n * \n * @note #### Par\u00e2metros\n * @note `param: data` Dado a ser convertido.\n * @note `param: cfmt` Par\u00e2metro de formata\u00e7\u00e3o no modo printf.\n * @note `return` String com o dado convertido.\n * \n * @note #### Funcionamento para tipos primitivos\n * @note - Converte o dado em string.\n * @note - Se `cfmt` for passado, o dado ser\u00e1 formatado usando o modelo do `printf`.\n * @note `tostr(1.2) | WRITE(); // \"1.2\"`\n * @note `tostr(1.2, \"%.4f\") | WRITE(); // \"1.2000\"`\n * \n * @note #### Funcionamento para containers\n * @note - Elementos s\u00e3o impressos usando v\u00edrgulas como separador.\n * @note `vector`, `list` e `array` s\u00e3o impressos entre colchetes. \n * @note `map` e `set` s\u00e3o impressos entre chaves. \n * @note `pair` e `tuple` s\u00e3o impressos entre par\u00eanteses.\n * @note - O par\u00e2metro de formata\u00e7\u00e3o \u00e9 aplicado em todos os elementos do container recursivamente.\n * @note `tostr(list<int>{1,2,3}, \"%02d\") | WRITE(); //[01, 02, 03]`\n * \n * @note #### Formata\u00e7\u00e3o personalizada\n * @note - Veja a fun\u00e7\u00e3o `join`.\n * @note `std::vector<int> vet {1, 2, 3};`\n * @note `join(vet, \" - \", \"%02d\") | WRITE(); // \"01 - 02 - 03\"`\n * \n * @note #### Funcionamento para tipos do usu\u00e1rio\n * @note - Basta implementar a fun\u00e7\u00e3o de sa\u00edda\n * @note `ostream& operador <<(ostream& os, TIPO tipo)`.\n * \n * @note  #### Exemplos\n * @note `tostr(std::list<int>{1,2,3}, \"%02d\") | WRITE(); //[01, 02, 03]`\n * @note `std::pair<int, int>(2, 1) | TOSTR() | WRITE(); //(2, 1)`\n * \n * @note  #### Mais exemplos em https://github.com/senapk/cppaux#tostr\n */\n    TOSTR(const str_view& cfmt = \"\") : cfmt(cfmt) {}\n\n    template <typename T> std::string operator()(const T& t) const { return tostr(t, cfmt); }\n    template <typename T> friend std::string operator|(const T& v, const TOSTR& obj) { return obj(v); }\n};\n\n//--------------------------------------------------------\n//-------------------- FORMAT ----------------------------\n//--------------------------------------------------------\n\n//class\ntemplate<typename... Args> \nclass FORMAT \n{\n    std::tuple<Args...> args;\n\n    std::vector<std::string> tuple_to_vector_str(const std::vector<std::string>& controls)\n    {\n        std::vector<std::string> result;\n        std::apply\n        (\n            [&result, &controls](Args const&... tupleArgs)\n            {\n                int i = -1;\n                ((result.push_back(tostr(tupleArgs, controls.at(++i)))), ...);\n            }, this->args\n        );\n\n        return result;\n    }\n\n    //transforma {{ em \\a e }} em \\b\n    std::string preprocess(std::string data) {\n        std::string result1;\n        data.push_back('_');\n        for (int i = 0; i < (int) data.size() - 1; i++) {\n            if (data[i] == '{' && data[i + 1] == '{') {\n                result1.push_back('\\a');\n                i++;\n            } else {\n                result1.push_back(data[i]);\n            }\n        }\n        std::string result2;\n        for (int i = result1.size() - 1; i >= 0; i--) {\n            if (result1[i] == '}' && result1[i - 1] == '}') {\n                result2.push_back('\\b');\n                i--;\n            } else {\n                result2.push_back(result1[i]);\n            }\n        }\n        std::string final_result;\n        for (int i = result2.size() - 1; i >= 0; i--) {\n            final_result.push_back(result2[i]);\n        }\n        return final_result;\n    }\n\n    std::pair<std::vector<std::string>, std::vector<std::string>> extract(std::string data)\n    {\n        data = preprocess(data);\n        std::vector<std::string> texts = {\"\"};\n        std::vector<std::string> ctrls = {\"\"};\n        auto* destiny = &texts;\n\n        for (char c : data) {\n            if (c == '{') \n            {\n                texts.push_back(\"\");\n                destiny = &ctrls;\n            }\n            else if (c == '}') \n            {\n                ctrls.push_back(\"\");\n                destiny = &texts;\n            }\n            else\n            {\n                if (c == '\\a') {\n                    c = '{';\n                } else if (c == '\\b') {\n                    c = '}';\n                }\n                destiny->back().append(std::string(1,c));\n            }\n        }\n        while (texts.size() > ctrls.size())\n            ctrls.push_back(\"\");\n        return {texts, ctrls};\n    }\n\npublic:\n\n//__guide format\n/**\n * @note #### `format(str fmt, Args ...args ) -> str`\n * @note #### `str fmt| FORMAT(Args ...args ) -> str`\n * \n * @note - Formata uma string com base nos argumentos passados \n * @note - Utilizando um modelo de chaves para posicionar os argumentos.\n * @note - Se dentro da chave, houver um string de formata\u00e7\u00e3o, o dado ser\u00e1 formatado com base nela.\n * @note - N\u00e3o primitivos s\u00e3o formatados de acordo com a fun\u00e7\u00e3o `tostr`\n * \n * @note #### Par\u00e2metros\n * @note `param: fmt` O texto com os {} para substituir pelos argumentos.\n * @note `param: args` Os argumentos a serem substitu\u00eddos.\n * @note `return` O texto formatado.\n * \n * @note #### Exemplos\n * @note `format(\"O {} \u00e9 {%0.2f}.\", \"pi\", 3.141592653) | WRITE(); //o pi e 3.14.`\n * @note `\"O {} \u00e9 {%0.2f}.\" | FORMAT(\"pi\", 3.141592653) | WRITE(); //o pi e 3.14.`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/cppaux#format\n * \n */\n    FORMAT(Args ...args): args(std::forward<Args>(args)...){}\n\n    std::string operator()(std::string fmt)\n    {\n        auto [texts, controls] = extract(fmt);\n        try {\n            auto vars = tuple_to_vector_str(controls);\n            \n            if(vars.size() < texts.size() - 1) {\n                throw std::out_of_range(\"\");\n            }\n            std::stringstream ss;\n            for (size_t i = 0; i < vars.size(); i++)\n                ss << texts[i] << vars[i];\n            ss << texts.back(); //ultimo texto\n            return ss.str();\n        } catch (std::out_of_range& e) {\n            std::cout << \"fail: verifique a quantidade de par\u00e2metros passado para string: \" << fmt << '\\n';\n            exit(1);\n        }\n    }\n\n    friend std::string operator|(std::string fmt, FORMAT<Args...> obj) { return obj(fmt); }\n};\n\n\n//__guide format\n//[[format]]\n/**\n * @note #### `format(str fmt, Args ...args ) -> str`\n * @note #### `str fmt| FORMAT(Args ...args ) -> str`\n * \n * @note - Formata uma string com base nos argumentos passados \n * @note - Utilizando um modelo de chaves para posicionar os argumentos.\n * @note - Se dentro da chave, houver um string de formata\u00e7\u00e3o, o dado ser\u00e1 formatado com base nela.\n * @note - N\u00e3o primitivos s\u00e3o formatados de acordo com a fun\u00e7\u00e3o `tostr`\n * \n * @note #### Par\u00e2metros\n * @note `param: fmt` O texto com os {} para substituir pelos argumentos.\n * @note `param: args` Os argumentos a serem substitu\u00eddos.\n * @note `return` O texto formatado.\n * \n * @note #### Exemplos\n * @note `format(\"O {} \u00e9 {%0.2f}.\", \"pi\", 3.141592653) | WRITE(); //o pi e 3.14.`\n * @note `\"O {} \u00e9 {%0.2f}.\" | FORMAT(\"pi\", 3.141592653) | WRITE(); //o pi e 3.14.`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/cppaux#format\n * \n */\ntemplate<typename... Args> \nstd::string format(std::string fmt, Args ...args) \n//[[format]]\n{\n    return FORMAT<Args...>(args...)(fmt); \n}\n\n\n//--------------------------------------------------------\n//-------------------- PRINT------------------------------\n//--------------------------------------------------------\n\n//__guide print\n//[[print]]\n/**\n * @note #### `print(str fmt, Args ...args) -> str`\n * \n * @note - Invoca a fun\u00e7\u00e3o `format` e imprime o resultado na tela.\n * @note - As quebras de linha precisam ser inseridas explicitamente.\n * \n * @note #### Par\u00e2metros\n * @note `param: fmt` O texto com os {} para substituir pelos argumentos.\n * @note `param: args` Os argumentos a serem substitu\u00eddos.\n * @note `return` O texto que foi impresso.\n * \n * @note #### Exemplos\n * @note `print(\"O {} \u00e9 {%0.2f}.\\n\", \"pi\", 3.141592653); //o pi e 3.14.`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/cppaux#print\n * \n */\ntemplate<typename... Args> std::string print(std::string fmt, Args ...args)\n//[[print]]\n{ \n    auto result = FORMAT<Args...>(args...)(fmt);\n    std::cout << result;\n    return result;\n}\n//class\ntemplate<typename... Args> \nstruct PRINT {\n    std::tuple<Args...> args;\n\n//__guide print\n/**\n * @note #### `print(str fmt, Args ...args) -> str`\n * \n * @note - Invoca a fun\u00e7\u00e3o `format` e imprime o resultado na tela.\n * @note - As quebras de linha precisam ser inseridas explicitamente.\n * \n * @note #### Par\u00e2metros\n * @note `param: fmt` O texto com os {} para substituir pelos argumentos.\n * @note `param: args` Os argumentos a serem substitu\u00eddos.\n * @note `return` O texto que foi impresso.\n * \n * @note #### Exemplos\n * @note `print(\"O {} \u00e9 {%0.2f}.\\n\", \"pi\", 3.141592653); //o pi e 3.14.`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/cppaux#print\n * \n */\n    PRINT(Args ...args): args(std::forward<Args>(args)...) { }\n    std::string operator()(std::string fmt) { return print(fmt, args); }\n    friend std::string operator|(std::string fmt, PRINT<Args...> obj) { return obj(fmt); }\n};\n\n//--------------------------------------------------------\n//-------------------- WRITE -----------------------------\n//--------------------------------------------------------\n\n//__guide write\n//[[write]]\n/**\n * @note #### `write(T data, str end = \"\\n\") -> T`\n * @note #### `T data| WRITE(str end = \"\\n\") -> T`\n * \n * @note - Envia o dado para o `std::cout` quebrando a linha.\n * @note - Se o dado n\u00e3o for uma `string`, ser\u00e1 convertido pela fun\u00e7\u00e3o `tostr`.\n * @note - O modo pipe \u00e9 `| WRITE()`.\n * \n * @note #### Par\u00e2metros\n * @note `param: data` Dado a ser transformado e impresso.\n * @note `param: end` (opcional) String a ser inserida no final da linha.\n * @note `return` O dado original recebido.\n * \n * @note #### Exemplos\n * @note `write(vector<int> {1, 2, 3}); // [1, 2, 3]`\n * @note `vector<int> {1, 2, 3} | WRITE(); // [1, 2, 3]`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/cppaux#write\n */\ntemplate <typename PRINTABLE> const PRINTABLE& write(const PRINTABLE& data, str_view end = \"\\n\") \n//[[write]]\n{\n    std::cout << tostr(data) << end;\n    return data;\n}\n\n//class\nstruct WRITE {\n    str_view end;\n\n//__guide write\n/**\n * @note #### `write(T data, str end = \"\\n\") -> T`\n * @note #### `T data| WRITE(str end = \"\\n\") -> T`\n * \n * @note - Envia o dado para o `std::cout` quebrando a linha.\n * @note - Se o dado n\u00e3o for uma `string`, ser\u00e1 convertido pela fun\u00e7\u00e3o `tostr`.\n * @note - O modo pipe \u00e9 `| WRITE()`.\n * \n * @note #### Par\u00e2metros\n * @note `param: data` Dado a ser transformado e impresso.\n * @note `param: end` (opcional) String a ser inserida no final da linha.\n * @note `return` O dado original recebido.\n * \n * @note #### Exemplos\n * @note `write(vector<int> {1, 2, 3}); // [1, 2, 3]`\n * @note `vector<int> {1, 2, 3} | WRITE(); // [1, 2, 3]`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/cppaux#write\n */\n    WRITE(str_view end = \"\\n\"): end(end) { }\n\n    template <typename PRINTABLE>        const PRINTABLE& operator()(const PRINTABLE& data           ) { return write(data, end); }\n    template <typename PRINTABLE> friend const PRINTABLE& operator| (const PRINTABLE& data, WRITE obj) { return obj(data); }\n};\n\n//--------------------------------------------------------\n//-------------------- SLICE -----------------------------\n//--------------------------------------------------------\n\nclass SLICE {\npublic:\n//__guide slice1\n/**\n * @note #### `slice(CONTAINER<T> container, int begin = 0) -> vector<T>`\n * @note #### `CONTAINER<T> container| SLICE(int begin = 0) -> vector<T>`\n * \n * @note - Fatia um container retornando um `vector` com os elementos copiados.\n * @note - Funciona como a fun\u00e7\u00e3o `slice` do Python ou do Javascript. \n * @note - Se n\u00e3o passado nenhum par\u00e2metro, copia todos os elementos. \n * @note - Os \u00edndices podem ser negativos para contar a partir final.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` container a ser fatiado.\n * @note `param: begin` (opcional) \u00edndice inicial.\n * @note `return` vector com os elementos copiados.\n * \n * @note #### Exemplos\n * @note `vector<int> vet {1, 2, 3, 4, 5};`\n * @note `slice(vet, 1) | WRITE(); // [2, 3, 4, 5]`\n * @note `slice(vet, -2) | WRITE(); // [4, 5]`\n * @note `vet | SLICE(1) | WRITE(); // [2, 3, 4, 5]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/cppaux#slice\n */\n    SLICE(int begin = 0) {\n        this->from_begin = begin == 0;\n        this->begin = begin;\n        this->to_end = true;\n    }\n\n//__guide slice2\n/**\n * @note #### `slice(CONTAINER<T> container, int begin, int end) -> vector<T>`\n * @note #### `CONTAINER<T> container| SLICE(int begin, int end) -> vector<T>`\n * \n * @note - Fatia um container retornando um `vector` com os elementos copiados.\n * @note - Funciona como a fun\u00e7\u00e3o `slice` do Python ou do Javascript. \n * @note - Os \u00edndices podem ser negativos para indicar que a contagem deve ser feita a partir do final.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` container a ser fatiado.\n * @note `param: begin` \u00edndice inicial.\n * @note `param: end` \u00edndice final.\n * @note `return` vector com os elementos copiados.\n * \n * @note #### Exemplos\n * @note `vector<int> vet {1, 2, 3, 4, 5};`\n * @note `slice(vet, 1, -1) | WRITE(); // [2, 3, 4]`\n * @note `vet| SLICE(1, -1) | WRITE(); // [2, 3, 4]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/cppaux#slice\n */\n    SLICE(int begin, int end) {\n        this->begin = begin;\n        this->end = end;\n        this->from_begin = false;\n        this->to_end = false;\n    }\n    template<typename CONTAINER>\n    auto operator()(const CONTAINER& container) const {\n        auto aux = SLICE::new_vec_from(container);\n        \n        //empty container\n        if (!this->from_begin && !this->to_end && (this->begin == this->end)) {\n            return aux;\n        }\n\n        //full container\n        if (this->from_begin && this->to_end) {\n            std::copy(container.begin(), container.end(), std::back_inserter(aux));\n            return aux;\n        }\n\n        int size = container.size();\n        int begin = 0;\n        int end = size;\n        if (!this->from_begin) {\n            begin = this->begin;\n            if (begin < 0)\n                begin = size + begin;\n            begin = std::min(begin, size);\n        }\n        if (!this->to_end) {\n            end = this->end;\n            if (end < 0)\n                end = size + end;\n            end = std::min(end, size);\n        }\n\n        std::copy(std::next(container.begin(), begin), std::next(container.begin(), end), std::back_inserter(aux));\n        return aux;\n    }\n    \n    template<typename CONTAINER> friend auto operator|(const CONTAINER& container, const SLICE& obj) { return obj(container); }\n\nprivate:\n    int begin;\n    int end;\n    bool from_begin {false};\n    bool to_end {false};\n\n    template<typename CONTAINER>\n    static auto new_vec_from(const CONTAINER& container) {\n        auto fn = [](auto x) {return x;}; \n        std::vector<decltype(fn(*container.begin()))> aux;\n        return aux;\n    }\n\n    template <typename K, typename T>\n    static auto new_vec_from(const std::map<K, T>& container) {\n        auto fn = [](auto x) {return x;}; \n        std::vector<std::pair<decltype(fn(container.begin()->first)), decltype(fn(container.begin()->second))>> aux;\n        return aux;\n    }\n\n    template <typename K, typename T>\n    static auto new_vec_from(const std::unordered_map<K, T>& container) {\n        auto fn = [](auto x) {return x;}; \n        std::vector<std::pair<decltype(fn(container.begin()->first)), decltype(fn(container.begin()->second))>> aux;\n        return aux;\n    }\n};\n\n//__guide slice1\n//[[slice]]\n/**\n * @note #### `slice(CONTAINER<T> container, int begin = 0) -> vector<T>`\n * @note #### `CONTAINER<T> container| SLICE(int begin = 0) -> vector<T>`\n * \n * @note - Fatia um container retornando um `vector` com os elementos copiados.\n * @note - Funciona como a fun\u00e7\u00e3o `slice` do Python ou do Javascript. \n * @note - Se n\u00e3o passado nenhum par\u00e2metro, copia todos os elementos. \n * @note - Os \u00edndices podem ser negativos para contar a partir final.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` container a ser fatiado.\n * @note `param: begin` (opcional) \u00edndice inicial.\n * @note `return` vector com os elementos copiados.\n * \n * @note #### Exemplos\n * @note `vector<int> vet {1, 2, 3, 4, 5};`\n * @note `slice(vet, 1) | WRITE(); // [2, 3, 4, 5]`\n * @note `slice(vet, -2) | WRITE(); // [4, 5]`\n * @note `vet | SLICE(1) | WRITE(); // [2, 3, 4, 5]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/cppaux#slice\n */\ntemplate<typename CONTAINER>\nauto slice(const CONTAINER& container, int begin = 0)\n//[[slice]]\n{\n    return SLICE(begin)(container);\n}\n\n//__guide slice2\n/**\n * @note #### `slice(CONTAINER<T> container, int begin, int end) -> vector<T>`\n * @note #### `CONTAINER<T> container| SLICE(int begin, int end) -> vector<T>`\n * \n * @note - Fatia um container retornando um `vector` com os elementos copiados.\n * @note - Funciona como a fun\u00e7\u00e3o `slice` do Python ou do Javascript. \n * @note - Os \u00edndices podem ser negativos para indicar que a contagem deve ser feita a partir do final.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` container a ser fatiado.\n * @note `param: begin` \u00edndice inicial.\n * @note `param: end` \u00edndice final.\n * @note `return` vector com os elementos copiados.\n * \n * @note #### Exemplos\n * @note `vector<int> vet {1, 2, 3, 4, 5};`\n * @note `slice(vet, 1, -1) | WRITE(); // [2, 3, 4]`\n * @note `vet| SLICE(1, -1) | WRITE(); // [2, 3, 4]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/cppaux#slice\n */\ntemplate<typename CONTAINER>\nauto slice(CONTAINER container, int begin, int end)\n{\n    return SLICE(begin, end)(container);\n}\n\n//--------------------------------------------------------\n//-------------------- MAP   -----------------------------\n//--------------------------------------------------------\n\n//__guide map\n//[[map]]\n/**\n * @note #### `map(CONTAINER<T> container, FUNCTION fn) -> vector<fn(T)>`\n * @note #### `CONTAINER<T> container| MAP(FUNCTION fn) -> vector<fn(T)>`\n * \n * @note - Retorna um vetor com o resultado da aplica\u00e7\u00e3o da fun\u00e7\u00e3o fn para cada elemento do container.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` Container a ser mapeado.\n * @note `param: fn` Fun\u00e7\u00e3o a ser aplicada em cada elemento do container.\n * @note `return` Vector com os elementos resultantes da aplica\u00e7\u00e3o da fun\u00e7\u00e3o.\n * \n * @note #### Exemplos\n * @note `vector<int> vet {1, 2, 3};`\n * @note `map(vet, [](int x) {return x * x;}) | WRITE(); // [1, 4, 9]`\n * @note `vet| MAP([](int x) {return x * x;}) | WRITE(); // [1, 4, 9]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/cppaux#map\n */\ntemplate<typename CONTAINER, typename FUNCTION>\nauto map(const CONTAINER& container, FUNCTION fn)\n//[[map]]\n{\n    std::vector<decltype(fn(*container.begin()))> aux;\n    for (const auto& item : container)\n        aux.push_back(fn(item));\n    return aux;\n}\n\ntemplate <typename FUNCTION>\nstruct MAP {\n    FUNCTION fn;\n//__guide map\n/**\n * @note #### `map(CONTAINER<T> container, FUNCTION fn) -> vector<fn(T)>`\n * @note #### `CONTAINER<T> container| MAP(FUNCTION fn) -> vector<fn(T)>`\n * \n * @note - Retorna um vetor com o resultado da aplica\u00e7\u00e3o da fun\u00e7\u00e3o fn para cada elemento do container.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` Container a ser mapeado.\n * @note `param: fn` Fun\u00e7\u00e3o a ser aplicada em cada elemento do container.\n * @note `return` Vector com os elementos resultantes da aplica\u00e7\u00e3o da fun\u00e7\u00e3o.\n * \n * @note #### Exemplos\n * @note `vector<int> vet {1, 2, 3};`\n * @note `map(vet, [](int x) {return x * x;}) | WRITE(); // [1, 4, 9]`\n * @note `vet| MAP([](int x) {return x * x;}) | WRITE(); // [1, 4, 9]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/cppaux#map\n */\n    MAP(FUNCTION fn) : fn(fn) {};\n    template<typename CONTAINER> auto operator()(const CONTAINER& container) const { return map(container, fn); }\n    template<typename CONTAINER> friend auto operator|(const CONTAINER& container, const MAP& map) { return map(container); }\n};\n\n//--------------------------------------------------------\n//-------------------- FILTER ----------------------------\n//--------------------------------------------------------\n\n//__guide filter\n//[[filter]]\n/**\n * @note #### `filter(CONTAINER<T> container, FUNCTION fn) -> vector<T>`\n * @note #### `CONTAINER<T> container| FILTER(FUNCTION fn) -> vector<T>`\n * \n * @note - Retorna um vetor com os elementos do container que satisfazem a fun\u00e7\u00e3o predicado fn.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` Container a ser filtrado.\n * @note `param: fn` Fun\u00e7\u00e3o predicado.\n * @note `return` Vector com os elementos que satisfazem a fun\u00e7\u00e3o predicado.\n * \n * @note #### Exemplos\n * @note `vector<int> vet {1, 2, 3};`\n * @note `filter(vet, [](int x) {return x % 2 == 0;}) | WRITE(); // [2]`\n * @note `vet| FILTER([](int x) {return x % 2 == 0;}) | WRITE(); // [2]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/cppaux#filter\n * \n */\ntemplate<typename CONTAINER, typename FUNCTION>\nauto filter(const CONTAINER& container, FUNCTION fn)\n//[[filter]]\n{\n    auto aux = slice(container, 0, 0);\n    for(const auto& x : container) {\n        if(fn(x))\n            aux.push_back(x);\n    }\n    return aux;\n}\n\ntemplate <typename FUNCTION>\nstruct FILTER {\n    FUNCTION fn;\n\n//__guide filter\n/**\n * @note #### `filter(CONTAINER<T> container, FUNCTION fn) -> vector<T>`\n * @note #### `CONTAINER<T> container| FILTER(FUNCTION fn) -> vector<T>`\n * \n * @note - Retorna um vetor com os elementos do container que satisfazem a fun\u00e7\u00e3o predicado fn.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` Container a ser filtrado.\n * @note `param: fn` Fun\u00e7\u00e3o predicado.\n * @note `return` Vector com os elementos que satisfazem a fun\u00e7\u00e3o predicado.\n * \n * @note #### Exemplos\n * @note `vector<int> vet {1, 2, 3};`\n * @note `filter(vet, [](int x) {return x % 2 == 0;}) | WRITE(); // [2]`\n * @note `vet| FILTER([](int x) {return x % 2 == 0;}) | WRITE(); // [2]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/cppaux#filter\n * \n */\n    FILTER(FUNCTION fn) : fn(fn) {};\n    template<typename CONTAINER> auto operator()(const CONTAINER& container) const { return filter(container, fn); }\n    template<typename CONTAINER> friend auto operator|(const CONTAINER& container, const FILTER& obj) { return obj(container); }\n};\n\n//--------------------------------------------------------\n//-------------------- RANGE -----------------------------\n//--------------------------------------------------------\n\n//__guide range2\n// [[range]]\n/**\n * @note #### `range(int init, int end, int step = 1) -> vector<int>`\n * \n * @note - Gera um vetor de inteiros de init at\u00e9 end, mas n\u00e3o incluindo end, com passo step.\n * \n * @note #### Par\u00e2metros\n * @note `param: init` in\u00edcio.\n * @note `param: end` limite superior.\n * @note `param: step` passo do incremento.\n * @note `return` vetor de inteiros.\n * \n * @note #### Exemplos\n * @note `range(0, 10) | WRITE(); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\n * @note `range(0, 10, 2) | WRITE(); // [0, 2, 4, 6, 8]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/cppaux#range\n */\ninline std::vector<int> range(int init, int end, int step = 1)\n//[[range]]\n{\n    if (step == 0)\n        throw std::runtime_error(\"step cannot be zero\");\n    std::vector<int> aux;\n    if (step > 0) {\n        for (int i = init; i < end; i += step) {\n            aux.push_back(i);\n        }\n    } else {\n        for (int i = init; i > end; i += step) {\n            aux.push_back(i);\n        }\n    }\n    return aux;\n}\n\n//__guide range1\n/**\n * @note #### `range(int end) -> vector<int>`\n * \n * @note - Gera um vetor de inteiros de 0 at\u00e9 end, mas n\u00e3o incluindo end, com passo 1.\n * \n * @note #### Par\u00e2metros\n * @note `param: end` limite superior.\n * @note `return` vetor de inteiros.\n * \n * @note #### Exemplos\n * @note `range(10) | WRITE(); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/cppaux#range\n */\ninline std::vector<int> range(int end) {\n    return range(0, end, 1);\n}\n\nstruct RANGE {\n    RANGE() : init(0), step(1) {};\n\n    std::vector<int> operator()(int end) const {\n        return range(init, end, step);\n    }\n\n    friend std::vector<int> operator|(int end, const RANGE& obj) {\n        return obj(end);\n    }\n\n    int init {0};\n    int end {0};\n    int step {0};\n};\n\n//--------------------------------------------------------\n//-------------------- ENUMERATE -------------------------\n//--------------------------------------------------------\n\n//__guide enumerate\n//[[enumerate]]\n/**\n * @note #### `enumerate(CONTAINER<T> container) -> vector<pair<int, T>>`\n * @note #### `CONTAINER<T> container|ENUMERATE()-> vector<pair<int, T>>`\n * \n * @note - Retorna um vetor de pares com os indices seguidos dos elementos originais do vetor.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` Container a ser enumerado.\n * @note `return` Vector com os pares.\n * \n * @note #### Exemplos\n * @note `vector<int> vet {1, 2, 3};`\n * @note `enumerate(vet) | WRITE(); // [(0, 1), (1, 2), (2, 3)]`\n * @note `vet|ENUMERATE()| WRITE(); // [(0, 1), (1, 2), (2, 3)]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/cppaux#enumerate\n */\ntemplate<typename CONTAINER>\nauto enumerate(const CONTAINER& container)\n//[[enumerate]]\n{\n    auto fn = [](auto x) {return x;}; \n    std::vector<std::pair<int, decltype(fn(*container.begin()))>> aux;\n    int i = 0;\n    for (const auto& item : container) {\n        aux.push_back(std::make_pair(i, item));\n        i++;\n    }\n    return aux;\n}\n\nstruct ENUMERATE {\n//__guide enumerate\n/**\n * @note #### `enumerate(CONTAINER<T> container) -> vector<pair<int, T>>`\n * @note #### `CONTAINER<T> container|ENUMERATE()-> vector<pair<int, T>>`\n * \n * @note - Retorna um vetor de pares com os indices seguidos dos elementos originais do vetor.\n * \n * @note #### Par\u00e2metros\n * @note `param: container` Container a ser enumerado.\n * @note `return` Vector com os pares.\n * \n * @note #### Exemplos\n * @note `vector<int> vet {1, 2, 3};`\n * @note `enumerate(vet) | WRITE(); // [(0, 1), (1, 2), (2, 3)]`\n * @note `vet|ENUMERATE()| WRITE(); // [(0, 1), (1, 2), (2, 3)]`\n * \n * @note #### Veja  mais exemplos em https://github.com/senapk/cppaux#enumerate\n */\n    ENUMERATE() {};\n    template<typename CONTAINER> auto operator()(const CONTAINER& container) const { return enumerate(container); }\n    template<typename CONTAINER> friend auto operator|(const CONTAINER& container, const ENUMERATE& obj) { return obj(container); }\n};\n\n\n\n//--------------------------------------------------------\n//-------------------- STRTO -----------------------------\n//--------------------------------------------------------\n\n//__guide strto\n//[[strto]]\n/**\n * @note #### `strto<READABLE>(str value) -> READABLE`\n * @note #### `str value|STRTO<READABLE>()-> READABLE`\n * \n * @note - Transforma de string para o tipo solicitado utilizando o operador de extra\u00e7\u00e3o de stream.\n * @note - Dispara uma exce\u00e7\u00e3o caso a convers\u00e3o n\u00e3o seja poss\u00edvel.\n * \n * @note #### Par\u00e2metros\n * @note `param: READABLE` Tipo a ser convertido.\n * @note `param: value` String a ser convertida.\n * @note `return` Valor convertido.\n * @note `throws: std::runtime_error` Caso a convers\u00e3o n\u00e3o seja poss\u00edvel.\n * \n * @note #### Exemplos\n * @note `strto<int>(\"1\") | WRITE(); // 1`\n * @note `strto<double>(\"1.2\") | WRITE(); // 1.2`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/cppaux#strto\n * \n*/\ntemplate <typename READABLE>\nREADABLE strto(std::string value)\n//[[strto]]\n{\n    std::istringstream iss(value);\n    READABLE aux;\n    if (iss >> aux) {\n        return aux;\n    }\n    throw std::runtime_error(\"strto: invalid conversion from \" + value);\n}\n\ntemplate <typename READABLE>\nstruct STRTO {\n//__guide strto\n/**\n * @note #### `strto<READABLE>(str value) -> READABLE`\n * @note #### `str value|STRTO<READABLE>()-> READABLE`\n * \n * @note - Transforma de string para o tipo solicitado utilizando o operador de extra\u00e7\u00e3o de stream.\n * @note - Dispara uma exce\u00e7\u00e3o caso a convers\u00e3o n\u00e3o seja poss\u00edvel.\n * \n * @note #### Par\u00e2metros\n * @note `param: READABLE` Tipo a ser convertido.\n * @note `param: value` String a ser convertida.\n * @note `return` Valor convertido.\n * @note `throws: std::runtime_error` Caso a convers\u00e3o n\u00e3o seja poss\u00edvel.\n * \n * @note #### Exemplos\n * @note `strto<int>(\"1\") | WRITE(); // 1`\n * @note `strto<double>(\"1.2\") | WRITE(); // 1.2`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/cppaux#strto\n * \n*/\n    STRTO(){};\n    READABLE operator()(std::string value) const { return strto<READABLE>(value); }\n    friend READABLE operator|(std::string value, const STRTO& obj) { return obj(value); }\n};\n\n//--------------------------------------------------------\n//-------------------- NUMBER ----------------------------\n//--------------------------------------------------------\n\n//__guide number\n//[[number]]\n/**\n * @note #### `number(str value) -> double`\n * \n * @note - Transforma de string para double utilizando a fun\u00e7\u00e3o strto.\n * \n * @note #### Par\u00e2metros\n * @note `param: value` String a ser convertida.\n * @note `return` Valor convertido para double.\n * @note `throws: std::runtime_error` Caso a convers\u00e3o n\u00e3o seja poss\u00edvel.\n * \n * @note #### Exemplos\n * @note `number(\"1.23\") | WRITE(); // 1.23`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/cppaux#number\n * \n*/\ninline double number(std::string value)\n//[[number]]\n{\n    return strto<double>(value);\n}\n\nstruct NUMBER {\n//__guide number\n/**\n * @note #### `number(str value) -> double`\n * \n * @note - Transforma de string para double utilizando a fun\u00e7\u00e3o strto.\n * \n * @note #### Par\u00e2metros\n * @note `param: value` String a ser convertida.\n * @note `return` Valor convertido para double.\n * @note `throws: std::runtime_error` Caso a convers\u00e3o n\u00e3o seja poss\u00edvel.\n * \n * @note #### Exemplos\n * @note `number(\"1.23\") | WRITE(); // 1.23`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/cppaux#number\n * \n*/\n    NUMBER(){}\n    double operator()(std::string value) const { return number(value); }\n    friend double operator|(std::string value, const NUMBER& obj) { return obj(value); }\n};\n\n//--------------------------------------------------------\n//-------------------- UNPACK -----------------------------\n//--------------------------------------------------------\n\ntemplate <typename... Types>\nstruct UNPACK {\n    char delimiter;\n\n//__guide unpack\n/**\n * @note #### `unpack<...TS>(str value, char delimiter) -> tuple<TS...>`\n * @note #### `str value| UNPACK<...TS>(char delimiter) -> tuple<TS...>`\n * \n * @note - Transforma de string para tupla dados os tipos de cada elemento e o char separador.\n * \n * @note #### Par\u00e2metros\n * @note `param: TS...` Tipos a serem extra\u00eddos.\n * @note `param: value` String a ser convertida.\n * @note `param: delimiter` Caractere separador entre os elementos.\n * @note `return` Tupla com os elementos convertidos.\n * \n * @note #### Exemplos\n * @note unpack<int, double, std::string>(\"1:2.4:uva\", ':') | WRITE(); // (1, 2.4, \"uva\") \n * @note \"1:2.4:uva\"| UNPACK<int, double, std::string>(':') | WRITE(); // (1, 2.4, \"uva\")\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/cppaux#unpack\n * \n */\n    UNPACK(char delimiter) : delimiter(delimiter) {}\n\n    template<typename Head, typename... Tail>\n    std::tuple<Head, Tail...> tuple_read_impl(std::istream& is, char delimiter) const {\n        Head val;\n        std::string token;\n        std::getline(is, token, delimiter);\n        std::stringstream ss_token(token);\n        ss_token >> val;\n        if constexpr (sizeof...(Tail) == 0) // this was the last tuple value\n            return std::tuple{val};\n        else\n            return std::tuple_cat(std::tuple{val}, tuple_read_impl<Tail...>(is, delimiter));\n    }\n\n    std::tuple<Types...> operator()(std::string content) const {\n        std::stringstream ss(content);\n        return tuple_read_impl<Types...>(ss, this->delimiter);\n    }\n    \n    friend std::tuple<Types...> operator|(std::string content, const UNPACK& obj) {\n        return obj(content);\n    }\n};\n\n//__guide unpack\n//[[unpack]]\n/**\n * @note #### `unpack<...TS>(str value, char delimiter) -> tuple<TS...>`\n * @note #### `str value| UNPACK<...TS>(char delimiter) -> tuple<TS...>`\n * \n * @note - Transforma de string para tupla dados os tipos de cada elemento e o char separador.\n * \n * @note #### Par\u00e2metros\n * @note `param: TS...` Tipos a serem extra\u00eddos.\n * @note `param: value` String a ser convertida.\n * @note `param: delimiter` Caractere separador entre os elementos.\n * @note `return` Tupla com os elementos convertidos.\n * \n * @note #### Exemplos\n * @note unpack<int, double, std::string>(\"1:2.4:uva\", ':') | WRITE(); // (1, 2.4, \"uva\") \n * @note \"1:2.4:uva\"| UNPACK<int, double, std::string>(':') | WRITE(); // (1, 2.4, \"uva\")\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/cppaux#unpack\n * \n */\ntemplate <typename... TS>\nstd::tuple<TS...> unpack(const std::string& line, char delimiter)\n//[[unpack]]\n{\n    return UNPACK<TS...>(delimiter)(line);\n}\n\n\n//--------------------------------------------------------\n//-------------------- ZIP   -----------------------------\n//--------------------------------------------------------\n\n//__guide zip\n//[[zip]]\n/**\n * @note #### `zip(CONTAINER_A<T> container_a, CONTAINER_B<K> container_b) -> vector<pair<T, K>>`\n * @note #### `CONTAINER_A<T> container_a| ZIP(CONTAINER_B<K> container_b) -> vector<pair<T, K>>`\n * \n * @note - Une dois containers em um vetor de pares limitado ao menor tamanho dos dois containers.\n * \n * @note #### Par\u00e2metros\n * @note `param: container_a` Primeiro container.\n * @note `param: container_b` Segundo container.\n * @note `return` Vetor de pares.\n * \n * @note #### Exemplos\n * @note `zip(vector<int>{1, 2, 3}, string(\"pterodactilo\")) | WRITE(); //[(1, p), (2, t), (3, e)]`\n * @note `vector<int>{1, 2, 3}| ZIP(string(\"pterodactilo\")) | WRITE(); //[(1, p), (2, t), (3, e)]`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/cppaux#zip\n */\ntemplate<typename CONTAINER_A, typename CONTAINER_B>\nauto zip(const CONTAINER_A& A, const CONTAINER_B& B)\n//[[zip]]\n{\n    auto fn = [](auto x) { return x; };\n    using type_a = decltype(fn(*A.begin()));\n    using type_b = decltype(fn(*B.begin()));\n    std::vector<std::pair<type_a, type_b>> aux;\n\n    auto ita = A.begin();\n    auto itb = B.begin();\n    while(ita != A.end() &&  itb != B.end()) {\n        aux.push_back({*ita, *itb});\n        ita++;\n        itb++;\n    }\n    return aux;\n};\n\ntemplate <typename CONTAINER_B>\nstruct ZIP {\n    CONTAINER_B container_b;\n\n//__guide zip\n/**\n * @note #### `zip(CONTAINER_A<T> container_a, CONTAINER_B<K> container_b) -> vector<pair<T, K>>`\n * @note #### `CONTAINER_A<T> container_a| ZIP(CONTAINER_B<K> container_b) -> vector<pair<T, K>>`\n * \n * @note - Une dois containers em um vetor de pares limitado ao menor tamanho dos dois containers.\n * \n * @note #### Par\u00e2metros\n * @note `param: container_a` Primeiro container.\n * @note `param: container_b` Segundo container.\n * @note `return` Vetor de pares.\n * \n * @note #### Exemplos\n * @note `zip(vector<int>{1, 2, 3}, string(\"pterodactilo\")) | WRITE(); //[(1, p), (2, t), (3, e)]`\n * @note `vector<int>{1, 2, 3}| ZIP(string(\"pterodactilo\")) | WRITE(); //[(1, p), (2, t), (3, e)]`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/cppaux#zip\n */\n    ZIP(const CONTAINER_B& container_b) : container_b(container_b) {}\n\n    template<typename CONTAINER_A>\n    auto operator()(const CONTAINER_A& container_a) const { return zip(container_a, container_b); }\n    template<typename CONTAINER_A>\n    friend auto operator|(const CONTAINER_A& container_a, const ZIP& obj) { return obj(container_a); }\n};\n\n//--------------------------------------------------------\n//-------------------- ZIPWITH ---------------------------\n//--------------------------------------------------------\n\n//__guide zipwith\n//[[zipwith]]\n/**\n * @note #### `zipwith(CONTAINER<T> container_a, CONTAINER<K> container_b, FUNCTION fnjoin) -> vector<fnjoin(T, K)>`\n * @note #### `CONTAINER<T> container_a| ZIPWITH(CONTAINER<K> container_b, FUNCTION fnjoin) -> vector<fnjoin(T, K)>`\n * \n * @note - Une dois containers atrav\u00e9s da aplica\u00e7\u00e3o da fun\u00e7\u00e3o fnjoin em cada par limitado ao menor tamanho dos dois containers.\n * \n * @note #### Par\u00e2metros\n * @note `param: container_a` Primeiro container.\n * @note `param: container_b` Segundo container.\n * @note `param: fnjoin` Fun\u00e7\u00e3o a ser aplicada em cada par.\n * @note `return` Vetor com os resultados.\n * \n * @note #### Exemplos\n * @note `auto concat = [](auto x, auto y) { return tostr(x) + y; };`\n * @note `zipwith(vector<int>{1, 2, 3}, string(\"pterodactilo\"), concat) | WRITE(); // [\"1p\", \"2t\", \"3e\"]`\n * @note `zipwith(range(10), \"pterodactilo\"s, concat) | WRITE(); // [\"0p\", \"1t\", \"2e\", \"3r\", \"4o\", \"5d\", \"6a\", \"7c\", \"8t\", \"9i\"]`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/cppaux#zipwith\n * \n */\ntemplate<typename CONTAINER_A, typename CONTAINER_B, typename FNJOIN>\nauto zipwith(const CONTAINER_A& A, const CONTAINER_B& B, FNJOIN fnjoin)\n//[[zipwith]]\n{\n    auto idcopy = [](auto x) { return x; };\n    using type_out = decltype( fnjoin( idcopy(*A.begin()), idcopy(*B.begin()) ));\n    std::vector<type_out> aux;\n\n    auto ita = A.begin();\n    auto itb = B.begin();\n    while(ita != A.end() &&  itb != B.end()) {\n        aux.push_back(fnjoin(*ita, *itb));\n        ita++;\n        itb++;\n    }\n    return aux;\n};\n\n\ntemplate<typename CONTAINER_B, typename FNJOIN>\nstruct ZIPWITH {\n    CONTAINER_B container_b;\n    FNJOIN fnjoin;\n\n//__guide zipwith\n/**\n * @note #### `zipwith(CONTAINER<T> container_a, CONTAINER<K> container_b, FUNCTION fnjoin) -> vector<fnjoin(T, K)>`\n * @note #### `CONTAINER<T> container_a| ZIPWITH(CONTAINER<K> container_b, FUNCTION fnjoin) -> vector<fnjoin(T, K)>`\n * \n * @note - Une dois containers atrav\u00e9s da aplica\u00e7\u00e3o da fun\u00e7\u00e3o fnjoin em cada par limitado ao menor tamanho dos dois containers.\n * \n * @note #### Par\u00e2metros\n * @note `param: container_a` Primeiro container.\n * @note `param: container_b` Segundo container.\n * @note `param: fnjoin` Fun\u00e7\u00e3o a ser aplicada em cada par.\n * @note `return` Vetor com os resultados.\n * \n * @note #### Exemplos\n * @note `auto concat = [](auto x, auto y) { return tostr(x) + y; };`\n * @note `zipwith(vector<int>{1, 2, 3}, string(\"pterodactilo\"), concat) | WRITE(); // [\"1p\", \"2t\", \"3e\"]`\n * @note `zipwith(range(10), \"pterodactilo\"s, concat) | WRITE(); // [\"0p\", \"1t\", \"2e\", \"3r\", \"4o\", \"5d\", \"6a\", \"7c\", \"8t\", \"9i\"]`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/cppaux#zipwith\n * \n */\n    ZIPWITH(const CONTAINER_B& container_b, FNJOIN fnjoin) : container_b(container_b), fnjoin(fnjoin) {}\n\n    template<typename CONTAINER_A>        auto operator()(const CONTAINER_A& container_a) const { return zipwith(container_a, container_b, fnjoin); }\n    template<typename CONTAINER_A> friend auto operator| (const CONTAINER_A& container_a, const ZIPWITH& obj) { return obj(container_a); }\n};\n\n//--------------------------------------------------------\n//-------------------- SPLIT -----------------------------\n//--------------------------------------------------------\n\n//__guide split\n//[[split]]\n/**\n * @note #### `split(str content, char delimiter = ' ') -> vector<str>`\n * @note #### `str content| SPLIT(char delimiter = ' ') -> vector<str>`\n * \n * @note - Transforma uma string em um vetor de strings, separando pelo delimitador.\n * \n * @note #### Par\u00e2metros\n * @note `param: content` String a ser separada.\n * @note `param: delimiter` (opcional) Caractere delimitador.\n * @note `return` Vetor de strings.\n *\n * @note #### Exemplos\n * @note `split(\"a,b,c\", ',') | WRITE(); // [a, b, c]`\n * @note `\"a,b,c\"| SPLIT(',') | WRITE(); // [a, b, c]`\n * @note `split(\"a b c\") | WRITE(); // [a, b, c]`\n * @note `\"a b c\"|SPLIT()| WRITE(); // [a, b, c]`\n *  \n * @note #### Veja mais exemplos em https://github.com/senapk/cppaux#split\n */\ninline std::vector<std::string> split(std::string content, char delimiter = ' ')\n//[[split]]\n{\n    std::vector<std::string> aux;\n    std::string token;\n    std::istringstream tokenStream(content);\n    while (std::getline(tokenStream, token, delimiter))\n        aux.push_back(token);\n    return aux;\n}\n\nstruct SPLIT {\n    char delimiter;\n\n//__guide split\n/**\n * @note #### `split(str content, char delimiter = ' ') -> vector<str>`\n * @note #### `str content| SPLIT(char delimiter = ' ') -> vector<str>`\n * \n * @note - Transforma uma string em um vetor de strings, separando pelo delimitador.\n * \n * @note #### Par\u00e2metros\n * @note `param: content` String a ser separada.\n * @note `param: delimiter` (opcional) Caractere delimitador.\n * @note `return` Vetor de strings.\n *\n * @note #### Exemplos\n * @note `split(\"a,b,c\", ',') | WRITE(); // [a, b, c]`\n * @note `\"a,b,c\"| SPLIT(',') | WRITE(); // [a, b, c]`\n * @note `split(\"a b c\") | WRITE(); // [a, b, c]`\n * @note `\"a b c\"|SPLIT()| WRITE(); // [a, b, c]`\n *  \n * @note #### Veja mais exemplos em https://github.com/senapk/cppaux#split\n */\n    SPLIT(char delimiter = ' ') : delimiter(delimiter) {}\n\n    std::vector<std::string>        operator()(std::string content) const { return split(content, delimiter); }\n    friend std::vector<std::string> operator| (std::string content, const SPLIT& obj) { return obj(content); }\n};\n\n//--------------------------------------------------------\n//-------------------- INPUT -----------------------------\n//--------------------------------------------------------\n\n//__guide input\n//[[input]]\n/**\n * @note #### `input(istream source = std::cin) -> str`\n * \n * @note - Extrai uma linha inteira e retorna como string.\n * @note - O padr\u00e3o \u00e9 o std::cin, mas pode ser um fluxo ou arquivo.\n * @note - Se n\u00e3o houver mais linhas, lan\u00e7a uma exce\u00e7\u00e3o.\n * \n * @note #### Par\u00e2metros\n * @note `param: source` Origem da linha.\n * @note `return` Linha lida.\n * @note `throws: std::runtime_error` Caso n\u00e3o haja mais linhas.\n * \n * @note #### Exemplos\n * @note `auto line = input();`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/cppaux#input\n */\ninline std::string input(std::istream & is = std::cin)\n//[[input]]\n{\n    std::string line;\n    if (std::getline(is, line))\n        return line;\n    throw std::runtime_error(\"input empty\");\n}\n\nstruct INPUT {\n//__guide input\n/**\n * @note #### `input(istream source = std::cin) -> str`\n * \n * @note - Extrai uma linha inteira e retorna como string.\n * @note - O padr\u00e3o \u00e9 o std::cin, mas pode ser um fluxo ou arquivo.\n * @note - Se n\u00e3o houver mais linhas, lan\u00e7a uma exce\u00e7\u00e3o.\n * \n * @note #### Par\u00e2metros\n * @note `param: source` Origem da linha.\n * @note `return` Linha lida.\n * @note `throws: std::runtime_error` Caso n\u00e3o haja mais linhas.\n * \n * @note #### Exemplos\n * @note `auto line = input();`\n * \n * @note #### Veja mais exemplos em https://github.com/senapk/cppaux#input\n */\n    INPUT() {}\n\n    std::string        operator()(std::istream& is = std::cin) const { return input(is); }\n    friend std::string operator| (std::istream& is, const INPUT& obj) { return obj(is); }\n};\n\n} // namespace fn\n\nusing namespace std::string_literals;\n\n//__guide operator+\n/**\n * @note #### `+str -> double`\n * \n * @note - Transforma de string para double utilizando a fun\u00e7\u00e3o number.\n * \n * @note #### Par\u00e2metros\n * @note `param: str` String a ser convertida.\n * @note `return` Valor convertido para double.\n * \n * @note #### Exemplos\n * @note `+\"1.23\"s | WRITE(); // 1.23`\n * \n*/\ninline double operator+(std::string text) {\n    return fn::number(text);\n}\n",
                "encoding": 0
            },
            {
                "name": "shell.cpp",
                "contents": "#include \"fn.hpp\" // https://raw.githubusercontent.com/senapk/cppaux/master/fn.hpp\n#include <algorithm>\n\n\nint main() {\n    Agenda agenda;\n    while(true) {\n        auto line = fn::input();\n        fn::write(\"$\" + line);\n        auto args = fn::split(line, ' ');\n        if(args[0] == \"end\") {\n            break;\n        }\n        else if(args[0] == \"add\") {//name id:fone id:fone ...\n            std::vector<Fone> fones;\n            for (int i = 2; i < (int) args.size(); i++) {\n                auto parts = fn::split(args[i], ':');\n                fones.push_back(Fone(parts[0], parts[1]));\n            }\n            agenda.addContato(args[1], fones);\n        }\n        else if(args[0] == \"show\") {\n            fn::write(agenda);\n        }\n        else if(args[0]== \"rmFone\") {//id index\n            Contact * contato = agenda.getContact(args[1]);\n            if(contato != nullptr)\n                contato->rmFone((int) +args[2]);\n        }\n        else if(args[0] == \"rm\") {//id\n            agenda.rmContact(args[1]);\n        }\n        else if(args[0] == \"tfav\") {//id 1 ou 0\n            Contact * contato = agenda.getContact(args[1]);\n            if(contato != nullptr)\n                contato->toogleFavorited();\n        }\n        else if(args[0] == \"favs\") {\n            agenda.getFavorited() | fn::JOIN(\"\\n\") | fn::WRITE();\n        }\n        else if(args[0] == \"search\") {//pattern\n            agenda.search(args[1]) | fn::JOIN(\"\\n\") | fn::WRITE();\n        }\n        else{\n            fn::write(\"fail: comando invalido\");\n        }\n    }\n}\n",
                "encoding": 0
            }
        ]
    }
}
