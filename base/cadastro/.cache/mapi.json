{
    "title": "@cadastro: Crie as contas poupan\u00e7a e corrente",
    "description": "# Crie as contas poupan\u00e7a e corrente\n\n<!-- toch -->\n[V\u00eddeo](#v\u00eddeo) | [Intro](#intro) | [Draft](#draft) | [Guide](#guide) | [Shell](#shell)\n-- | -- | -- | -- | --\n<!-- toch -->\n\n![cover](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/cadastro/cover.jpg)\n\nO objetivo dessa atividade \u00e9 implementar uma ag\u00eancia banc\u00e1ria simplificada. Deve ser capaz de cadastrar cliente. Cada cliente inicia com uma conta poupan\u00e7a e uma conta corrente. Contas correntes tem taxa de administra\u00e7\u00e3o e contas poupan\u00e7as rendem juros.\n\n## V\u00eddeo\n\n[![_](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/cadastro/video.png)](https://youtu.be/AfJ--C8ZqPY)\n\n## Intro\n\n- Cadastrar um cliente com idCliente \u00fanico\n  - Quando o cliente \u00e9 cadastrado no sistema, automaticamente \u00e9 aberta uma conta corrente e uma conta poupan\u00e7a para ele.\n- Mensalmente:\n  - Contas corrente v\u00e3o receber uma tarifa de **20 reais** podendo inclusive ficar negativas.\n  - Contas poupan\u00e7a v\u00e3o aumentar de 1 porcento.\n- Sua ag\u00eancia deve ter um mapa de clientes e um mapa de contas.\n- O cliente s\u00f3 tem duas contas, mas imagine que no futuro ele poder\u00e1 ter v\u00e1rias.\n- As contas devem ser tratadas utilizando polimorfismo.\n\n## Draft\n\n[draft.ts](https://github.com/qxcodepoo/arcade/blob/master/base/cadastro/.cache/draft.ts)\n\n## Guide\n\n![diagrama](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/cadastro/diagrama.png)\n\n<!-- load diagrama.puml fenced=ts:filter -->\n\n```ts\n\n@startuml\n\nskinparam defaultFontName \"Source Code Pro\"\nskinparam dpi 150\n\n\n\nclass Account {\n    # balance: double\n    # accId: int\n    # clientId: str\n\n    ' typeId {CC, CP}\n    # typeId: str\n    --\n    ' inicializa os atributos\n    ' saldo inicial \u00e9 0\n    + Account(accId: int, clientId: str, typeId: str)\n\n    ' realiza o dep\u00f3sito\n    + deposit(value: double)\n\n    ' realiza o saque\n    ' verifique se h\u00e1 saldo suficiente\n    + withdraw(value: double)\n\n    ' realiza a transfer\u00eancia da conta this para conta other\n    ' verifique se h\u00e1 saldo suficiente na conta this\n    + transfer(other: Account, value: double)\n\n    ' retorna as informa\u00e7\u00f5es na conta no formato\n    ' \"accId:clientId:balance:typeId\"\n    + toString(): str\n    --\n\n    ' retorna o saldo\n    + getBalance(): double\n\n    ' retorna o id\n    + getId(): int\n\n    ' retorna o id do cliente\n    + getClientId(): str\n\n    ' retorna o tipo da conta\n    + getTypeId(): str\n    --\n    \n    ' m\u00e9todo abstrato que realiza a atualiza\u00e7\u00e3o mensal da conta\n    ' o m\u00e9todo deve ser implementado nas subclasses\n    + {static} updateMonthly(): void\n}\n\nclass CheckingAccount {\n    ' taxa de manuten\u00e7\u00e3o da conta\n    # monthlyFee: double\n    --\n    ' chama o construtor da superclasse\n    ' repassando os valores accId, clientId e typeId = CC\n    + CheckingAccount(accId: int, clientId: str)\n\n    ' decrementa o saldo da conta em monthlyFee\n    + updateMonthly(): void\n}\n\nclass SavingsAccount {\n    ' taxa de rendimento mensal\n    # monthlyInterest: double\n\n    --\n    ' chama o construtor da superclasse\n    ' repassando os valores accId, clientId e typeId = CP\n    + SavingsAccount(accId: int, clientId: str)\n\n    ' incrementa o saldo da conta em monthlyInterest %\n    + updateMonthly(): void  \n}\n\nclass Client {\n    # clientId: str\n    # accounts: list[Account]\n    --\n    + Client(name: str, clientId: str)\n\n    ' adiciona uma conta \u00e0 lista de contas do cliente\n    + addAccount(acc: Account)\n\n    ' retorna a lista de contas do cliente\n    + getAccounts(): list[Account]\n\n    ' retorna o id do cliente\n    + getClientId(): str\n\n    ' retorna o nome do cliente e a lista com os ids das contas no formato\n    ' nome [id1, id2, ...]\n    + toString(): str\n}\n\nclass Agency {\n    - accounts: Map<int, Account>\n    - clients : Map<str, Client>\n    - nextAccountId: int\n    --\n\n    ' busca pela conta e dispara excess\u00e3o se n\u00e3o encontrar\n    - getAccount(int accountId): Account\n    --\n    ' inicializa os atributos\n    + BankAgency()\n\n    ' cria uma conta para o cliente\n    ' cria um objeto cliente e insere no mapa de clientes\n    ' cria uma conta corrente e uma conta polpan\u00e7a e insere no mapa de contas\n    ' faz o v\u00ednculo cruzado colocando as contas dentro do objeto do cliente\n    + addClient(clientId: str): void\n\n    ' procura pela conta usando o getAccount e realiza a opera\u00e7\u00e3o de dep\u00f3sito\n    ' utiliza o m\u00e9todo deposit da classe Account\n    + deposit(accId: int, value: double): void\n\n    ' procura pela conta e realiza a opera\u00e7\u00e3o de saque\n    ' utiliza o m\u00e9todo withdraw da classe Account\n    + withdraw(accId: int, value: double): void\n\n    ' procura pela conta e realiza a opera\u00e7\u00e3o de transfer\u00eancia\n    ' utiliza o m\u00e9todo transfer da classe Account\n    + transfer(fromAccId: int, toAccId: int, value: double): void\n\n    ' realiza a opera\u00e7\u00e3o de atualiza\u00e7\u00e3o mensal em todas as contas\n    + updateMonthly(): void\n}\n\n\nCheckingAccount --|> Account\nSavingsAccount --|> Account\n\nClient \"1\" o-- \"1\" CheckingAccount\nClient \"1\" o-- \"1\" SavingsAccount\n\nAgency \"1\" *-- \"0..*\" Account\n\nAgency \"1\" *--l- \"0..*\" Client\n\n\n' Circle --|> Shape\n' Rectangle --|> Shape\n' V2D  --  Circle\n' V2D  --  Rectangle\n@enduml\n\n```\n\n<!-- load -->\n\n## Shell\n\n```bash\n#TEST_CASE first clients\n# addCli _idCliente\n# adiciona um cliente na lista de clientes.\n# cria uma conta poupan\u00e7a e uma conta corrente para cada cliente usando numera\u00e7\u00e3o de forma sequencial.\n$addCli Almir\n$addCli Julia\n$addCli Maria\n\n# show mostra as contas do banco, com id:usuario:saldo:tipo\n# em tipo use CC para conta corrente e CP para conta poupan\u00e7a.\n$show\n- Clients\nAlmir [0, 1]\nJulia [2, 3]\nMaria [4, 5]\n- Accounts\n0:Almir:0.00:CC\n1:Almir:0.00:CP\n2:Julia:0.00:CC\n3:Julia:0.00:CP\n4:Maria:0.00:CC\n5:Maria:0.00:CP\n\n######################################\n#TEST_CASE opera\u00e7\u00f5es b\u00e1sicas\n#fa\u00e7a as opera\u00e7\u00f5es b\u00e1sicas de saque, dep\u00f3sito e transfer\u00eancia entre contas\n#verifique se as contas existem antes de efetuar as opera\u00e7\u00f5es\n# $saque _conta _value\n# para sacar verifique o saldo\n#\n# $deposito _conta _value\n#\n# $transf _contaDe _contaPara _value\n\n$deposito 0 100\n$deposito 1 200\n$deposito 2 50\n$deposito 3 300\n$saque 3 50\n$saque 0 70\n$saque 1 300\nfail: saldo insuficiente\n\n$show\n- Clients\nAlmir [0, 1]\nJulia [2, 3]\nMaria [4, 5]\n- Accounts\n0:Almir:30.00:CC\n1:Almir:200.00:CP\n2:Julia:50.00:CC\n3:Julia:250.00:CP\n4:Maria:0.00:CC\n5:Maria:0.00:CP\n\n$transf 3 5 200\n$transf 0 4 25\n$transf 9 1 30\nfail: conta nao encontrada\n$transf 2 8 10\nfail: conta nao encontrada\n\n$show\n- Clients\nAlmir [0, 1]\nJulia [2, 3]\nMaria [4, 5]\n- Accounts\n0:Almir:5.00:CC\n1:Almir:200.00:CP\n2:Julia:50.00:CC\n3:Julia:50.00:CP\n4:Maria:25.00:CC\n5:Maria:200.00:CP\n\n#TEST_CASE update mensal\n# No comando update todas as contas ser\u00e3o atualizadas.\n# Contas corrente v\u00e3o receber uma tarifa de 20 reais podendo inclusive ficar negativas.\n# Contas poupan\u00e7a v\u00e3o aumentar de 1 porcento.\n$update\n\n$show\n- Clients\nAlmir [0, 1]\nJulia [2, 3]\nMaria [4, 5]\n- Accounts\n0:Almir:-15.00:CC\n1:Almir:202.00:CP\n2:Julia:30.00:CC\n3:Julia:50.50:CP\n4:Maria:5.00:CC\n5:Maria:202.00:CP\n\n$end\n\n```\n\n***\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT first clients\naddCli Almir\naddCli Julia\naddCli Maria\nshow\nend\n======== EXPECT\n$addCli Almir\n$addCli Julia\n$addCli Maria\n$show\n- Clients\nAlmir [0, 1]\nJulia [2, 3]\nMaria [4, 5]\n- Accounts\n0:Almir:0.00:CC\n1:Almir:0.00:CP\n2:Julia:0.00:CC\n3:Julia:0.00:CP\n4:Maria:0.00:CC\n5:Maria:0.00:CP\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT opera\u00e7\u00f5es b\u00e1sicas\naddCli Almir\naddCli Julia\naddCli Maria\nshow\ndeposito 0 100\ndeposito 1 200\ndeposito 2 50\ndeposito 3 300\nsaque 3 50\nsaque 0 70\nsaque 1 300\nshow\ntransf 3 5 200\ntransf 0 4 25\ntransf 9 1 30\ntransf 2 8 10\nshow\nend\n======== EXPECT\n$addCli Almir\n$addCli Julia\n$addCli Maria\n$show\n- Clients\nAlmir [0, 1]\nJulia [2, 3]\nMaria [4, 5]\n- Accounts\n0:Almir:0.00:CC\n1:Almir:0.00:CP\n2:Julia:0.00:CC\n3:Julia:0.00:CP\n4:Maria:0.00:CC\n5:Maria:0.00:CP\n$deposito 0 100\n$deposito 1 200\n$deposito 2 50\n$deposito 3 300\n$saque 3 50\n$saque 0 70\n$saque 1 300\nfail: saldo insuficiente\n$show\n- Clients\nAlmir [0, 1]\nJulia [2, 3]\nMaria [4, 5]\n- Accounts\n0:Almir:30.00:CC\n1:Almir:200.00:CP\n2:Julia:50.00:CC\n3:Julia:250.00:CP\n4:Maria:0.00:CC\n5:Maria:0.00:CP\n$transf 3 5 200\n$transf 0 4 25\n$transf 9 1 30\nfail: conta nao encontrada\n$transf 2 8 10\nfail: conta nao encontrada\n$show\n- Clients\nAlmir [0, 1]\nJulia [2, 3]\nMaria [4, 5]\n- Accounts\n0:Almir:5.00:CC\n1:Almir:200.00:CP\n2:Julia:50.00:CC\n3:Julia:50.00:CP\n4:Maria:25.00:CC\n5:Maria:200.00:CP\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT update mensal\naddCli Almir\naddCli Julia\naddCli Maria\nshow\ndeposito 0 100\ndeposito 1 200\ndeposito 2 50\ndeposito 3 300\nsaque 3 50\nsaque 0 70\nsaque 1 300\nshow\ntransf 3 5 200\ntransf 0 4 25\ntransf 9 1 30\ntransf 2 8 10\nshow\nupdate\nshow\nend\n======== EXPECT\n$addCli Almir\n$addCli Julia\n$addCli Maria\n$show\n- Clients\nAlmir [0, 1]\nJulia [2, 3]\nMaria [4, 5]\n- Accounts\n0:Almir:0.00:CC\n1:Almir:0.00:CP\n2:Julia:0.00:CC\n3:Julia:0.00:CP\n4:Maria:0.00:CC\n5:Maria:0.00:CP\n$deposito 0 100\n$deposito 1 200\n$deposito 2 50\n$deposito 3 300\n$saque 3 50\n$saque 0 70\n$saque 1 300\nfail: saldo insuficiente\n$show\n- Clients\nAlmir [0, 1]\nJulia [2, 3]\nMaria [4, 5]\n- Accounts\n0:Almir:30.00:CC\n1:Almir:200.00:CP\n2:Julia:50.00:CC\n3:Julia:250.00:CP\n4:Maria:0.00:CC\n5:Maria:0.00:CP\n$transf 3 5 200\n$transf 0 4 25\n$transf 9 1 30\nfail: conta nao encontrada\n$transf 2 8 10\nfail: conta nao encontrada\n$show\n- Clients\nAlmir [0, 1]\nJulia [2, 3]\nMaria [4, 5]\n- Accounts\n0:Almir:5.00:CC\n1:Almir:200.00:CP\n2:Julia:50.00:CC\n3:Julia:50.00:CP\n4:Maria:25.00:CC\n5:Maria:200.00:CP\n$update\n$show\n- Clients\nAlmir [0, 1]\nJulia [2, 3]\nMaria [4, 5]\n- Accounts\n0:Almir:-15.00:CC\n1:Almir:202.00:CP\n2:Julia:30.00:CC\n3:Julia:50.50:CP\n4:Maria:5.00:CC\n5:Maria:202.00:CP\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\n\nfunction main(): void {\n    while (true) {\n        try {\n            const line = input();\n            const args = line.split(\" \");\n            console.log(\"$\" + line);\n\n            if (line === \"end\") {\n                break;\n            } else if (args[0] === \"show\") {\n            } else if (args[0] === \"addCli\") {\n                // const clientId = args[1];\n            } else if (args[0] === \"saque\") {\n                // const idConta = +args[1];\n                // const value = +args[2];\n            } else if (args[0] === \"deposito\") {\n                // const idConta = +args[1];\n                // const value = +args[2];\n            } else if (args[0] === \"transf\") {\n                // const idContaDe = +args[1];\n                // const idContaPara = +args[2];\n                // const value = +args[3];\n            } else if (args[0] === \"update\") {\n            } else {\n                console.log(\"fail: comando invalido\");\n            }\n        } catch (e) {\n            console.log(e.message);\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.*;\nimport java.util.stream.Collectors;\n\npublic class Shell {\n    public static void main(String[] s) {\n        while(true){\n            try {\n                var line = scanner.nextLine();\n                var args = line.split(\" \");\n                var cmd = args[0];\n                System.out.println(\"$\" + line);\n\n                if(cmd.equals(\"end\")) {\n                    break;\n                }\n                else if(cmd.equals(\"show\")) {\n                }\n                else if(cmd.equals(\"addCli\")) {\n                    // var clientId = args[1];\n                }\n                else if(cmd.equals(\"saque\")) {\n                    // var accountId = Integer.parseInt(args[1]);\n                    // var value = Double.parseDouble(args[2]);\n                }\n                else if(cmd.equals(\"deposito\")) {\n                    // var accountId = Integer.parseInt(args[1]);\n                    // var value = Double.parseDouble(args[2]);\n                }\n                else if(cmd.equals(\"transf\")) {\n                    // var accountIdFrom = Integer.parseInt(args[1]);\n                    // var accountIdTo = Integer.parseInt(args[2]);\n                    // var value = Double.parseDouble(args[3]);\n                }\n                else if(cmd.equals(\"update\")) {\n                }\n                else {\n                    System.out.println(\"fail: comando invalido\");\n                }\n            } catch (Exception e) {\n                System.out.println(e.getMessage());\n            }\n        }\n    }\n    private static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n#include <memory>\n#include <iomanip>\n#include <sstream>\n\nusing namespace std;\n\n\nint main() {\n    string line;\n\n    while (getline(cin, line)) {\n        try {\n            istringstream iss(line);\n            string cmd;\n            iss >> cmd;\n            cout << \"$\" << line << endl;\n\n            if (cmd == \"end\") {\n                break;\n            } else if (cmd == \"show\") {\n            } else if (cmd == \"addCli\") {\n                // string clientId;\n                // iss >> clientId;\n            } else if (cmd == \"saque\") {\n                // int accountId;\n                // double value;\n                // iss >> accountId >> value;\n            } else if (cmd == \"deposito\") {\n                // int accountId;\n                // double value;\n                // iss >> accountId >> value;\n            } else if (cmd == \"transf\") {\n                // int accountIdFrom, accountIdTo;\n                // double value;\n                // iss >> accountIdFrom >> accountIdTo >> value;\n            } else if (cmd == \"update\") {\n            } else {\n                cout << \"fail: comando invalido\" << endl;\n            }\n        } catch (const exception& e) {\n            cout << e.what() << endl;\n        }\n    }\n\n    return 0;\n}\n",
                "type": "show"
            }
        ]
    }
}
