{
    "title": "@carro - Se n\u00e3o pode comprar um, construa",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@carro - Se n\u00e3o pode comprar um, construa</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h1 id=\"carro---se-n\u00e3o-pode-comprar-um-construa\"><span class=\"citation\"\ndata-cites=\"carro\">@carro</span> - Se n\u00e3o pode comprar um, construa</h1>\n<!-- toch -->\n<table style=\"width:100%;\">\n<colgroup>\n<col style=\"width: 16%\" />\n<col style=\"width: 16%\" />\n<col style=\"width: 16%\" />\n<col style=\"width: 16%\" />\n<col style=\"width: 16%\" />\n<col style=\"width: 16%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th><a href=\"#model\">Model</a></th>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#cheat\">Cheat</a></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<!-- toch -->\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/carro/cover.jpg\"\nalt=\"cover\" />\n<figcaption aria-hidden=\"true\">cover</figcaption>\n</figure>\n<h2 id=\"model\">Model</h2>\n<p>Esta atividade utiliza um padr\u00e3o de projeto de requisi\u00e7\u00f5es e\nrespostas.</p>\n<ul>\n<li>Os testes s\u00e3o feitos atrav\u00e9s de requisi\u00e7\u00f5es de texto e podem ser\nvistos na se\u00e7\u00e3o <a href=\"#shell\">Shell</a>.</li>\n<li>A classe <code>Shell</code> \u00e9 respons\u00e1vel por ler as requisi\u00e7\u00f5es de\ntexto, decodificar e chamar os m\u00e9todos da classe\n<code>Adapter</code>.</li>\n<li>Na classe <code>Adapter</code>, voc\u00ea deve implementar e conectar seu\nc\u00f3digo.</li>\n<li>A classe <code>Adapter</code> \u00e9 apenas a classe de conex\u00e3o. Voc\u00ea\ndeve implementar as classes que cont\u00eam a l\u00f3gica do problema. Utilize\ncomo base o diagrama de classes e a descri\u00e7\u00e3o do problema.</li>\n<li>Mensagens de erro podem ser lan\u00e7adas por exce\u00e7\u00f5es ou por comandos de\n<code>print</code> diretamente para o terminal.</li>\n<li>Ao mostrar uma string formatada, ser\u00e1 utilizado o modelo do Python\n<code>f\"{variavel:param}\"</code>.</li>\n<li>Se houver, na se\u00e7\u00e3o <a href=\"#cheat\">Cheat</a>, voc\u00ea pode conferir\nas respostas desta atividade.</li>\n</ul>\n<h2 id=\"intro\">Intro</h2>\n<p>Nesta atividade, vamos implementar um carro ecol\u00f3gico. Ele deve ser\ncapaz de embarcar e desembarcar pessoas, abastecer e andar.</p>\n<ul>\n<li>Descri\u00e7\u00e3o\n<ul>\n<li>O carro deve ser inicializado com o tanque vazio, sem ningu\u00e9m dentro\ne com 0 quil\u00f4metros percorridos. Para simplificar, nosso carro esportivo\nsuporta at\u00e9 2 pessoas e seu tanque suporta at\u00e9 100 litros de\ncombust\u00edvel.</li>\n</ul></li>\n<li>Responsabilidades\n<ul>\n<li>O c\u00f3digo deve ser implementado na classe <code>Carro</code>.</li>\n<li>A classe <code>Adapter</code> \u00e9 respons\u00e1vel por chamar os m\u00e9todos da\nclasse <code>Carro</code>.</li>\n<li>A classe <code>Shell</code> \u00e9 respons\u00e1vel por ler as requisi\u00e7\u00f5es de\ntexto e chamar os m\u00e9todos da classe <code>Adapter</code>.</li>\n</ul></li>\n<li>Comandos\n<ul>\n<li>Todos os comandos seguem o modelo\n<code>$comando arg1 arg2 ...</code>.</li>\n<li><code>$show</code> - Mostra o estado atual do carro.\n<ul>\n<li><code>f\"pass:{this.pass},gas:{this.gas},km:{this.km}\"</code>.</li>\n<li>Exemplo: <code>pass: 0, gas: 0, km: 0</code>.</li>\n</ul></li>\n<li><code>$init</code> - Inicializa todos os atributos.\n<ul>\n<li>Tanque vazio.</li>\n<li>0 passageiros.</li>\n<li>0 quil\u00f4metros percorridos.</li>\n<li>M\u00e1ximo de 2 pessoas.</li>\n<li>M\u00e1ximo de 100 litros de gasolina.</li>\n</ul></li>\n<li><code>$enter</code> - Embarca uma pessoa por vez, mas n\u00e3o al\u00e9m do\nm\u00e1ximo.\n<ul>\n<li>Se o carro estiver lotado, emite a mensagem de erro\n<code>fail: limite de pessoas atingido</code>.</li>\n</ul></li>\n<li><code>$leave</code> - Desembarca uma pessoa por vez.\n<ul>\n<li>Se n\u00e3o houver ningu\u00e9m no carro, emite a mensagem de erro\n<code>fail: nao ha ninguem no carro</code>.</li>\n</ul></li>\n<li><code>$fuel qtd</code> - Abastece o tanque com a quantidade de\nlitros de combust\u00edvel passada.\n<ul>\n<li>Caso tente abastecer acima do limite, descarta o valor\nexcedente.</li>\n</ul></li>\n<li><code>$drive dist</code> - Para dirigir, o carro consome combust\u00edvel\ne aumenta a quilometragem.\n<ul>\n<li>S\u00f3 pode dirigir se houver combust\u00edvel e se houver algu\u00e9m no\ncarro.</li>\n<li>Caso n\u00e3o haja ningu\u00e9m no carro, emite a mensagem de erro \u201cfail: n\u00e3o\nh\u00e1 ningu\u00e9m no carro\u201d.</li>\n<li>Caso n\u00e3o haja combust\u00edvel, emite a mensagem de erro \u201cfail: tanque\nvazio\u201d.</li>\n<li>Caso n\u00e3o exista combust\u00edvel suficiente para completar a viagem\ninteira, dirige o m\u00e1ximo poss\u00edvel e emite uma mensagem indicando quanto\nfoi percorrido, como no exemplo\n<code>fail: tanque vazio ap\u00f3s andar {qtd} km</code>.</li>\n</ul></li>\n</ul></li>\n</ul>\n<h2 id=\"guide\">Guide</h2>\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/carro/diagrama.png\"\nalt=\"diagrama\" />\n<figcaption aria-hidden=\"true\">diagrama</figcaption>\n</figure>\n<ul>\n<li>Parte 1: entrar\n<ul>\n<li>Crie a classe Car com os atributos pass, passMax, gas, gasMax e\nkm;</li>\n<li>Inicialize os atributos no construtor;</li>\n<li>Crie o m\u00e9todo enter que incrementa pass;</li>\n<li>Crie um if para impedir que pass ultrapasse passMax;</li>\n<li>Crie o m\u00e9todo toString mostrar o estado do carro.</li>\n<li>Teste seu c\u00f3digo.</li>\n</ul></li>\n<li>Parte 2: desembarcar\n<ul>\n<li>Crie o m\u00e9todo <code>leave</code> que decrementa\n<code>pass</code>.</li>\n<li>Crie um condicional para impedir que <code>pass</code> seja menor\nque 0.</li>\n<li>Teste seu c\u00f3digo.</li>\n</ul></li>\n<li>Parte 3: abastecer\n<ul>\n<li>Crie o m\u00e9todo <code>fuel</code> que incrementa <code>gas</code> com\no valor passado.</li>\n<li>Crie um condicional para impedir que <code>gas</code> ultrapasse\n<code>gasMax</code>.</li>\n<li>Teste seu c\u00f3digo.</li>\n</ul></li>\n<li>Parte 4: dirigir\n<ul>\n<li>Crie o m\u00e9todo <code>drive</code> que incrementa <code>km</code> e\ndecrementa <code>gas</code> com o valor passado.</li>\n<li>Crie testes para impedir que o carro dirija sem passageiros ou sem\ncombust\u00edvel.</li>\n<li>Teste seu c\u00f3digo.</li>\n</ul></li>\n<li>Parte 5: dirigir longas dist\u00e2ncias\n<ul>\n<li>Crie testes para impedir que o carro dirija mais do que o\ncombust\u00edvel permite.</li>\n<li>Teste seu c\u00f3digo.</li>\n</ul></li>\n<li>Parte 6: Adapter\n<ul>\n<li>Na classe <code>Adapter</code>, crie um atributo <code>carro</code>\ne o inicialize no construtor.</li>\n<li>Nos outros m\u00e9todos de <code>Adapter</code>, chame o m\u00e9todo\nequivalente da classe <code>Car</code>.</li>\n</ul></li>\n</ul>\n<h2 id=\"shell\">Shell</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE inicializar</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">pass:</span> 0, gas: 0, km: 0</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE entrar</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$enter</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$enter</span></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">pass:</span> 2, gas: 0, km: 0</span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE limite</span></span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$enter</span></span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">fail:</span> limite de pessoas atingido</span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">pass:</span> 2, gas: 0, km: 0</span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE sair</span></span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$leave</span></span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb1-20\"><a href=\"#cb1-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">pass:</span> 1, gas: 0, km: 0</span>\n<span id=\"cb1-21\"><a href=\"#cb1-21\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-22\"><a href=\"#cb1-22\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE limite saida</span></span>\n<span id=\"cb1-23\"><a href=\"#cb1-23\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$leave</span></span>\n<span id=\"cb1-24\"><a href=\"#cb1-24\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$leave</span></span>\n<span id=\"cb1-25\"><a href=\"#cb1-25\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">fail:</span> nao ha ninguem no carro</span>\n<span id=\"cb1-26\"><a href=\"#cb1-26\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb1-27\"><a href=\"#cb1-27\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">pass:</span> 0, gas: 0, km: 0</span>\n<span id=\"cb1-28\"><a href=\"#cb1-28\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<hr />\n<div class=\"sourceCode\" id=\"cb2\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE abastecer</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$fuel</span> 60</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">pass:</span> 0, gas: 60, km: 0</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE dirigir vazio</span></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$drive</span> 10</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">fail:</span> nao ha ninguem no carro</span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE dirigir</span></span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$enter</span></span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$drive</span> 10</span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">pass:</span> 1, gas: 50, km: 10</span>\n<span id=\"cb2-15\"><a href=\"#cb2-15\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-16\"><a href=\"#cb2-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE para longe</span></span>\n<span id=\"cb2-17\"><a href=\"#cb2-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$drive</span> 70</span>\n<span id=\"cb2-18\"><a href=\"#cb2-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">fail:</span> tanque vazio apos andar 50 km</span>\n<span id=\"cb2-19\"><a href=\"#cb2-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$drive</span> 10</span>\n<span id=\"cb2-20\"><a href=\"#cb2-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">fail:</span> tanque vazio</span>\n<span id=\"cb2-21\"><a href=\"#cb2-21\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb2-22\"><a href=\"#cb2-22\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">pass:</span> 1, gas: 0, km: 60</span>\n<span id=\"cb2-23\"><a href=\"#cb2-23\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-24\"><a href=\"#cb2-24\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE enchendo o tanque</span></span>\n<span id=\"cb2-25\"><a href=\"#cb2-25\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$fuel</span> 200</span>\n<span id=\"cb2-26\"><a href=\"#cb2-26\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb2-27\"><a href=\"#cb2-27\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">pass:</span> 1, gas: 100, km: 60</span>\n<span id=\"cb2-28\"><a href=\"#cb2-28\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span>\n<span id=\"cb2-29\"><a href=\"#cb2-29\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#</span></span></code></pre></div>\n<h2 id=\"draft\">Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>java\n<ul>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/carro/.cache/draft/java/Shell.java\">Shell.java</a></li>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/carro/.cache/draft/java/Student.java\">Student.java</a></li>\n</ul></li>\n<li>py\n<ul>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/carro/.cache/draft/py/shell.py\">shell.py</a></li>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/carro/.cache/draft/py/student.py\">student.py</a></li>\n</ul></li>\n<li>ts\n<ul>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/carro/.cache/draft/ts/shell.ts\">shell.ts</a></li>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/carro/.cache/draft/ts/student.ts\">student.ts</a>\n<!-- links --></li>\n</ul></li>\n</ul>\n<h2 id=\"cheat\">Cheat</h2>\n<!-- links .cache/cheat -->\n<!-- links -->\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "#INPUT############################################ inicializar\nshow\nend\n#OUTPUT===========================================\n$show\npass: 0, gas: 0, km: 0\n$end\n#END##############################################\n\n#INPUT############################################ entrar\nshow\nenter\nenter\nshow\nend\n#OUTPUT===========================================\n$show\npass: 0, gas: 0, km: 0\n$enter\n$enter\n$show\npass: 2, gas: 0, km: 0\n$end\n#END##############################################\n\n#INPUT############################################ limite\nshow\nenter\nenter\nshow\nenter\nshow\nend\n#OUTPUT===========================================\n$show\npass: 0, gas: 0, km: 0\n$enter\n$enter\n$show\npass: 2, gas: 0, km: 0\n$enter\nfail: limite de pessoas atingido\n$show\npass: 2, gas: 0, km: 0\n$end\n#END##############################################\n\n#INPUT############################################ sair\nshow\nenter\nenter\nshow\nenter\nshow\nleave\nshow\nend\n#OUTPUT===========================================\n$show\npass: 0, gas: 0, km: 0\n$enter\n$enter\n$show\npass: 2, gas: 0, km: 0\n$enter\nfail: limite de pessoas atingido\n$show\npass: 2, gas: 0, km: 0\n$leave\n$show\npass: 1, gas: 0, km: 0\n$end\n#END##############################################\n\n#INPUT############################################ limite saida\nshow\nenter\nenter\nshow\nenter\nshow\nleave\nshow\nleave\nleave\nshow\nend\n#OUTPUT===========================================\n$show\npass: 0, gas: 0, km: 0\n$enter\n$enter\n$show\npass: 2, gas: 0, km: 0\n$enter\nfail: limite de pessoas atingido\n$show\npass: 2, gas: 0, km: 0\n$leave\n$show\npass: 1, gas: 0, km: 0\n$leave\n$leave\nfail: nao ha ninguem no carro\n$show\npass: 0, gas: 0, km: 0\n$end\n#END##############################################\n\n#INPUT############################################ abastecer\nfuel 60\nshow\nend\n#OUTPUT===========================================\n$fuel 60\n$show\npass: 0, gas: 60, km: 0\n$end\n#END##############################################\n\n#INPUT############################################ dirigir vazio\nfuel 60\nshow\ndrive 10\nend\n#OUTPUT===========================================\n$fuel 60\n$show\npass: 0, gas: 60, km: 0\n$drive 10\nfail: nao ha ninguem no carro\n$end\n#END##############################################\n\n#INPUT############################################ dirigir\nfuel 60\nshow\ndrive 10\nenter\ndrive 10\nshow\nend\n#OUTPUT===========================================\n$fuel 60\n$show\npass: 0, gas: 60, km: 0\n$drive 10\nfail: nao ha ninguem no carro\n$enter\n$drive 10\n$show\npass: 1, gas: 50, km: 10\n$end\n#END##############################################\n\n#INPUT############################################ para longe\nfuel 60\nshow\ndrive 10\nenter\ndrive 10\nshow\ndrive 70\ndrive 10\nshow\nend\n#OUTPUT===========================================\n$fuel 60\n$show\npass: 0, gas: 60, km: 0\n$drive 10\nfail: nao ha ninguem no carro\n$enter\n$drive 10\n$show\npass: 1, gas: 50, km: 10\n$drive 70\nfail: tanque vazio apos andar 50 km\n$drive 10\nfail: tanque vazio\n$show\npass: 1, gas: 0, km: 60\n$end\n#END##############################################\n\n#INPUT############################################ enchendo o tanque\nfuel 60\nshow\ndrive 10\nenter\ndrive 10\nshow\ndrive 70\ndrive 10\nshow\nfuel 200\nshow\nend\n#OUTPUT===========================================\n$fuel 60\n$show\npass: 0, gas: 60, km: 0\n$drive 10\nfail: nao ha ninguem no carro\n$enter\n$drive 10\n$show\npass: 1, gas: 50, km: 10\n$drive 70\nfail: tanque vazio apos andar 50 km\n$drive 10\nfail: tanque vazio\n$show\npass: 1, gas: 0, km: 60\n$fuel 200\n$show\npass: 1, gas: 100, km: 60\n$end\n#END##############################################\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "py": [
            {
                "name": "shell.py",
                "contents": "from student import CarAdp\n\nclass Shell:\n    def __init__(self):\n        self.adp: CarAdp = CarAdp()\n\n    def help(self) -> str:\n        return \"show; enter; leave; fuel <qtd>; drive <dist>\"\n\n    def process_line(self, line: str) -> None:\n        args: list[str] = line.split(\" \")\n        if args[0] == \"help\":\n            print(self.help())\n        elif args[0] == \"show\":\n            print(self.adp.show());\n        elif args[0] == \"enter\":\n            self.adp.enter()\n        elif args[0] == \"leave\":\n            self.adp.leave()\n        elif args[0] == \"fuel\":\n            self.adp.fuel(int(args[1]))\n        elif args[0] == \"drive\":\n            self.adp.drive(int(args[1]))\n        else:\n            print(\"fail: comando invalido\")\n\n    def run(self) -> None:\n        while True:\n            print(\"$\", end=\"\")\n            line = input()\n            print(line)\n            if line == \"end\":\n                break\n            self.process_line(line)\n\nShell().run()",
                "encoding": 0
            },
            {
                "name": "student.py",
                "contents": "class CarAdp:\n    def __init__(self):\n        # self.car = Car()\n        pass\n    def enter(self) -> None:\n        # self.car.enter()\n        pass\n    def leave(self) -> None:\n        # self.car.leave()\n        pass\n    def fuel(self, gas: int) -> None:\n        # self.car.fuel(gas)\n        pass\n    def drive(self, km: int) -> None:\n        # self.car.drive(km)\n        pass\n    def show(self) -> str:\n        # return str(self.car)\n        return \"\"\n",
                "encoding": 0
            }
        ],
        "ts": [
            {
                "name": "shell.ts",
                "contents": "import {Adapter} from \"./student\";\n\nfunction input(): string { let X: any = input; X.L = X.L || require(\"fs\").readFileSync(0).toString().split(/\\r?\\n/); return X.L.shift(); } // _TEST_ONLY_\n// function input(): string { let X: any = input; X.P = X.P || require(\"readline-sync\"); return X.P.question() } // _FREE_ONLY_\nfunction write(text: any, endl=\"\\n\") { process.stdout.write(\"\" + text + endl); }\nexport {};\n\n\nfunction main() {\n    let adp = new Adapter();\n\n    while (true) {\n        write(\"$\", \"\");\n        let line = input();\n        write(line); // _TEST_ONLY_\n        let args = line.split(\" \");\n\n        if      (args[0] === \"show\")  { write(adp.toString());          }\n        else if (args[0] === \"enter\") { adp.enter();                    }\n        else if (args[0] === \"leave\") { adp.leave();                    }\n        else if (args[0] === \"fuel\")  { adp.fuel(+args[1]);             }\n        else if (args[0] === \"drive\") { adp.drive(+args[1]);            }\n        \n        else if (args[0] === \"end\")   { break;                          }\n        else                          { write(\"fail: comando invalido\");}\n    }\n}\n\nmain()\n",
                "encoding": 0
            },
            {
                "name": "student.ts",
                "contents": "class Adapter {\n    // car: Car;\n\n    constructor() {\n        // this.car = new Car();\n    }\n\n    enter(): void {\n        // this.car.enter();\n    }\n\n    leave(): void {\n        // this.car.leave();\n    }\n\n    fuel(gas: number): void {\n        // this.car.fuel(gas);\n    }\n\n    drive(km: number): void {\n        // this.car.drive(km);\n    }\n\n    toString(): string {\n        // return this.car.toString();\n        return \"\";\n    }\n}\nexport {Adapter};\n\nif (require.main === module) {\n    console.log(\"Rodando o arquivo do estudante\");\n}\n",
                "encoding": 0
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.*;\n\npublic class Shell {\n    Student adp = new Student();\n\n    public void processLine(String line) {\n        var args = line.split(\" \");\n        if      (args[0].equals(\"show\"))  { System.out.println(adp.toString());              }\n        else if (args[0].equals(\"enter\")) { adp.enter();                          }\n        else if (args[0].equals(\"leave\")) { adp.leave();                          }\n        else if (args[0].equals(\"drive\")) { adp.drive(Integer.parseInt(args[1]));     }\n        else if (args[0].equals(\"fuel\"))  { adp.fuel(Integer.parseInt(args[1]));      }\n        else                              { System.out.println(\"fail: comando invalido\");}\n    }\n\n    public static void main(String[] a) {\n        Shell shell = new Shell();\n\n        while (true) {\n            System.out.print(\"$\");\n            var line = input();\n            write(line); // comente para executar interativamente\n            if (line.equals(\"end\")) {\n                break;\n            }\n            shell.processLine(line);\n        }\n    }\n    private static Scanner scanner = new Scanner(System.in);\n    private static String  input()              { return scanner.nextLine(); }\n    private static void    write(String value)  { System.out.println(value); }\n}\n",
                "encoding": 0
            },
            {
                "name": "Student.java",
                "contents": "public class Student {\n    // Car car;\n\n    public Student() {\n        // this.car = new Car();\n    }\n    \n    public void enter() {\n        // car.enter();\n    }\n\n    public void leave() {\n        // car.leave();\n    }\n\n    public void fuel(int gas) {\n        // car.fuel(gas);\n    }\n\n    public void drive(int km) {\n        // car.drive(km);\n    }\n\n    public String toString() {\n        // return car.toString();\n        return \"\";\n    }\n}\n",
                "encoding": 0
            }
        ]
    }
}
