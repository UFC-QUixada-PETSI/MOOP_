{
    "title": "@carro: Um carro simples",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@carro: Um carro simples</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Um carro simples</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"cover\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/carro/cover.jpg\" /></p>\n<h2>Intro</h2>\n<p>Nesta atividade, vamos implementar um carro ecol\u00f3gico. Ele deve ser capaz de embarcar e desembarcar pessoas, abastecer e andar.</p>\n<ul>\n<li>O carro deve ser inicializado com o tanque vazio, sem ningu\u00e9m dentro e com 0 quil\u00f4metros percorridos. Suporta at\u00e9 2 pessoas e at\u00e9 100 litros de combust\u00edvel.</li>\n<li>Construtor do Carro<ul>\n<li><code>pass</code>: 0 passageiros.</li>\n<li><code>km</code>: 0 quil\u00f4metros percorridos.</li>\n<li><code>passMax</code>: M\u00e1ximo de 2 pessoas.</li>\n<li><code>gas</code>: 0 litros de gasolina.</li>\n<li><code>gasMax</code>: M\u00e1ximo de 100 litros de gasolina.</li>\n</ul>\n</li>\n<li>Mostrar <code>$show</code><ul>\n<li>Imprime a chamada do m\u00e9todo <code>toString</code> do carro.</li>\n<li><code>toString</code> - Retorna uma string com o estado atual do carro no formato:</li>\n<li><code>\"pass:{pass}, gas:{gas}, km:{km}\"</code>.</li>\n</ul>\n</li>\n<li>Entrar <code>$enter</code><ul>\n<li>Embarca uma pessoa por vez, mas n\u00e3o al\u00e9m do m\u00e1ximo.</li>\n<li>Se o carro estiver lotado, emite a mensagem de erro.<ul>\n<li><code>fail: limite de pessoas atingido</code>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Sair <code>$leave</code><ul>\n<li>Desembarca uma pessoa por vez.</li>\n<li>Se n\u00e3o houver ningu\u00e9m no carro, emite a mensagem de erro.<ul>\n<li><code>fail: nao ha ninguem no carro</code>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Abastecer certa quantidade <code>$fuel increment</code><ul>\n<li>Abastece o tanque com a quantidade de litros de combust\u00edvel passada.</li>\n<li>Caso tente abastecer acima do limite, descarta o valor excedente.</li>\n</ul>\n</li>\n<li>Dirigir certa dist\u00e2ncia <code>$drive distance</code><ul>\n<li>Para dirigir, o carro consome combust\u00edvel e aumenta a quilometragem.</li>\n<li>S\u00f3 pode dirigir se houver combust\u00edvel e se houver algu\u00e9m no carro.</li>\n<li>Caso n\u00e3o haja ningu\u00e9m no carro, emite a mensagem de erro.<ul>\n<li><code>fail: n\u00e3o h\u00e1 ningu\u00e9m no carro</code></li>\n</ul>\n</li>\n<li>Caso n\u00e3o haja combust\u00edvel, emite a mensagem de erro.<ul>\n<li><code>fail: tanque vazio</code></li>\n</ul>\n</li>\n<li>Caso n\u00e3o exista combust\u00edvel suficiente para completar a viagem inteira, dirija o m\u00e1ximo poss\u00edvel e emite uma mensagem indicando quanto foi percorrido<ul>\n<li><code>fail: tanque vazio ap\u00f3s andar {distancia} km</code>.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Guide</h2>\n<p><a href=\"https://youtu.be/LM6KM4eLi3U\"><img alt=\"youtube icon\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/carro/../youguide.png\" /></a></p>\n<ul>\n<li>Implemente a sua classe se orientando pela descri\u00e7\u00e3o, pelo UML(se houver) e pelos testes cadastrados.</li>\n<li>Come\u00e7e analisando os testes e entendendo tudo que seu c\u00f3digo precisa fazer.</li>\n<li>Depois que tiver uma ideia do que vai implementar, se deixe guiar pelos testes, implementando apenas o que \u00e9 pedido para passar em cada teste.</li>\n<li>Passe para o pr\u00f3ximo teste at\u00e9 implementar tudo que \u00e9 pedido.</li>\n</ul>\n<p><img alt=\"diagrama\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/carro/diagrama.png\" /></p>\n<h2>Shell</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE inicializar</span>\n<span class=\"nv\">$show</span>\npass:<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span>gas:<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span>km:<span class=\"w\"> </span><span class=\"m\">0</span>\n\n<span class=\"c1\">#TEST_CASE entrar</span>\n<span class=\"nv\">$enter</span>\n<span class=\"nv\">$enter</span>\n<span class=\"nv\">$show</span>\npass:<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span>gas:<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span>km:<span class=\"w\"> </span><span class=\"m\">0</span>\n\n<span class=\"c1\">#TEST_CASE limite</span>\n<span class=\"nv\">$enter</span>\nfail:<span class=\"w\"> </span>limite<span class=\"w\"> </span>de<span class=\"w\"> </span>pessoas<span class=\"w\"> </span>atingido\n<span class=\"nv\">$show</span>\npass:<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span>gas:<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span>km:<span class=\"w\"> </span><span class=\"m\">0</span>\n\n<span class=\"c1\">#TEST_CASE sair</span>\n<span class=\"nv\">$leave</span>\n<span class=\"nv\">$show</span>\npass:<span class=\"w\"> </span><span class=\"m\">1</span>,<span class=\"w\"> </span>gas:<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span>km:<span class=\"w\"> </span><span class=\"m\">0</span>\n\n<span class=\"c1\">#TEST_CASE limite saida</span>\n<span class=\"nv\">$leave</span>\n<span class=\"nv\">$leave</span>\nfail:<span class=\"w\"> </span>nao<span class=\"w\"> </span>ha<span class=\"w\"> </span>ninguem<span class=\"w\"> </span>no<span class=\"w\"> </span>carro\n<span class=\"nv\">$show</span>\npass:<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span>gas:<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span>km:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<hr />\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE abastecer</span>\n<span class=\"nv\">$fuel</span><span class=\"w\"> </span><span class=\"m\">60</span>\n<span class=\"nv\">$show</span>\npass:<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span>gas:<span class=\"w\"> </span><span class=\"m\">60</span>,<span class=\"w\"> </span>km:<span class=\"w\"> </span><span class=\"m\">0</span>\n\n<span class=\"c1\">#TEST_CASE dirigir vazio</span>\n<span class=\"nv\">$drive</span><span class=\"w\"> </span><span class=\"m\">10</span>\nfail:<span class=\"w\"> </span>nao<span class=\"w\"> </span>ha<span class=\"w\"> </span>ninguem<span class=\"w\"> </span>no<span class=\"w\"> </span>carro\n\n<span class=\"c1\">#TEST_CASE dirigir</span>\n<span class=\"nv\">$enter</span>\n<span class=\"nv\">$drive</span><span class=\"w\"> </span><span class=\"m\">10</span>\n<span class=\"nv\">$show</span>\npass:<span class=\"w\"> </span><span class=\"m\">1</span>,<span class=\"w\"> </span>gas:<span class=\"w\"> </span><span class=\"m\">50</span>,<span class=\"w\"> </span>km:<span class=\"w\"> </span><span class=\"m\">10</span>\n\n<span class=\"c1\">#TEST_CASE para longe</span>\n<span class=\"nv\">$drive</span><span class=\"w\"> </span><span class=\"m\">70</span>\nfail:<span class=\"w\"> </span>tanque<span class=\"w\"> </span>vazio<span class=\"w\"> </span>apos<span class=\"w\"> </span>andar<span class=\"w\"> </span><span class=\"m\">50</span><span class=\"w\"> </span>km\n<span class=\"nv\">$drive</span><span class=\"w\"> </span><span class=\"m\">10</span>\nfail:<span class=\"w\"> </span>tanque<span class=\"w\"> </span>vazio\n<span class=\"nv\">$show</span>\npass:<span class=\"w\"> </span><span class=\"m\">1</span>,<span class=\"w\"> </span>gas:<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span>km:<span class=\"w\"> </span><span class=\"m\">60</span>\n\n<span class=\"c1\">#TEST_CASE enchendo o tanque</span>\n<span class=\"nv\">$fuel</span><span class=\"w\"> </span><span class=\"m\">200</span>\n<span class=\"nv\">$show</span>\npass:<span class=\"w\"> </span><span class=\"m\">1</span>,<span class=\"w\"> </span>gas:<span class=\"w\"> </span><span class=\"m\">100</span>,<span class=\"w\"> </span>km:<span class=\"w\"> </span><span class=\"m\">60</span>\n<span class=\"nv\">$end</span>\n<span class=\"c1\">#</span>\n</code></pre></div>\n<h2>Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/carro/.cache/draft/cpp/shell.cpp\">shell.cpp</a></li>\n</ul>\n</li>\n<li>java<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/carro/.cache/draft/java/Shell.java\">Shell.java</a></li>\n</ul>\n</li>\n<li>ts<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/carro/.cache/draft/ts/shell.ts\">shell.ts</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT inicializar\nshow\nend\n======== EXPECT\n$show\npass: 0, gas: 0, km: 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT entrar\nshow\nenter\nenter\nshow\nend\n======== EXPECT\n$show\npass: 0, gas: 0, km: 0\n$enter\n$enter\n$show\npass: 2, gas: 0, km: 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT limite\nshow\nenter\nenter\nshow\nenter\nshow\nend\n======== EXPECT\n$show\npass: 0, gas: 0, km: 0\n$enter\n$enter\n$show\npass: 2, gas: 0, km: 0\n$enter\nfail: limite de pessoas atingido\n$show\npass: 2, gas: 0, km: 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT sair\nshow\nenter\nenter\nshow\nenter\nshow\nleave\nshow\nend\n======== EXPECT\n$show\npass: 0, gas: 0, km: 0\n$enter\n$enter\n$show\npass: 2, gas: 0, km: 0\n$enter\nfail: limite de pessoas atingido\n$show\npass: 2, gas: 0, km: 0\n$leave\n$show\npass: 1, gas: 0, km: 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT limite saida\nshow\nenter\nenter\nshow\nenter\nshow\nleave\nshow\nleave\nleave\nshow\nend\n======== EXPECT\n$show\npass: 0, gas: 0, km: 0\n$enter\n$enter\n$show\npass: 2, gas: 0, km: 0\n$enter\nfail: limite de pessoas atingido\n$show\npass: 2, gas: 0, km: 0\n$leave\n$show\npass: 1, gas: 0, km: 0\n$leave\n$leave\nfail: nao ha ninguem no carro\n$show\npass: 0, gas: 0, km: 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT abastecer\nfuel 60\nshow\nend\n======== EXPECT\n$fuel 60\n$show\npass: 0, gas: 60, km: 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dirigir vazio\nfuel 60\nshow\ndrive 10\nend\n======== EXPECT\n$fuel 60\n$show\npass: 0, gas: 60, km: 0\n$drive 10\nfail: nao ha ninguem no carro\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dirigir\nfuel 60\nshow\ndrive 10\nenter\ndrive 10\nshow\nend\n======== EXPECT\n$fuel 60\n$show\npass: 0, gas: 60, km: 0\n$drive 10\nfail: nao ha ninguem no carro\n$enter\n$drive 10\n$show\npass: 1, gas: 50, km: 10\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT para longe\nfuel 60\nshow\ndrive 10\nenter\ndrive 10\nshow\ndrive 70\ndrive 10\nshow\nend\n======== EXPECT\n$fuel 60\n$show\npass: 0, gas: 60, km: 0\n$drive 10\nfail: nao ha ninguem no carro\n$enter\n$drive 10\n$show\npass: 1, gas: 50, km: 10\n$drive 70\nfail: tanque vazio apos andar 50 km\n$drive 10\nfail: tanque vazio\n$show\npass: 1, gas: 0, km: 60\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT enchendo o tanque\nfuel 60\nshow\ndrive 10\nenter\ndrive 10\nshow\ndrive 70\ndrive 10\nshow\nfuel 200\nshow\nend\n======== EXPECT\n$fuel 60\n$show\npass: 0, gas: 60, km: 0\n$drive 10\nfail: nao ha ninguem no carro\n$enter\n$drive 10\n$show\npass: 1, gas: 50, km: 10\n$drive 70\nfail: tanque vazio apos andar 50 km\n$drive 10\nfail: tanque vazio\n$show\npass: 1, gas: 0, km: 60\n$fuel 200\n$show\npass: 1, gas: 100, km: 60\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "function input() { return \"\"; }\nexport {};\n\n\nfunction main() {\n    // CRIE SEU CARRO AQUI\n    while(true) {\n        let line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(\" \");\n        const cmd = par[0];\n\n        if (cmd == \"end\") {\n            break;\n        } \n        else if (cmd == \"show\") {\n            // MOSTRE O CARRO\n        } \n        else if (cmd == \"enter\") {\n            // TENTE EMBARCAR UMA PESSOA\n        } \n        else if (cmd == \"leave\") {\n            // TENTE DESEMBARCAR UMA PESSOA\n        } \n        else if (cmd == \"fuel\") {\n            // INCREMENTE O COMBUSTIVEL\n            // const increment = parseInt(par[1]);\n        } \n        else if (cmd == \"drive\") {\n            // TENTE DIRIGIR CERTA DISTANCIA\n            // const distance = parseInt(par[1]);\n        } \n        else {\n            console.log(\"fail: comando invalido\");\n        }\n    }\n}\n\nmain()\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.*;\n\n\npublic class Shell {\n    \n    public static void main(String[] a) {\n        // CRIE SEU CARRO AQUI\n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"show\")) {\n                // MOSTRE OS ATRIBUTOS DO CARRO\n            } \n            else if (cmd.equals(\"enter\")) {\n                // TENTE EMBARCAR UMA PESSOA\n            } \n            else if (cmd.equals(\"leave\")) {\n                // TENTE DESEMBARCAR UMA PESSOA\n            } \n            else if (cmd.equals(\"fuel\")) {\n                // AUMENTE A QUANTIDADE DE COMBUSTIVEL\n                // int increment = Integer.parseInt(par[1]);\n            } \n            else if (cmd.equals(\"drive\")) {\n                // TENTE DIRIGIR UMA CERTA DISTANCIA\n                // int distance = Integer.parseInt(par[1]);\n            }  \n            else {\n                System.out.println(\"fail: comando invalido\");\n            }\n        }   \n    }\n    private static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <sstream>\nusing namespace std;\n\nint main() {\n    // CRIE SEU CARRO AQUI\n    while (true) {\n        \n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << '\\n';\n\n        stringstream ss(line);\n        ss >> cmd;\n        \n        if (cmd == \"end\")   {\n            break;\n        } \n        else if (cmd == \"show\") {\n            // MOSTRE O CARRO\n        } \n        else if (cmd == \"enter\") {\n            // TENTE EMBARCAR\n        } \n        else if (cmd == \"leave\") {\n            // TENTE DESCEMBARCAR\n        } \n        else if (cmd == \"fuel\") {\n            // AUMENTE O COMBUSTIVEL\n            // int increment{};\n            // ss >> increment;\n        } \n        else if (cmd == \"drive\") {\n            // TENTE DIRIGIR\n            // int distance {};\n            // ss >> distance;\n        } \n        else {\n            cout << \"fail: comando invalido\\n\";\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
