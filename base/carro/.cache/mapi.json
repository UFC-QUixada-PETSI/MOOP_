{
    "title": "Se n\u00e3o pode comprar um, construa seu primeiro @carro",
    "description": "# Se n\u00e3o pode comprar um, construa seu primeiro @carro\n\n<!-- toch -->\n[Intro](#intro) | [Treino](#treino) | [Draft](#draft) | [Guide](#guide) | [Shell](#shell)\n-- | -- | -- | -- | --\n<!-- toch -->\n\n![cover](cover.jpg)\n\nNessa atividade vamos implementar um carro ecol\u00f3gico. Ele deve poder embarcar e desembarcar pessoas, colocar combust\u00edvel e andar.\n\n***\n\n## Intro\n\nSeu sistema dever\u00e1:\n\n- Inicializar.\n  - Iniciar de tanque vazio, sem ningu\u00e9m dentro e com 0 de quilometragem.\n  - Para simplificar, nosso carro esportivo suporta at\u00e9 2 pessoas e seu tanque suporta at\u00e9 100 litros de combust\u00edvel.\n- Entrando e Saindo.\n  - Embarcar uma pessoa por vez.\n  - Desembarcar uma pessoa por vez.\n    - N\u00e3o embarque al\u00e9m do limite ou desembarque se n\u00e3o houver ningu\u00e9m no carro.\n- Abastecer.\n  - Abastecer o tanque passando a quantidade de litros de combust\u00edvel.\n  - Caso tente abastecer acima do limite, descarte o valor que passou.\n- Dirigir.\n  - Caso haja pelo menos uma pessoa no carro e **algum combust\u00edvel**, ele deve gastar combust\u00edvel andando e aumentar a quilometragem.\n  - Nosso carro faz um quil\u00f4metro por litro de combust\u00edvel.\n  - Caso n\u00e3o exista combust\u00edvel suficiente para completar a viagem inteira, dirija o que for poss\u00edvel e emita uma mensagem indicando quanto foi percorrido.\n\n***\n\n## Treino\n\n- Parte 1: entrar;\n  - Crie a classe `Car` com os atributos `pass`, `passMax`;\n  - Crie o m\u00e9todo construtor que inicializa os atributos com 0 e 2;\n  - Crie o m\u00e9todo `enter` que incrementa `pass`;\n  - Crie um if para impedir que `pass` ultrapasse `passMax`;\n  - Crie o m\u00e9todo `toString` mostrar o estado do carro.\n  - Teste seu c\u00f3digo.\n- Parte 2: sair.\n  - Crie o m\u00e9todo `leave` que decrementa `pass`;\n  - Crie um if para impedir que `pass` seja menor que 0;\n  - Teste seu c\u00f3digo.\n- Parte 3: abastecer.\n  - Crie os atributos `gas` e `gasMax`;\n  - Crie o m\u00e9todo `fuel` que incrementa `gas` com o valor passado;\n  - Crie um if para impedir que `gas` ultrapasse `gasMax`;\n  - Teste seu c\u00f3digo.\n- Parte 4: dirigir.\n  - Crie o atributo `km`;\n  - Crie o m\u00e9todo `drive` que incrementa `km` e decrementa `gas` com o valor passado;\n  - Crie testes para impedir que o carro dirija em passageiros ou sem combust\u00edvel;\n  - Teste seu c\u00f3digo.\n- Parte 5: dirigir longe.\n  - Crie testes para impedir que o carro dirija mais do que o combust\u00edvel permite;\n  - Teste seu c\u00f3digo.\n\n## Draft\n\n<!-- draft -->\n- cpp\n  - [car.cpp](.cache/lang/cpp/car.cpp)\n  - [shell.cpp](.cache/lang/cpp/shell.cpp)\n- java\n  - [Car.java](.cache/lang/java/Car.java)\n  - [Shell.java](.cache/lang/java/Shell.java)\n- ts\n  - [shell.ts](.cache/lang/ts/shell.ts)\n\n<!-- draft -->\n\n## Guide\n\n![diagrama](diagrama.png)\n\n<!-- load diagrama.puml fenced=ts:filter -->\n\n```ts\nclass Car {\n  ' quantidade de passageiros no carro\n  + pass    : int\n\n  ' m\u00e1ximo de passageiros que o carro suporta\n  + passMax : int\n\n  ' gasolina atual do carro\n  + gas     : int\n\n  ' m\u00e1ximo de gasolina que o carro suporta\n  + gasMax  : int\n\n  ' quilometragem atual do carro\n  + km      : int\n\n  __\n  \n  ' inicializar todos os atributos\n  ' inicializar com tanque vazio\n  ' 0 passageiros\n  ' 0 de quilometragem\n  ' m\u00e1ximo de 2 pessoas\n  ' m\u00e1ximo de 100 litros de gasolina\n  + Car()\n\n  ' embarca uma pessoa no carro\n  ' verifique se o carro n\u00e3o estiver lotado\n  + enter()\n  \n  ' desembarca uma pessoa por vez\n  ' verifique se tem algu\u00e9m no carro\n  + leave()\n  \n  ' percorre value quilometros com o carro\n  ' gasta um litro de gas para cada km de distancia\n  ' verifique se tem algu\u00e9m no carro\n  ' verifique se tem gasolina suficiente\n\n  + drive(value : int): void\n  \n  ' incrementa gasolina no tanque de value\n  ' caso tente abastecer acima do limite de gasMax\n  '   o valor em excesso deve ser descartado\n  \n  + fuel(value : int)\n\n  + toString() : string\n}\n\nclass Legenda {\n  + atributoPublic\n  - atributoPrivate\n  # atributoProtected\n  __\n  + m\u00e9todoPublic()\n  - m\u00e9todoPrivate()\n  # m\u00e9todoProtected()\n}\n\n```\n\n<!-- load -->\n\n***\n\n## Shell\n\n```bash\n#__case inicializar\n# O comando \"$enter\" insere uma pessoa no carro.\n# O comando \"$leave\" retira uma pessoa do carro\".\n# O comando \"$show\" mostra o estado do carro.\n# Deve ser emitido um erro caso n\u00e3o seja poss\u00edvel inserir ou retirar uma pessoa.\n$show\npass: 0, gas: 0, km: 0\n\n#__case entrar\n$enter\n$enter\n$show\npass: 2, gas: 0, km: 0\n\n#__case limite\n$enter\nfail: limite de pessoas atingido\n$show\npass: 2, gas: 0, km: 0\n\n#__case sair\n$leave\n$show\npass: 1, gas: 0, km: 0\n\n#__case limite saida\n$leave\n$leave\nfail: nao ha ninguem no carro\n$show\npass: 0, gas: 0, km: 0\n$end\n```\n\n***\n\n```bash\n#__case abastecer\n$fuel 60\n$show\npass: 0, gas: 60, km: 0\n\n#__case dirigir vazio\n$drive 10\nfail: nao ha ninguem no carro\n\n#__case dirigir\n$enter\n$drive 10\n$show\npass: 1, gas: 50, km: 10\n\n#__case para longe\n$drive 70\nfail: tanque vazio apos andar 50 km\n$drive 10\nfail: tanque vazio\n$show\npass: 1, gas: 0, km: 60\n\n#__case enchendo o tanque\n$fuel 200\n$show\npass: 1, gas: 100, km: 60\n$end\n#__end__\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> inicializar\nshow\nend\n========\n$show\npass: 0, gas: 0, km: 0\n$end\n<<<<<<<<\n\n>>>>>>>> entrar\nshow\nenter\nenter\nshow\nend\n========\n$show\npass: 0, gas: 0, km: 0\n$enter\n$enter\n$show\npass: 2, gas: 0, km: 0\n$end\n<<<<<<<<\n\n>>>>>>>> limite\nshow\nenter\nenter\nshow\nenter\nshow\nend\n========\n$show\npass: 0, gas: 0, km: 0\n$enter\n$enter\n$show\npass: 2, gas: 0, km: 0\n$enter\nfail: limite de pessoas atingido\n$show\npass: 2, gas: 0, km: 0\n$end\n<<<<<<<<\n\n>>>>>>>> sair\nshow\nenter\nenter\nshow\nenter\nshow\nleave\nshow\nend\n========\n$show\npass: 0, gas: 0, km: 0\n$enter\n$enter\n$show\npass: 2, gas: 0, km: 0\n$enter\nfail: limite de pessoas atingido\n$show\npass: 2, gas: 0, km: 0\n$leave\n$show\npass: 1, gas: 0, km: 0\n$end\n<<<<<<<<\n\n>>>>>>>> limite saida\nshow\nenter\nenter\nshow\nenter\nshow\nleave\nshow\nleave\nleave\nshow\nend\n========\n$show\npass: 0, gas: 0, km: 0\n$enter\n$enter\n$show\npass: 2, gas: 0, km: 0\n$enter\nfail: limite de pessoas atingido\n$show\npass: 2, gas: 0, km: 0\n$leave\n$show\npass: 1, gas: 0, km: 0\n$leave\n$leave\nfail: nao ha ninguem no carro\n$show\npass: 0, gas: 0, km: 0\n$end\n<<<<<<<<\n\n>>>>>>>> abastecer\nfuel 60\nshow\nend\n========\n$fuel 60\n$show\npass: 0, gas: 60, km: 0\n$end\n<<<<<<<<\n\n>>>>>>>> dirigir vazio\nfuel 60\nshow\ndrive 10\nend\n========\n$fuel 60\n$show\npass: 0, gas: 60, km: 0\n$drive 10\nfail: nao ha ninguem no carro\n$end\n<<<<<<<<\n\n>>>>>>>> dirigir\nfuel 60\nshow\ndrive 10\nenter\ndrive 10\nshow\nend\n========\n$fuel 60\n$show\npass: 0, gas: 60, km: 0\n$drive 10\nfail: nao ha ninguem no carro\n$enter\n$drive 10\n$show\npass: 1, gas: 50, km: 10\n$end\n<<<<<<<<\n\n>>>>>>>> para longe\nfuel 60\nshow\ndrive 10\nenter\ndrive 10\nshow\ndrive 70\ndrive 10\nshow\nend\n========\n$fuel 60\n$show\npass: 0, gas: 60, km: 0\n$drive 10\nfail: nao ha ninguem no carro\n$enter\n$drive 10\n$show\npass: 1, gas: 50, km: 10\n$drive 70\nfail: tanque vazio apos andar 50 km\n$drive 10\nfail: tanque vazio\n$show\npass: 1, gas: 0, km: 60\n$end\n<<<<<<<<\n\n>>>>>>>> enchendo o tanque\nfuel 60\nshow\ndrive 10\nenter\ndrive 10\nshow\ndrive 70\ndrive 10\nshow\nfuel 200\nshow\nend\n========\n$fuel 60\n$show\npass: 0, gas: 60, km: 0\n$drive 10\nfail: nao ha ninguem no carro\n$enter\n$drive 10\n$show\npass: 1, gas: 50, km: 10\n$drive 70\nfail: tanque vazio apos andar 50 km\n$drive 10\nfail: tanque vazio\n$show\npass: 1, gas: 0, km: 60\n$fuel 200\n$show\npass: 1, gas: 100, km: 60\n$end\n<<<<<<<<\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "car.cpp",
                "contents": "#include <iostream>\nclass Car {\npublic:\n    int pass;\n    int passMax;\n    int gas;\n    int gasMax;\n    int km;\n\n    Car() {\n        //todo\n    }\n\n    void enter() {\n        //todo\n    }\n\n    void leave() {\n        //todo\n    }\n\n    void fuel(int gas) {\n        (void) gas;\n        //todo\n    }\n\n    void drive(int km) {\n        (void) km;\n        //todo\n    }\n\n    std::string str() {\n        return \"\";\n        //todo\n    }\n};\n\n",
                "encoding": 0
            },
            {
                "name": "shell.cpp",
                "contents": "#include <fn.hpp>\n#include \"car.cpp\"\n\nint main() {\n    Car car;\n    while (true) {\n        auto line = fn::input();\n        auto args = fn::split(line, ' ');\n        fn::write(\"$\" + line);\n\n        if      (args[0] == \"show\")  { fn::write(car.str());                }\n        else if (args[0] == \"enter\") { car.enter();                         } \n        else if (args[0] == \"leave\") { car.leave();                         }\n        else if (args[0] == \"fuel\")  { car.fuel(+args[1]);                  }\n        else if (args[0] == \"drive\") { car.drive(+args[1]);                 }\n        else if (args[0] == \"end\")   { break;                               }\n        else                         { fn::write(\"fail: comando invalido\"); }\n    }\n}\n",
                "encoding": 0
            }
        ],
        "java": [
            {
                "name": "Car.java",
                "contents": "public class Car{\n    public int pass; // Passageiros\n    public int passMax; // limite de Passageiros\n    public int gas; // tanque\n    public int gasMax; // limite do tanque\n    public int km; // quantidade de quilometragem\n\n    public Car() {\n    }\n\n    public void enter() {\n    }\n\n    public void leave() {\n    }\n\n    public void fuel(int gas) {\n    }\n    \n    public void drive (int km) {\n    }\n\n    public String toString() {\n        return \"\";\n    }\n};",
                "encoding": 0
            },
            {
                "name": "Shell.java",
                "contents": "import java.util.*;\n\npublic class Shell {\n    public static void main(String[] a) {\n        Car car = new Car();\n        \n        while (true) {\n            var line = input();\n            write(\"$\" + line);\n            var args = line.split(\" \");\n\n            if      (args[0].equals(\"show\"))  { System.out.println(car);              }\n            else if (args[0].equals(\"enter\")) { car.enter();                          }\n            else if (args[0].equals(\"leave\")) { car.leave();                          }\n            else if (args[0].equals(\"drive\")) { car.drive((int) number(args[1]));     }\n            else if (args[0].equals(\"fuel\"))  { car.fuel((int) number(args[1]));      }\n            else if (args[0].equals(\"end\"))   { break;                                }\n            else                              { write(\"fail: comando invalido\");}\n        }\n    }\n\n    private static Scanner scanner = new Scanner(System.in);\n    private static String  input()              { return scanner.nextLine(); }\n    private static double  number(String value) { return Double.parseDouble(value); }\n    private static void    write(String value)  { System.out.println(value); }\n}\n\n\n\n\n\n",
                "encoding": 0
            }
        ],
        "ts": [
            {
                "name": "shell.ts",
                "contents": "\nclass Car{\n    pass: number; // Passageiros\n    passMax: number; // limite de Passageiros\n    gas: number; // tanque\n    gasMax: number; // limite do tanque\n    km: number; // quantidade de quilometragem\n\n    constructor() {\n        //todo\n    }\n\n    enter(): void {\n        //todo\n    }\n\n    leave(): void {\n        //todo\n    }\n\n    fuel(gas: number): void {\n        //todo\n    }\n    \n    drive (km: number): void {\n        //todo\n    }\n\n    toString(): string {\n        //todo\n        return \"\";\n    }\n};\n\n\nlet _cin_ : string[] = [];\ntry { _cin_ = require(\"fs\").readFileSync(0).toString().split(/\\r?\\n/); } catch(e){}\nlet input = () : string => _cin_.length === 0 ? \"\" : _cin_.shift()!;\nlet write = (text: any, end:string=\"\\n\")=> process.stdout.write(\"\" + text + end);\n\nfunction main() {\n    let car = new Car();\n\n    while (true) {\n        let line = input();\n        write(\"$\" + line);\n        let args = line.split(\" \");\n\n        if      (args[0] === \"show\")  { write(car.toString());          }\n        else if (args[0] === \"enter\") { car.enter();                    }\n        else if (args[0] === \"leave\") { car.leave();                    }\n        else if (args[0] === \"fuel\")  { car.fuel(+args[1]);             }\n        else if (args[0] === \"drive\") { car.drive(+args[1]);            }\n        else if (args[0] === \"end\")   { break;                          }\n        else                          { write(\"fail: comando invalido\");}\n    }\n}\n\nmain()\n\n",
                "encoding": 0
            }
        ]
    }
}
