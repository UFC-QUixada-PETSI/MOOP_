{
    "title": "@carro: Um carro simples",
    "description": "# Um carro simples\n\n<!-- toch -->\n[Intro](#intro) | [Guide](#guide) | [Shell](#shell) | [Draft](#draft)\n-- | -- | -- | --\n<!-- toch -->\n\n![cover](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/carro/cover.jpg)\n\n## Intro\n\nNesta atividade, vamos implementar um carro ecol\u00f3gico. Ele deve ser capaz de embarcar e desembarcar pessoas, abastecer e andar.\n\n- O carro deve ser inicializado com o tanque vazio, sem ningu\u00e9m dentro e com 0 quil\u00f4metros percorridos. Suporta at\u00e9 2 pessoas e at\u00e9 100 litros de combust\u00edvel.\n- Construtor do Carro\n  - `pass`: 0 passageiros.\n  - `km`: 0 quil\u00f4metros percorridos.\n  - `passMax`: M\u00e1ximo de 2 pessoas.\n  - `gas`: 0 litros de gasolina.\n  - `gasMax`: M\u00e1ximo de 100 litros de gasolina.\n- Mostrar `$show`\n  - Imprime a chamada do m\u00e9todo `toString` do carro.\n  - `toString` - Retorna uma string com o estado atual do carro no formato:\n  - `\"pass:{pass}, gas:{gas}, km:{km}\"`.\n- Entrar `$enter`\n  - Embarca uma pessoa por vez, mas n\u00e3o al\u00e9m do m\u00e1ximo.\n  - Se o carro estiver lotado, emite a mensagem de erro.\n    - `fail: limite de pessoas atingido`.\n- Sair `$leave`\n  - Desembarca uma pessoa por vez.\n  - Se n\u00e3o houver ningu\u00e9m no carro, emite a mensagem de erro.\n    - `fail: nao ha ninguem no carro`.\n- Abastecer certa quantidade `$fuel increment`\n  - Abastece o tanque com a quantidade de litros de combust\u00edvel passada.\n  - Caso tente abastecer acima do limite, descarta o valor excedente.\n- Dirigir certa dist\u00e2ncia `$drive distance`\n  - Para dirigir, o carro consome combust\u00edvel e aumenta a quilometragem.\n  - S\u00f3 pode dirigir se houver combust\u00edvel e se houver algu\u00e9m no carro.\n  - Caso n\u00e3o haja ningu\u00e9m no carro, emite a mensagem de erro.\n    - `fail: n\u00e3o h\u00e1 ningu\u00e9m no carro`\n  - Caso n\u00e3o haja combust\u00edvel, emite a mensagem de erro.\n    - `fail: tanque vazio`\n  - Caso n\u00e3o exista combust\u00edvel suficiente para completar a viagem inteira, dirija o m\u00e1ximo poss\u00edvel e emite uma mensagem indicando quanto foi percorrido\n    - `fail: tanque vazio ap\u00f3s andar {distancia} km`.\n\n## Guide\n\n[![youtube icon](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/carro/../youguide.png)](https://youtu.be/LM6KM4eLi3U)\n\n\n- Implemente a sua classe se orientando pela descri\u00e7\u00e3o, pelo UML(se houver) e pelos testes cadastrados.\n- Come\u00e7e analisando os testes e entendendo tudo que seu c\u00f3digo precisa fazer.\n- Depois que tiver uma ideia do que vai implementar, se deixe guiar pelos testes, implementando apenas o que \u00e9 pedido para passar em cada teste.\n- Passe para o pr\u00f3ximo teste at\u00e9 implementar tudo que \u00e9 pedido.\n\n![diagrama](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/carro/diagrama.png)\n\n## Shell\n\n```bash\n#TEST_CASE inicializar\n$show\npass: 0, gas: 0, km: 0\n\n#TEST_CASE entrar\n$enter\n$enter\n$show\npass: 2, gas: 0, km: 0\n\n#TEST_CASE limite\n$enter\nfail: limite de pessoas atingido\n$show\npass: 2, gas: 0, km: 0\n\n#TEST_CASE sair\n$leave\n$show\npass: 1, gas: 0, km: 0\n\n#TEST_CASE limite saida\n$leave\n$leave\nfail: nao ha ninguem no carro\n$show\npass: 0, gas: 0, km: 0\n$end\n```\n\n***\n\n```bash\n#TEST_CASE abastecer\n$fuel 60\n$show\npass: 0, gas: 60, km: 0\n\n#TEST_CASE dirigir vazio\n$drive 10\nfail: nao ha ninguem no carro\n\n#TEST_CASE dirigir\n$enter\n$drive 10\n$show\npass: 1, gas: 50, km: 10\n\n#TEST_CASE para longe\n$drive 70\nfail: tanque vazio apos andar 50 km\n$drive 10\nfail: tanque vazio\n$show\npass: 1, gas: 0, km: 60\n\n#TEST_CASE enchendo o tanque\n$fuel 200\n$show\npass: 1, gas: 100, km: 60\n$end\n#\n```\n\n## Draft\n\n<!-- links .cache/draft -->\n- cpp\n  - [shell.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/carro/.cache/draft/cpp/shell.cpp)\n- java\n  - [Shell.java](https://github.com/qxcodepoo/arcade/blob/master/base/carro/.cache/draft/java/Shell.java)\n- ts\n  - [shell.ts](https://github.com/qxcodepoo/arcade/blob/master/base/carro/.cache/draft/ts/shell.ts)\n<!-- links -->\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT inicializar\nshow\nend\n======== EXPECT\n$show\npass: 0, gas: 0, km: 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT entrar\nshow\nenter\nenter\nshow\nend\n======== EXPECT\n$show\npass: 0, gas: 0, km: 0\n$enter\n$enter\n$show\npass: 2, gas: 0, km: 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT limite\nshow\nenter\nenter\nshow\nenter\nshow\nend\n======== EXPECT\n$show\npass: 0, gas: 0, km: 0\n$enter\n$enter\n$show\npass: 2, gas: 0, km: 0\n$enter\nfail: limite de pessoas atingido\n$show\npass: 2, gas: 0, km: 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT sair\nshow\nenter\nenter\nshow\nenter\nshow\nleave\nshow\nend\n======== EXPECT\n$show\npass: 0, gas: 0, km: 0\n$enter\n$enter\n$show\npass: 2, gas: 0, km: 0\n$enter\nfail: limite de pessoas atingido\n$show\npass: 2, gas: 0, km: 0\n$leave\n$show\npass: 1, gas: 0, km: 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT limite saida\nshow\nenter\nenter\nshow\nenter\nshow\nleave\nshow\nleave\nleave\nshow\nend\n======== EXPECT\n$show\npass: 0, gas: 0, km: 0\n$enter\n$enter\n$show\npass: 2, gas: 0, km: 0\n$enter\nfail: limite de pessoas atingido\n$show\npass: 2, gas: 0, km: 0\n$leave\n$show\npass: 1, gas: 0, km: 0\n$leave\n$leave\nfail: nao ha ninguem no carro\n$show\npass: 0, gas: 0, km: 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT abastecer\nfuel 60\nshow\nend\n======== EXPECT\n$fuel 60\n$show\npass: 0, gas: 60, km: 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dirigir vazio\nfuel 60\nshow\ndrive 10\nend\n======== EXPECT\n$fuel 60\n$show\npass: 0, gas: 60, km: 0\n$drive 10\nfail: nao ha ninguem no carro\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dirigir\nfuel 60\nshow\ndrive 10\nenter\ndrive 10\nshow\nend\n======== EXPECT\n$fuel 60\n$show\npass: 0, gas: 60, km: 0\n$drive 10\nfail: nao ha ninguem no carro\n$enter\n$drive 10\n$show\npass: 1, gas: 50, km: 10\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT para longe\nfuel 60\nshow\ndrive 10\nenter\ndrive 10\nshow\ndrive 70\ndrive 10\nshow\nend\n======== EXPECT\n$fuel 60\n$show\npass: 0, gas: 60, km: 0\n$drive 10\nfail: nao ha ninguem no carro\n$enter\n$drive 10\n$show\npass: 1, gas: 50, km: 10\n$drive 70\nfail: tanque vazio apos andar 50 km\n$drive 10\nfail: tanque vazio\n$show\npass: 1, gas: 0, km: 60\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT enchendo o tanque\nfuel 60\nshow\ndrive 10\nenter\ndrive 10\nshow\ndrive 70\ndrive 10\nshow\nfuel 200\nshow\nend\n======== EXPECT\n$fuel 60\n$show\npass: 0, gas: 60, km: 0\n$drive 10\nfail: nao ha ninguem no carro\n$enter\n$drive 10\n$show\npass: 1, gas: 50, km: 10\n$drive 70\nfail: tanque vazio apos andar 50 km\n$drive 10\nfail: tanque vazio\n$show\npass: 1, gas: 0, km: 60\n$fuel 200\n$show\npass: 1, gas: 100, km: 60\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "function input() { return \"\"; }\nexport {};\n\n\nfunction main() {\n    // CRIE SEU CARRO AQUI\n    while(true) {\n        let line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(\" \");\n        const cmd = par[0];\n\n        if (cmd == \"end\") {\n            break;\n        } \n        else if (cmd == \"show\") {\n            // MOSTRE O CARRO\n        } \n        else if (cmd == \"enter\") {\n            // TENTE EMBARCAR UMA PESSOA\n        } \n        else if (cmd == \"leave\") {\n            // TENTE DESEMBARCAR UMA PESSOA\n        } \n        else if (cmd == \"fuel\") {\n            // INCREMENTE O COMBUSTIVEL\n            // const increment = parseInt(par[1]);\n        } \n        else if (cmd == \"drive\") {\n            // TENTE DIRIGIR CERTA DISTANCIA\n            // const distance = parseInt(par[1]);\n        } \n        else {\n            console.log(\"fail: comando invalido\");\n        }\n    }\n}\n\nmain()\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.*;\n\n\npublic class Shell {\n    \n    public static void main(String[] a) {\n        // CRIE SEU CARRO AQUI\n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"show\")) {\n                // MOSTRE OS ATRIBUTOS DO CARRO\n            } \n            else if (cmd.equals(\"enter\")) {\n                // TENTE EMBARCAR UMA PESSOA\n            } \n            else if (cmd.equals(\"leave\")) {\n                // TENTE DESEMBARCAR UMA PESSOA\n            } \n            else if (cmd.equals(\"fuel\")) {\n                // AUMENTE A QUANTIDADE DE COMBUSTIVEL\n                // int increment = Integer.parseInt(par[1]);\n            } \n            else if (cmd.equals(\"drive\")) {\n                // TENTE DIRIGIR UMA CERTA DISTANCIA\n                // int distance = Integer.parseInt(par[1]);\n            }  \n            else {\n                System.out.println(\"fail: comando invalido\");\n            }\n        }   \n    }\n    private static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <sstream>\nusing namespace std;\n\nint main() {\n    // CRIE SEU CARRO AQUI\n    while (true) {\n        \n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << '\\n';\n\n        stringstream ss(line);\n        ss >> cmd;\n        \n        if (cmd == \"end\")   {\n            break;\n        } \n        else if (cmd == \"show\") {\n            // MOSTRE O CARRO\n        } \n        else if (cmd == \"enter\") {\n            // TENTE EMBARCAR\n        } \n        else if (cmd == \"leave\") {\n            // TENTE DESCEMBARCAR\n        } \n        else if (cmd == \"fuel\") {\n            // AUMENTE O COMBUSTIVEL\n            // int increment{};\n            // ss >> increment;\n        } \n        else if (cmd == \"drive\") {\n            // TENTE DIRIGIR\n            // int distance {};\n            // ss >> distance;\n        } \n        else {\n            cout << \"fail: comando invalido\\n\";\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
