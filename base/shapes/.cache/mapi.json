{
    "title": "@shapes: Utilizando interface em c\u00edrculos e ret\u00e2ngulos",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@shapes: Utilizando interface em c\u00edrculos e ret\u00e2ngulos</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n</head>\n<body>\n<h1 id=\"utilizando-interface-em-c\u00edrculos-e-ret\u00e2ngulos\">Utilizando\ninterface em c\u00edrculos e ret\u00e2ngulos</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr class=\"header\">\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<!-- toch -->\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/shapes/cover.jpg\"\nalt=\"cover\" />\n<figcaption aria-hidden=\"true\">cover</figcaption>\n</figure>\n<h2 id=\"intro\">Intro</h2>\n<p>O objetivo desta atividade \u00e9 implementar um sistema para gerenciar\nformas geom\u00e9tricas. Voc\u00ea precisar\u00e1 criar classes para representar\npontos, c\u00edrculos e ret\u00e2ngulos.</p>\n<ul>\n<li><strong>Descri\u00e7\u00e3o</strong>\n<ul>\n<li>A interface <code>Shape</code> define m\u00e9todos que todas as formas\ngeom\u00e9tricas devem implementar.</li>\n<li>A classe <code>Point2D</code> representa um ponto no plano\nbidimensional.</li>\n<li>As classes <code>Circle</code> e <code>Rectangle</code> implementam\na interface <code>Shape</code> e representam um c\u00edrculo e um ret\u00e2ngulo,\nrespectivamente.</li>\n</ul></li>\n</ul>\n<h3 id=\"interface-shape\">Interface Shape</h3>\n<p>A interface <code>Shape</code> exige a implementa\u00e7\u00e3o dos seguintes\nm\u00e9todos (os m\u00e9todos abaixo n\u00e3o s\u00e3o implementadas na classe Shape, apenas\nnas classes filhas):</p>\n<ul>\n<li><code>getArea()</code>: Retorna a \u00e1rea da forma.</li>\n<li><code>getPerimeter()</code>: Retorna o per\u00edmetro da forma.</li>\n<li><code>getName()</code>: Retorna o nome da forma.</li>\n</ul>\n<h3 id=\"classe-point2d\">Classe Point2D</h3>\n<p>A classe <code>Point2D</code> representa um ponto no plano\nbidimensional e possui:</p>\n<ul>\n<li><strong>Atributos:</strong>\n<ul>\n<li><code>x</code>: coordenada x do ponto.</li>\n<li><code>y</code>: coordenada y do ponto.</li>\n</ul></li>\n<li><strong>M\u00e9todos:</strong>\n<ul>\n<li><code>constructor(x: number, y: number)</code>: Inicializa os\natributos x e y.</li>\n<li><code>toString()</code>: Retorna a representa\u00e7\u00e3o do ponto no formato\n<code>(x, y)</code>. Exemplo: <code>(0.00, 0.00)</code>.</li>\n</ul></li>\n</ul>\n<h3 id=\"classe-circle\">Classe Circle</h3>\n<p>A classe <code>Circle</code> implementa a interface\n<code>Shape</code> e representa um c\u00edrculo. Deve incluir:</p>\n<ul>\n<li><strong>Atributos:</strong>\n<ul>\n<li><code>name</code>: Nome da forma, que \u00e9 \u201cCirc\u201d.</li>\n<li><code>center</code>: Centro do c\u00edrculo, representado por um\n<code>Point2D</code>.</li>\n<li><code>radius</code>: Raio do c\u00edrculo.</li>\n</ul></li>\n<li><strong>M\u00e9todos:</strong>\n<ul>\n<li><code>constructor(center: Point2D, radius: number)</code>:\nInicializa os atributos center e radius.</li>\n<li><code>getName()</code>: Retorna o nome \u201cCirc\u201d.</li>\n<li><code>getArea()</code>: Calcula e retorna a \u00e1rea do c\u00edrculo usando a\nf\u00f3rmula <code>\u03c0 * raio\u00b2</code>.</li>\n<li><code>getPerimeter()</code>: Calcula e retorna o per\u00edmetro do\nc\u00edrculo usando a f\u00f3rmula <code>2 * \u03c0 * raio</code>.</li>\n<li><code>toString()</code>: Retorna uma string no formato\n<code>Circ: C=(x, y), R=radius</code>.</li>\n</ul></li>\n</ul>\n<h3 id=\"classe-rectangle\">Classe Rectangle</h3>\n<p>A classe <code>Rectangle</code> tamb\u00e9m implementa a interface\n<code>Shape</code> e representa um ret\u00e2ngulo. Deve incluir:</p>\n<ul>\n<li><strong>Atributos:</strong>\n<ul>\n<li><code>name</code>: Nome da forma, que \u00e9 \u201cRect\u201d.</li>\n<li><code>p1</code>: Um v\u00e9rtice do ret\u00e2ngulo (ponto superior esquerdo),\nrepresentado por um <code>Point2D</code>.</li>\n<li><code>p2</code>: O v\u00e9rtice oposto do ret\u00e2ngulo (ponto inferior\ndireto), representado por um <code>Point2D</code>.</li>\n</ul></li>\n<li><strong>M\u00e9todos:</strong>\n<ul>\n<li><code>constructor(p1: Point2D, p2: Point2D)</code>: Inicializa os\natributos p1 e p2.</li>\n<li><code>getName()</code>: Retorna o nome \u201cRect\u201d.</li>\n<li><code>getArea()</code>: Calcula e retorna a \u00e1rea do ret\u00e2ngulo usando\na f\u00f3rmula <code>largura * altura</code>.\n<ul>\n<li><code>largura</code> \u00e9 a diferen\u00e7a absoluta entre <code>x</code> de\n<code>p1</code> e <code>p2</code>.</li>\n<li><code>altura</code> \u00e9 a diferen\u00e7a absoluta entre <code>y</code> de\n<code>p1</code> e <code>p2</code>.</li>\n</ul></li>\n<li><code>getPerimeter()</code>: Calcula e retorna o per\u00edmetro do\nret\u00e2ngulo usando a f\u00f3rmula <code>2 * (largura + altura)</code>.</li>\n<li><code>toString()</code>: Retorna uma string no formato \u201cRect:\nP1=(x1, y1) P2=(x2, y2)\u201d.</li>\n</ul></li>\n</ul>\n<h3 id=\"fun\u00e7\u00e3o-principal\">Fun\u00e7\u00e3o principal</h3>\n<ul>\n<li>Crie um vetor de shapes para gerenciar.</li>\n<li>Nas a\u00e7\u00f5es <code>circle</code> e <code>rect</code>, instancie o\nobjeto adequado e adicione-o ao vetor de shapes.</li>\n</ul>\n<h2 id=\"guide\">Guide</h2>\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/shapes/diagrama.png\"\nalt=\"diagrama\" />\n<figcaption aria-hidden=\"true\">diagrama</figcaption>\n</figure>\n<h2 id=\"shell\">Shell</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE creating figures</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$circle</span> 2 3 5</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE showing</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Circ:</span> C=<span class=\"er\">(</span><span class=\"ex\">2.00,</span> 3.00<span class=\"kw\">)</span><span class=\"ex\">,</span> R=5.00</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE creating more figures</span></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$rect</span> 1 1 3 3</span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$rect</span> 2 4.53 5 10</span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$circle</span> 1 1 1.5</span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE showing all</span></span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Circ:</span> C=<span class=\"er\">(</span><span class=\"ex\">2.00,</span> 3.00<span class=\"kw\">)</span><span class=\"ex\">,</span> R=5.00</span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Rect:</span> P1=<span class=\"er\">(</span><span class=\"ex\">1.00,</span> 1.00<span class=\"kw\">)</span> <span class=\"va\">P2</span><span class=\"op\">=</span><span class=\"va\">(</span>3.00, 3.00<span class=\"va\">)</span></span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Rect:</span> P1=<span class=\"er\">(</span><span class=\"ex\">2.00,</span> 4.53<span class=\"kw\">)</span> <span class=\"va\">P2</span><span class=\"op\">=</span><span class=\"va\">(</span>5.00, 10.00<span class=\"va\">)</span></span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Circ:</span> C=<span class=\"er\">(</span><span class=\"ex\">1.00,</span> 1.00<span class=\"kw\">)</span><span class=\"ex\">,</span> R=1.50</span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-20\"><a href=\"#cb1-20\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-21\"><a href=\"#cb1-21\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE showing area and perimeter</span></span>\n<span id=\"cb1-22\"><a href=\"#cb1-22\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$info</span></span>\n<span id=\"cb1-23\"><a href=\"#cb1-23\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Circ:</span> A=78.54 P=31.42</span>\n<span id=\"cb1-24\"><a href=\"#cb1-24\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Rect:</span> A=4.00 P=8.00</span>\n<span id=\"cb1-25\"><a href=\"#cb1-25\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Rect:</span> A=16.41 P=16.94</span>\n<span id=\"cb1-26\"><a href=\"#cb1-26\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Circ:</span> A=7.07 P=9.42</span>\n<span id=\"cb1-27\"><a href=\"#cb1-27\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-28\"><a href=\"#cb1-28\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<h2 id=\"draft\">Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp\n<ul>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/shapes/.cache/draft/cpp/shell.cpp\">shell.cpp</a></li>\n</ul></li>\n<li>java\n<ul>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/shapes/.cache/draft/java/Shell.java\">Shell.java</a></li>\n</ul></li>\n<li>ts\n<ul>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/shapes/.cache/draft/ts/shell.ts\">shell.ts</a>\n<!-- links --></li>\n</ul></li>\n</ul>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT creating figures\ncircle 2 3 5\nend\n======== EXPECT\n$circle 2 3 5\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT showing\ncircle 2 3 5\nshow\nend\n======== EXPECT\n$circle 2 3 5\n$show\nCirc: C=(2.00, 3.00), R=5.00\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT creating more figures\ncircle 2 3 5\nshow\nrect 1 1 3 3\nrect 2 4.53 5 10\ncircle 1 1 1.5\nend\n======== EXPECT\n$circle 2 3 5\n$show\nCirc: C=(2.00, 3.00), R=5.00\n$rect 1 1 3 3\n$rect 2 4.53 5 10\n$circle 1 1 1.5\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT showing all\ncircle 2 3 5\nshow\nrect 1 1 3 3\nrect 2 4.53 5 10\ncircle 1 1 1.5\nshow\nend\n======== EXPECT\n$circle 2 3 5\n$show\nCirc: C=(2.00, 3.00), R=5.00\n$rect 1 1 3 3\n$rect 2 4.53 5 10\n$circle 1 1 1.5\n$show\nCirc: C=(2.00, 3.00), R=5.00\nRect: P1=(1.00, 1.00) P2=(3.00, 3.00)\nRect: P1=(2.00, 4.53) P2=(5.00, 10.00)\nCirc: C=(1.00, 1.00), R=1.50\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT showing area and perimeter\ncircle 2 3 5\nshow\nrect 1 1 3 3\nrect 2 4.53 5 10\ncircle 1 1 1.5\nshow\ninfo\nend\n======== EXPECT\n$circle 2 3 5\n$show\nCirc: C=(2.00, 3.00), R=5.00\n$rect 1 1 3 3\n$rect 2 4.53 5 10\n$circle 1 1 1.5\n$show\nCirc: C=(2.00, 3.00), R=5.00\nRect: P1=(1.00, 1.00) P2=(3.00, 3.00)\nRect: P1=(2.00, 4.53) P2=(5.00, 10.00)\nCirc: C=(1.00, 1.00), R=1.50\n$info\nCirc: A=78.54 P=31.42\nRect: A=4.00 P=8.00\nRect: A=16.41 P=16.94\nCirc: A=7.07 P=9.42\n$end\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\nfunction main() {\n//     const shapes: Shape[] = []; \n\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(\" \");\n        const cmd = par[0];\n\n        if (cmd == \"end\") {\n            break;\n        }\n        else if (cmd == \"show\") {\n        }\n        else if (cmd == \"circle\") {\n            // const x = parseFloat(par[1]);\n            // const y = parseFloat(par[2]);\n            // const r = parseFloat(par[3]);\n        }\n        else if (cmd == \"rect\") {\n            // const x1 = parseFloat(par[1]);\n            // const y1 = parseFloat(par[2]);\n            // const x2 = parseFloat(par[3]);\n            // const y2 = parseFloat(par[4]);\n        }\n        else if (cmd == \"info\") {\n        }\n        else {\n            console.log(\"fail: invalid command\");\n        }\n    }\n}\n\nmain();\n",
                "encoding": 0
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.*;\nimport java.util.stream.Collectors;\nimport java.text.DecimalFormat;\n\npublic class Shell {\n\n    // public static String info(Shape shape) {\n    //     DecimalFormat df = new DecimalFormat(\"#.00\");\n    //     return String.format(\"%s: A=%s P=%s\", shape.getName(), df.format(shape.getArea()), df.format(shape.getPerimeter()));   \n    // }\n    public static void main(String[] a) {\n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n    \n            var par = line.split(\" \");\n            var cmd = par[0];\n            \n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"show\")) {\n            }\n            else if (cmd.equals(\"circle\")) {\n                // var x = Double.parseDouble(par[1]);\n                // var y = Double.parseDouble(par[2]);\n                // var radius = Double.parseDouble(par[3]);\n            }\n            else if (cmd.equals(\"rect\")) {\n                // var x1 = Double.parseDouble(par[1]);\n                // var y1 = Double.parseDouble(par[2]);\n                // var x2 = Double.parseDouble(par[3]);\n                // var y2 = Double.parseDouble(par[4]);\n            }\n            else if (cmd.equals(\"info\")) {\n            }\n            else {\n                System.out.println(\"Comando inv\u00e1lido\");\n            }\n        }\n    }\n\n    private static Scanner scanner = new Scanner(System.in);\n}\n",
                "encoding": 0
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <memory>\n#include <cmath>\n#include <iomanip>\nusing namespace std;\n\ntemplate <typename CONTAINER, typename FUNC>\nauto map_join(const CONTAINER& c, FUNC f, const string& sep = \", \") {\n    stringstream ss;\n    for (auto it = c.begin(); it != c.end(); ++it) {\n        ss << (it != c.begin() ? sep : \"\");\n        ss << f(*it);\n    }\n    return ss.str();\n}\n\nint main() {\n    // vector<shared_ptr<Shape>> shapes;\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\")  { \n            break;                                  \n        }\n        else if (cmd == \"show\") { \n            // Imprima as formas, uma por linha\n        }\n        else if (cmd == \"circle\") { \n            // Crie um novo circulo e adicione ao vetor\n            // double x{}, y{}, radius{};\n            // ss >> x >> y >> radius;\n        }\n        else if (cmd == \"rect\") {\n            // Crie um retangulo e insira no vetor\n            // double x1{}, y1{}, x2{}, y2{};\n            // ss >> x1 >> y1 >> x2 >> y2;\n        }\n        else if (cmd == \"info\") {\n            // Imprima as informa\u00e7\u00f5es de \u00e1rea e per\u00edmetro de todas as formas\n        }\n        else {\n            cout << \"fail: comando inv\u00e1lido\" << '\\n';\n        }\n    }\n}\n",
                "encoding": 0
            }
        ]
    }
}
