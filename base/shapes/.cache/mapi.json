{
    "title": "@shapes: Utilizando interface em c\u00edrculos e ret\u00e2ngulos",
    "description": "# Utilizando interface em c\u00edrculos e ret\u00e2ngulos\n\n<!-- toch -->\n[Intro](#intro) | [Guide](#guide) | [Shell](#shell) | [Draft](#draft)\n-- | -- | -- | --\n<!-- toch -->\n\n![cover](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/shapes/cover.jpg)\n\n## Intro\n\nO objetivo desta atividade \u00e9 implementar um sistema para gerenciar formas geom\u00e9tricas. Voc\u00ea precisar\u00e1 criar classes para representar pontos, c\u00edrculos e ret\u00e2ngulos.\n\n- **Descri\u00e7\u00e3o**\n  - A interface `Shape` define m\u00e9todos que todas as formas geom\u00e9tricas devem implementar.\n  - A classe `Point2D` representa um ponto no plano bidimensional.\n  - As classes `Circle` e `Rectangle` implementam a interface `Shape` e representam um c\u00edrculo e um ret\u00e2ngulo, respectivamente.\n\n### Interface Shape\n\nA interface `Shape` exige a implementa\u00e7\u00e3o dos seguintes m\u00e9todos (os m\u00e9todos abaixo n\u00e3o s\u00e3o implementadas na classe Shape, apenas nas classes filhas):\n\n- `getArea()`: Retorna a \u00e1rea da forma.\n- `getPerimeter()`: Retorna o per\u00edmetro da forma.\n- `getName()`: Retorna o nome da forma.\n\n### Classe Point2D\n\nA classe `Point2D` representa um ponto no plano bidimensional e possui:\n\n- **Atributos:**\n  - `x`: coordenada x do ponto.\n  - `y`: coordenada y do ponto.\n- **M\u00e9todos:**\n  - `constructor(x: number, y: number)`: Inicializa os atributos x e y.\n  - `toString()`: Retorna a representa\u00e7\u00e3o do ponto no formato `(x, y)`. Exemplo: `(0.00, 0.00)`.\n\n### Classe Circle\n\nA classe `Circle` implementa a interface `Shape` e representa um c\u00edrculo. Deve incluir:\n\n- **Atributos:**\n  - `name`: Nome da forma, que \u00e9 \"Circ\".\n  - `center`: Centro do c\u00edrculo, representado por um `Point2D`.\n  - `radius`: Raio do c\u00edrculo.\n- **M\u00e9todos:**\n  - `constructor(center: Point2D, radius: number)`: Inicializa os atributos center e radius.\n  - `getName()`: Retorna o nome \"Circ\".\n  - `getArea()`: Calcula e retorna a \u00e1rea do c\u00edrculo usando a f\u00f3rmula `\u03c0 * raio\u00b2`.\n  - `getPerimeter()`: Calcula e retorna o per\u00edmetro do c\u00edrculo usando a f\u00f3rmula `2 * \u03c0 * raio`.\n  - `toString()`: Retorna uma string no formato `Circ: C=(x, y), R=radius`.\n\n### Classe Rectangle\n\nA classe `Rectangle` tamb\u00e9m implementa a interface `Shape` e representa um ret\u00e2ngulo. Deve incluir:\n\n- **Atributos:**\n  - `name`: Nome da forma, que \u00e9 \"Rect\".\n  - `p1`: Um v\u00e9rtice do ret\u00e2ngulo (ponto superior esquerdo), representado por um `Point2D`.\n  - `p2`: O v\u00e9rtice oposto do ret\u00e2ngulo (ponto inferior direto), representado por um `Point2D`.\n- **M\u00e9todos:**\n  - `constructor(p1: Point2D, p2: Point2D)`: Inicializa os atributos p1 e p2.\n  - `getName()`: Retorna o nome \"Rect\".\n  - `getArea()`: Calcula e retorna a \u00e1rea do ret\u00e2ngulo usando a f\u00f3rmula `largura * altura`.\n    - `largura` \u00e9 a diferen\u00e7a absoluta entre `x` de `p1` e `p2`.\n    - `altura` \u00e9 a diferen\u00e7a absoluta entre `y` de `p1` e `p2`.\n  - `getPerimeter()`: Calcula e retorna o per\u00edmetro do ret\u00e2ngulo usando a f\u00f3rmula `2 * (largura + altura)`.\n  - `toString()`: Retorna uma string no formato \"Rect: P1=(x1, y1) P2=(x2, y2)\".\n\n### Fun\u00e7\u00e3o principal\n\n- Crie um vetor de shapes para gerenciar.\n- Nas a\u00e7\u00f5es `circle` e `rect`, instancie o objeto adequado e adicione-o ao vetor de shapes.\n\n## Guide\n\n![diagrama](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/shapes/diagrama.png)\n\n## Shell\n\n```sh\n#TEST_CASE creating figures\n$circle 2 3 5\n\n#TEST_CASE showing\n$show\nCirc: C=(2.00, 3.00), R=5.00\n\n#TEST_CASE creating more figures\n$rect 1 1 3 3\n$rect 2 4.53 5 10\n$circle 1 1 1.5\n\n#TEST_CASE showing all\n$show\nCirc: C=(2.00, 3.00), R=5.00\nRect: P1=(1.00, 1.00) P2=(3.00, 3.00)\nRect: P1=(2.00, 4.53) P2=(5.00, 10.00)\nCirc: C=(1.00, 1.00), R=1.50\n\n\n#TEST_CASE showing area and perimeter\n$info\nCirc: A=78.54 P=31.42\nRect: A=4.00 P=8.00\nRect: A=16.41 P=16.94\nCirc: A=7.07 P=9.42\n\n$end\n```\n\n## Draft\n\n<!-- links .cache/draft -->\n- cpp\n  - [shell.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/shapes/.cache/draft/cpp/shell.cpp)\n- java\n  - [Shell.java](https://github.com/qxcodepoo/arcade/blob/master/base/shapes/.cache/draft/java/Shell.java)\n- ts\n  - [shell.ts](https://github.com/qxcodepoo/arcade/blob/master/base/shapes/.cache/draft/ts/shell.ts)\n<!-- links -->\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT creating figures\ncircle 2 3 5\nend\n======== EXPECT\n$circle 2 3 5\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT showing\ncircle 2 3 5\nshow\nend\n======== EXPECT\n$circle 2 3 5\n$show\nCirc: C=(2.00, 3.00), R=5.00\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT creating more figures\ncircle 2 3 5\nshow\nrect 1 1 3 3\nrect 2 4.53 5 10\ncircle 1 1 1.5\nend\n======== EXPECT\n$circle 2 3 5\n$show\nCirc: C=(2.00, 3.00), R=5.00\n$rect 1 1 3 3\n$rect 2 4.53 5 10\n$circle 1 1 1.5\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT showing all\ncircle 2 3 5\nshow\nrect 1 1 3 3\nrect 2 4.53 5 10\ncircle 1 1 1.5\nshow\nend\n======== EXPECT\n$circle 2 3 5\n$show\nCirc: C=(2.00, 3.00), R=5.00\n$rect 1 1 3 3\n$rect 2 4.53 5 10\n$circle 1 1 1.5\n$show\nCirc: C=(2.00, 3.00), R=5.00\nRect: P1=(1.00, 1.00) P2=(3.00, 3.00)\nRect: P1=(2.00, 4.53) P2=(5.00, 10.00)\nCirc: C=(1.00, 1.00), R=1.50\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT showing area and perimeter\ncircle 2 3 5\nshow\nrect 1 1 3 3\nrect 2 4.53 5 10\ncircle 1 1 1.5\nshow\ninfo\nend\n======== EXPECT\n$circle 2 3 5\n$show\nCirc: C=(2.00, 3.00), R=5.00\n$rect 1 1 3 3\n$rect 2 4.53 5 10\n$circle 1 1 1.5\n$show\nCirc: C=(2.00, 3.00), R=5.00\nRect: P1=(1.00, 1.00) P2=(3.00, 3.00)\nRect: P1=(2.00, 4.53) P2=(5.00, 10.00)\nCirc: C=(1.00, 1.00), R=1.50\n$info\nCirc: A=78.54 P=31.42\nRect: A=4.00 P=8.00\nRect: A=16.41 P=16.94\nCirc: A=7.07 P=9.42\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\nfunction main() {\n    // const shapes: Shape[] = [];\n\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(\" \");\n        const cmd = par[0];\n\n        if (cmd == \"end\") {\n            break;\n        }\n        else if (cmd == \"show\") {\n        }\n        else if (cmd == \"circle\") {\n            // const x = parseFloat(par[1]);\n            // const y = parseFloat(par[2]);\n            // const r = parseFloat(par[3]);\n        }\n        else if (cmd == \"rect\") {\n            // const x1 = parseFloat(par[1]);\n            // const y1 = parseFloat(par[2]);\n            // const x2 = parseFloat(par[3]);\n            // const y2 = parseFloat(par[4]);\n        }\n        else if (cmd == \"info\") {\n        }\n        else {\n            console.log(\"fail: invalid command\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.*;\nimport java.util.stream.Collectors;\nimport java.text.DecimalFormat;\n\npublic class Shell {\n\n    // public static String info(Shape shape) {\n    //     DecimalFormat df = new DecimalFormat(\"#.00\");\n    //     return String.format(\"%s: A=%s P=%s\", shape.getName(), df.format(shape.getArea()), df.format(shape.getPerimeter()));   \n    // }\n    public static void main(String[] a) {\n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n    \n            var par = line.split(\" \");\n            var cmd = par[0];\n            \n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"show\")) {\n            }\n            else if (cmd.equals(\"circle\")) {\n                // var x = Double.parseDouble(par[1]);\n                // var y = Double.parseDouble(par[2]);\n                // var radius = Double.parseDouble(par[3]);\n            }\n            else if (cmd.equals(\"rect\")) {\n                // var x1 = Double.parseDouble(par[1]);\n                // var y1 = Double.parseDouble(par[2]);\n                // var x2 = Double.parseDouble(par[3]);\n                // var y2 = Double.parseDouble(par[4]);\n            }\n            else if (cmd.equals(\"info\")) {\n            }\n            else {\n                System.out.println(\"Comando inv\u00e1lido\");\n            }\n        }\n    }\n\n    private static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <memory>\n#include <cmath>\n#include <iomanip>\nusing namespace std;\n\ntemplate <typename CONTAINER, typename FUNC>\nauto map_join(const CONTAINER& c, FUNC f, const string& sep = \", \") {\n    stringstream ss;\n    for (auto it = c.begin(); it != c.end(); ++it) {\n        ss << (it != c.begin() ? sep : \"\");\n        ss << f(*it);\n    }\n    return ss.str();\n}\n\nint main() {\n    // vector<shared_ptr<Shape>> shapes;\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\")  { \n            break;                                  \n        }\n        else if (cmd == \"show\") { \n            // Imprima as formas, uma por linha\n        }\n        else if (cmd == \"circle\") { \n            // Crie um novo circulo e adicione ao vetor\n            // double x{}, y{}, radius{};\n            // ss >> x >> y >> radius;\n        }\n        else if (cmd == \"rect\") {\n            // Crie um retangulo e insira no vetor\n            // double x1{}, y1{}, x2{}, y2{};\n            // ss >> x1 >> y1 >> x2 >> y2;\n        }\n        else if (cmd == \"info\") {\n            // Imprima as informa\u00e7\u00f5es de \u00e1rea e per\u00edmetro de todas as formas\n        }\n        else {\n            cout << \"fail: comando inv\u00e1lido\" << '\\n';\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
