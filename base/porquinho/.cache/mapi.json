{
    "title": "Guardando moedas e itens em um @porquinho",
    "description": "# Guardando moedas e itens em um @porquinho\n\n<!-- toch -->\n[Intro](#intro) | [Draft](#draft) | [Guide](#guide) | [Shell](#shell)\n-- | -- | -- | --\n<!-- toch -->\n\n![cover](cover.jpg)\n\n## Intro\n\nO sistema dever\u00e1:\n\n- Gerenciar um cofrinho do tipo Porquinho capaz de guardar moedas e itens.\n- As moedas devem ser criadas atrav\u00e9s de uma `enum`.\n- Ambos moedas e itens tem um m\u00e9todo getVolume() e getLabel().\n- O volume do cofre incrementa conforme ele recebe itens e moedas.\n- A l\u00f3gica da utiliza\u00e7\u00e3o do cofre \u00e9:\n  - Para inserir moedas e itens o cofre deve estar inteiro.\n  - Para extrair moedas e itens o cofre deve estar quebrado.\n  - Ao quebrar, o volume do porco deve ser zerado e o status de broken deve ser alterado para true.\n  - Ao extrair moedas e itens, os atribuitos `valor` e `itens` devem se tornar listas vazias.\n\n***\n\n## Draft\n\n- [draft.cpp](.cache/draft.cpp)\n- [draft.java](.cache/draft.java)\n- [draft.ts](.cache/draft.ts)\n\n## Guide\n\n![diagrama](diagrama.png)\n\n<!-- load diagrama.puml fenced=ts:filter -->\n\n```ts\n\nclass Coin {\n  - value  : double\n  - volume : int\n  - label  : string\n  __\n  ' static const Coin C10; //c++\n  + {static} C10  : Coin\n  + {static} C25  : Coin\n  + {static} C50  : Coin\n  + {static} C100 : Coin\n  __\n  - Coin(value: double, volume: int, label: string)\n  __\n  + getValue()  : double\n  + getVolume() : int\n  + getLabel()  : string\n  __\n  ' retorna value:volume\n  + toString() : string\n}\n\nclass Item {\n  - label  : string\n  - volume : int\n  __\n  + Item(label : string, volume : int)\n  __\n  + getLabel()  : string\n  + getVolume() : int\n  + setLabel (label  : string)\n  + setVolume(volume : int)\n  __\n  ' retorna label:volume\n  + toString() : String\n}\n\nclass Pig {\n  - broken    : boolean\n\n  - coins     : Array<Coin>\n  - items     : Array<Item>\n\n  - volumeMax : int\n  __\n  \n  ' inicializa o volumeMax\n  + Pig(volumeMax : int)\n  \n  ' se nao estiver quebrado e couber, adicione a moeda ao vetor de moedas\n  + addCoin(coin  : Coin) : boolean\n  \n  ' se n\u00e3o estiver quebrado e couber, adicione o item ao vetor de itens\n  + addItem(item  : Item) : boolean\n  \n  ' se o porco n\u00e3o estiver quebrado, quebre o porco\n  + breakPig() : boolean\n  \n  ' se estiver quebrado, pegue e retorne as moedas\n  ' se n\u00e3o estiver quebrado, retorne um vetor vazio\n  + extractCoins() : Array<Coin>\n  \n  ' se estiver quebrado, pegue e retorne os itens\n  ' se n\u00e3o estiver quebrado, retorne um vetor vazio\n  + extractItems() : Array<Item>\n  \n  ' retorna uma string com uma lista de itens, valor, volume / volumeMax, \n  ' e se o porquinho est\u00e1 quebrado ou n\u00e3o\n  + toString() : String\n  __\n  ' se estiver quebrado\n    ' retorne zero\n  ' se n\u00e3o estiver quebrado\n    ' percorre o vetor de moedas e o vetor de itens somando o volume de cada um\n  + getVolume()    : int\n\n  ' percorre o vetor de moedas somando o valor de cada moeda\n  + getValue()     : double\n\n  ' retorna o volumeMax\n  + getVolumeMax() : int\n\n  ' retorna se o porquinho est\u00e1 quebrado ou n\u00e3o\n  + isBroken()     : boolean\n}\n```\n\n<!-- load -->\n\n***\n\n## Shell\n\n```py\n#__case init\n$init 20\n$show\nstate=intact : coins=[] : items=[] : value=0.00 : volume=0/20\n\n#__case insert\n$addCoin 10\n$addCoin 50\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=4/20\n\n#__case itens\n$addItem ouro 3\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3] : value=0.60 : volume=7/20\n\n$addItem passaporte 2\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n\n#__case failed break\n$extractItems\nfail: you must break the pig first\n[]\n\n$extractCoins\nfail: you must break the pig first\n[]\n\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n\n#__case breaking\n$break\n$show\nstate=broken : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=0/20\n\n#__case getItems\n\n$extractItems\n[ouro:3, passaporte:2]\n\n$show\nstate=broken : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=0/20\n\n#__case getCoins\n\n$extractCoins\n[0.10:1, 0.50:3]\n\n$show\nstate=broken : coins=[] : items=[] : value=0.00 : volume=0/20\n$end\n```\n\n***\n\n```sh\n#__case\n$init 10\n\n$break\n\n$addCoin 10\nfail: the pig is broken\n\n\n$show\nstate=broken : coins=[] : items=[] : value=0.00 : volume=0/10\n\n$addItem bilhete 2\nfail: the pig is broken\n\n$show\nstate=broken : coins=[] : items=[] : value=0.00 : volume=0/10\n\n$end\n```\n\n***\n\n```sh\n#__case full coin\n$init 5\n\n$addCoin 10\n$addCoin 25\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[] : value=0.35 : volume=3/5\n\n$addCoin 50\nfail: the pig is full\n\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[] : value=0.35 : volume=3/5\n\n#__case full item\n$addItem ouro 1\n\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[ouro:1] : value=0.35 : volume=4/5\n\n$addItem pirulito 2\nfail: the pig is full\n\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[ouro:1] : value=0.35 : volume=4/5\n\n$end\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> init\ninit 20\nshow\nend\n========\n$init 20\n$show\nstate=intact : coins=[] : items=[] : value=0.00 : volume=0/20\n$end\n<<<<<<<<\n\n>>>>>>>> insert\ninit 20\nshow\naddCoin 10\naddCoin 50\nshow\nend\n========\n$init 20\n$show\nstate=intact : coins=[] : items=[] : value=0.00 : volume=0/20\n$addCoin 10\n$addCoin 50\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=4/20\n$end\n<<<<<<<<\n\n>>>>>>>> itens\ninit 20\nshow\naddCoin 10\naddCoin 50\nshow\naddItem ouro 3\nshow\naddItem passaporte 2\nshow\nend\n========\n$init 20\n$show\nstate=intact : coins=[] : items=[] : value=0.00 : volume=0/20\n$addCoin 10\n$addCoin 50\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=4/20\n$addItem ouro 3\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3] : value=0.60 : volume=7/20\n$addItem passaporte 2\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$end\n<<<<<<<<\n\n>>>>>>>> failed break\ninit 20\nshow\naddCoin 10\naddCoin 50\nshow\naddItem ouro 3\nshow\naddItem passaporte 2\nshow\nextractItems\nextractCoins\nshow\nend\n========\n$init 20\n$show\nstate=intact : coins=[] : items=[] : value=0.00 : volume=0/20\n$addCoin 10\n$addCoin 50\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=4/20\n$addItem ouro 3\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3] : value=0.60 : volume=7/20\n$addItem passaporte 2\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$extractItems\nfail: you must break the pig first\n[]\n$extractCoins\nfail: you must break the pig first\n[]\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$end\n<<<<<<<<\n\n>>>>>>>> breaking\ninit 20\nshow\naddCoin 10\naddCoin 50\nshow\naddItem ouro 3\nshow\naddItem passaporte 2\nshow\nextractItems\nextractCoins\nshow\nbreak\nshow\nend\n========\n$init 20\n$show\nstate=intact : coins=[] : items=[] : value=0.00 : volume=0/20\n$addCoin 10\n$addCoin 50\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=4/20\n$addItem ouro 3\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3] : value=0.60 : volume=7/20\n$addItem passaporte 2\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$extractItems\nfail: you must break the pig first\n[]\n$extractCoins\nfail: you must break the pig first\n[]\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$break\n$show\nstate=broken : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=0/20\n$end\n<<<<<<<<\n\n>>>>>>>> getItems\ninit 20\nshow\naddCoin 10\naddCoin 50\nshow\naddItem ouro 3\nshow\naddItem passaporte 2\nshow\nextractItems\nextractCoins\nshow\nbreak\nshow\nextractItems\nshow\nend\n========\n$init 20\n$show\nstate=intact : coins=[] : items=[] : value=0.00 : volume=0/20\n$addCoin 10\n$addCoin 50\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=4/20\n$addItem ouro 3\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3] : value=0.60 : volume=7/20\n$addItem passaporte 2\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$extractItems\nfail: you must break the pig first\n[]\n$extractCoins\nfail: you must break the pig first\n[]\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$break\n$show\nstate=broken : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=0/20\n$extractItems\n[ouro:3, passaporte:2]\n$show\nstate=broken : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=0/20\n$end\n<<<<<<<<\n\n>>>>>>>> getCoins\ninit 20\nshow\naddCoin 10\naddCoin 50\nshow\naddItem ouro 3\nshow\naddItem passaporte 2\nshow\nextractItems\nextractCoins\nshow\nbreak\nshow\nextractItems\nshow\nextractCoins\nshow\nend\n========\n$init 20\n$show\nstate=intact : coins=[] : items=[] : value=0.00 : volume=0/20\n$addCoin 10\n$addCoin 50\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=4/20\n$addItem ouro 3\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3] : value=0.60 : volume=7/20\n$addItem passaporte 2\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$extractItems\nfail: you must break the pig first\n[]\n$extractCoins\nfail: you must break the pig first\n[]\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$break\n$show\nstate=broken : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=0/20\n$extractItems\n[ouro:3, passaporte:2]\n$show\nstate=broken : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=0/20\n$extractCoins\n[0.10:1, 0.50:3]\n$show\nstate=broken : coins=[] : items=[] : value=0.00 : volume=0/20\n$end\n<<<<<<<<\n\n>>>>>>>> None%\ninit 10\nbreak\naddCoin 10\nshow\naddItem bilhete 2\nshow\nend\n========\n$init 10\n$break\n$addCoin 10\nfail: the pig is broken\n$show\nstate=broken : coins=[] : items=[] : value=0.00 : volume=0/10\n$addItem bilhete 2\nfail: the pig is broken\n$show\nstate=broken : coins=[] : items=[] : value=0.00 : volume=0/10\n$end\n<<<<<<<<\n\n>>>>>>>> full coin\ninit 5\naddCoin 10\naddCoin 25\nshow\naddCoin 50\nshow\nend\n========\n$init 5\n$addCoin 10\n$addCoin 25\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[] : value=0.35 : volume=3/5\n$addCoin 50\nfail: the pig is full\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[] : value=0.35 : volume=3/5\n$end\n<<<<<<<<\n\n>>>>>>>> full item\ninit 5\naddCoin 10\naddCoin 25\nshow\naddCoin 50\nshow\naddItem ouro 1\nshow\naddItem pirulito 2\nshow\nend\n========\n$init 5\n$addCoin 10\n$addCoin 25\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[] : value=0.35 : volume=3/5\n$addCoin 50\nfail: the pig is full\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[] : value=0.35 : volume=3/5\n$addItem ouro 1\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[ouro:1] : value=0.35 : volume=4/5\n$addItem pirulito 2\nfail: the pig is full\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[ouro:1] : value=0.35 : volume=4/5\n$end\n<<<<<<<<\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
