{
    "title": "@porquinho: Guardando moedas e itens em um cofrinho",
    "description": "# Guardando moedas e itens em um cofrinho\n\n<!-- toch -->\n[Intro](#intro) | [Guide](#guide) | [Draft](#draft) | [Shell](#shell)\n-- | -- | -- | --\n<!-- toch -->\n\n![cover](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/porquinho/cover.jpg)\n\n## Intro\n\nA classe Pig (Porquinho) representa um cofre que permite aos usu\u00e1rios adicionar moedas e itens, que s\u00e3o armazenados com base no volume dispon\u00edvel. O cofre tem uma capacidade m\u00e1xima de volume e pode ser quebrado para extrair o conte\u00fado.\n\n### Responsabilidades\n\n- **Adicionar Moedas e Itens:**\n  - Os usu\u00e1rios podem adicionar moedas e itens ao cofrinho.\n  - A adi\u00e7\u00e3o \u00e9 limitada pela capacidade m\u00e1xima de volume do porquinho.\n\n- **Quebrar o Cofrinho:**\n  - Os usu\u00e1rios podem quebrar o cofrinho para extrair seu conte\u00fado.\n  - Uma vez quebrado, o cofrinho n\u00e3o pode mais receber adi\u00e7\u00f5es.\n\n- **Extrair Moedas e Itens:**\n  - Ap\u00f3s quebrar o cofrinho, os usu\u00e1rios podem extrair as moedas e itens armazenados.\n  - As moedas e itens s\u00e3o removidos do cofrinho e retornados ao usu\u00e1rio.\n\n- **Obter Valor e Volume Total:**\n  - Os usu\u00e1rios podem verificar o valor total das moedas armazenadas no cofrinho.\n  - Tamb\u00e9m podem verificar o volume total ocupado pelos itens e moedas.\n\n## Guide\n\n![diagrama](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/porquinho/diagrama.png)\n\n### Classe Coin\n\n- A classe `Coin` possui os seguintes atributos:\n  - `value`: Valor da moeda.\n  - `volume`: Volume da moeda.\n  - `label`: R\u00f3tulo da moeda.\n- Al\u00e9m disso, a classe possui os seguintes m\u00e9todos:\n  - `toString(): string`: Retorna uma representa\u00e7\u00e3o em string da moeda no formato `f\"{this.value.2f}, {this.volume}\"`\n  - `getValue(): number`: Retorna o valor da moeda.\n  - `getVolume(): number`: Retorna o volume da moeda.\n  - `getLabel(): string`: Retorna o r\u00f3tulo da moeda.\n\n#### M\u00e9todo Est\u00e1tico\n\nA classe `Coin` possui m\u00e9todos est\u00e1ticos para criar inst\u00e2ncias de moedas com valores pr\u00e9-definidos:\n\n```typescript\npublic static C10 = new Coin(0.10, 1, \"C10\");\npublic static C25 = new Coin(0.25, 2, \"C25\");\npublic static C50 = new Coin(0.50, 3, \"C50\");\npublic static C100 = new Coin(1.0, 4, \"C100\");\n```\n\n### Classe Item\n\nA classe `Item` possui os seguintes atributos:\n\n- `label`: R\u00f3tulo do item.\n- `volume`: Volume do item.\n\nAl\u00e9m disso, a classe possui os seguintes m\u00e9todos:\n\n- `getLabel(): string`: Retorna o r\u00f3tulo do item.\n- `getVolume(): number`: Retorna o volume do item.\n- `setVolume(volume: number): void`: Define o volume do item.\n- `setLabel(label: string): void`: Define o r\u00f3tulo do item.\n- `toString(): string`: Retorna uma representa\u00e7\u00e3o em string do item.\n  - Formato de retorno: `label:volume`\n\n### Classe Pig\n\nA classe `Pig` possui os seguintes atributos:\n\n- `items`: Array de itens.\n- `coins`: Array de moedas.\n- `volumeMax`: Volume m\u00e1ximo suportado pela \"cochonilha\".\n- `broken`: Indica se a \"cochonilha\" est\u00e1 quebrada ou n\u00e3o.\n\n1. **Defini\u00e7\u00e3o da Classe Pig:**\n\n   - Definir a classe `Pig` com os atributos `items`, `coins`, `volumeMax` e `broken`.\n   - Implementar o construtor que recebe `volumeMax` como par\u00e2metro e o atribui \u00e0 propriedade `volumeMax`.\n   - Inicializar os arrays `items` e `coins` como vazios.\n   - Inicializar a propriedade `broken` como `false`.\n\n2. **Implementa\u00e7\u00e3o dos M\u00e9todos:**\n\n   - **M\u00e9todo `addCoin(coin: Coin): boolean`**\n     - Aiciona uma moeda ao vetor de moedas.\n     - Par\u00e2metros:\n       - `coin`: Moeda a ser adicionada.\n     - Retorna `true` se a adi\u00e7\u00e3o for bem-sucedida, caso contr\u00e1rio, retorna `false`.\n     - Erro: `fail: the pig is broken` se o porquinho estiver quebrado.\n     - Erro: `fail: the pig is full` se o porquinho estiver cheio.\n\n   - **M\u00e9todo `addItem(item: Item): boolean`**\n     - Adiciona um item ao vetor de itens.\n     - Par\u00e2metros:\n       - `item`: Item a ser adicionado.\n     - Retorna `true` se a adi\u00e7\u00e3o for bem-sucedida, caso contr\u00e1rio, retorna `false`.\n     - Erro: `fail: the pig is broken` se o porquinho estiver quebrado.\n     - Erro: `fail: the pig is full` se o porquinho estiver cheio.\n\n   - **M\u00e9todo `getVolume(): number`**\n     - Retorna o volume total ocupado pelo conte\u00fado do porquinho.\n         **Passos:**\n\n    1. **Verifica\u00e7\u00e3o de Estado:**\n       - Verifica se o porquinho est\u00e1 quebrada.\n         - Se estiver quebrado, retorna volume 0.\n\n    2. **C\u00e1lculo do Volume:**\n       - Inicializa a vari\u00e1vel `volume` com valor 0.\n       - Percorre o array de itens e adiciona o volume de cada item \u00e0 vari\u00e1vel `volume`.\n       - Percorre o array de moedas e adiciona o volume de cada moeda \u00e0 vari\u00e1vel `volume`.\n       - Retorna o valor total de `volume`.\n\n   - **M\u00e9todo `getValue(): number`**\n     - Retorna o valor total das moedas no porquinho.\n     **Passos:**\n\n    1. **C\u00e1lculo do Valor:**\n       - Inicializa a vari\u00e1vel `value` com valor 0.\n       - Percorre o array de moedas e adiciona o valor de cada moeda \u00e0 vari\u00e1vel `value`.\n       - Retorna o valor total de `value`.\n\n   - **M\u00e9todo `breakPig(): boolean`**\n     - Quebra o porquinho, tornando-o inutiliz\u00e1vel.\n     - Define a propriedade `broken` como `true`.\n     - Retorna `true` se a quebra for bem-sucedida, caso contr\u00e1rio, retorna `false`.\n     - Erro: `fail: the pig is already broken` se o porquinho j\u00e1 estiver quebrado.\n\n   - **M\u00e9todo `extractCoins(): Coin[]`**\n     - Remove e retorna todas as moedas do porquinho.\n     - Retorna um array com todas as moedas removidas.\n     - Erro: `fail: you must break the pig first` se o porquinho n\u00e3o estiver quebrado.\n\n   - **M\u00e9todo `extractItems(): Item[]`**\n     - Remove e retorna todos os itens do porquinho.\n     - Retorna um array com todos os itens removidos.\n     - Erro: `fail: you must break the pig first` se o porquinho n\u00e3o estiver quebrado.\n\n   - **M\u00e9todo `toString(): string`**\n     - Retorna uma representa\u00e7\u00e3o em string do estado atual do porquinho, incluindo se est\u00e1 intacto ou quebrado, a lista de moedas e itens armazenados, o valor total e o volume ocupado.\n     - Formato de retorno: `state=estado : coins=[moedas] : items=[itens] : value=valor : volume=volumeAtual/volumeMaximo`.\n\n## Draft\n\n<!-- links .cache/draft -->\n- [Solver.java](https://github.com/qxcodepoo/arcade/blob/master/base/porquinho/.cache/draft/Solver.java)\n- cpp\n  - [shell.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/porquinho/.cache/draft/cpp/shell.cpp)\n- java\n  - [Shell.java](https://github.com/qxcodepoo/arcade/blob/master/base/porquinho/.cache/draft/java/Shell.java)\n- ts\n  - [shell.ts](https://github.com/qxcodepoo/arcade/blob/master/base/porquinho/.cache/draft/ts/shell.ts)\n<!-- links -->\n\n## Shell\n\n```py\n#TEST_CASE init\n$init 20\n$show\nstate=intact : coins=[] : items=[] : value=0.00 : volume=0/20\n\n#TEST_CASE insert\n$addCoin 10\n$addCoin 50\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=4/20\n\n#TEST_CASE itens\n$addItem ouro 3\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3] : value=0.60 : volume=7/20\n\n$addItem passaporte 2\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n\n#TEST_CASE failed break\n$extractItems\nfail: you must break the pig first\n[]\n\n$extractCoins\nfail: you must break the pig first\n[]\n\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n\n#TEST_CASE breaking\n$break\n$show\nstate=broken : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=0/20\n\n#TEST_CASE getItems\n\n$extractItems\n[ouro:3, passaporte:2]\n\n$show\nstate=broken : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=0/20\n\n#TEST_CASE getCoins\n\n$extractCoins\n[0.10:1, 0.50:3]\n\n$show\nstate=broken : coins=[] : items=[] : value=0.00 : volume=0/20\n$end\n```\n\n***\n\n```sh\n#TEST_CASE\n$init 10\n\n$break\n\n$addCoin 10\nfail: the pig is broken\n\n\n$show\nstate=broken : coins=[] : items=[] : value=0.00 : volume=0/10\n\n$addItem bilhete 2\nfail: the pig is broken\n\n$show\nstate=broken : coins=[] : items=[] : value=0.00 : volume=0/10\n\n$end\n```\n\n***\n\n```sh\n#TEST_CASE full coin\n$init 5\n\n$addCoin 10\n$addCoin 25\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[] : value=0.35 : volume=3/5\n\n$addCoin 50\nfail: the pig is full\n\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[] : value=0.35 : volume=3/5\n\n#TEST_CASE full item\n$addItem ouro 1\n\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[ouro:1] : value=0.35 : volume=4/5\n\n$addItem pirulito 2\nfail: the pig is full\n\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[ouro:1] : value=0.35 : volume=4/5\n\n$end\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT init\ninit 20\nshow\nend\n======== EXPECT\n$init 20\n$show\nstate=intact : coins=[] : items=[] : value=0.00 : volume=0/20\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT insert\ninit 20\nshow\naddCoin 10\naddCoin 50\nshow\nend\n======== EXPECT\n$init 20\n$show\nstate=intact : coins=[] : items=[] : value=0.00 : volume=0/20\n$addCoin 10\n$addCoin 50\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=4/20\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT itens\ninit 20\nshow\naddCoin 10\naddCoin 50\nshow\naddItem ouro 3\nshow\naddItem passaporte 2\nshow\nend\n======== EXPECT\n$init 20\n$show\nstate=intact : coins=[] : items=[] : value=0.00 : volume=0/20\n$addCoin 10\n$addCoin 50\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=4/20\n$addItem ouro 3\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3] : value=0.60 : volume=7/20\n$addItem passaporte 2\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT failed break\ninit 20\nshow\naddCoin 10\naddCoin 50\nshow\naddItem ouro 3\nshow\naddItem passaporte 2\nshow\nextractItems\nextractCoins\nshow\nend\n======== EXPECT\n$init 20\n$show\nstate=intact : coins=[] : items=[] : value=0.00 : volume=0/20\n$addCoin 10\n$addCoin 50\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=4/20\n$addItem ouro 3\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3] : value=0.60 : volume=7/20\n$addItem passaporte 2\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$extractItems\nfail: you must break the pig first\n[]\n$extractCoins\nfail: you must break the pig first\n[]\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT breaking\ninit 20\nshow\naddCoin 10\naddCoin 50\nshow\naddItem ouro 3\nshow\naddItem passaporte 2\nshow\nextractItems\nextractCoins\nshow\nbreak\nshow\nend\n======== EXPECT\n$init 20\n$show\nstate=intact : coins=[] : items=[] : value=0.00 : volume=0/20\n$addCoin 10\n$addCoin 50\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=4/20\n$addItem ouro 3\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3] : value=0.60 : volume=7/20\n$addItem passaporte 2\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$extractItems\nfail: you must break the pig first\n[]\n$extractCoins\nfail: you must break the pig first\n[]\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$break\n$show\nstate=broken : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=0/20\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT getItems\ninit 20\nshow\naddCoin 10\naddCoin 50\nshow\naddItem ouro 3\nshow\naddItem passaporte 2\nshow\nextractItems\nextractCoins\nshow\nbreak\nshow\nextractItems\nshow\nend\n======== EXPECT\n$init 20\n$show\nstate=intact : coins=[] : items=[] : value=0.00 : volume=0/20\n$addCoin 10\n$addCoin 50\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=4/20\n$addItem ouro 3\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3] : value=0.60 : volume=7/20\n$addItem passaporte 2\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$extractItems\nfail: you must break the pig first\n[]\n$extractCoins\nfail: you must break the pig first\n[]\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$break\n$show\nstate=broken : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=0/20\n$extractItems\n[ouro:3, passaporte:2]\n$show\nstate=broken : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=0/20\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT getCoins\ninit 20\nshow\naddCoin 10\naddCoin 50\nshow\naddItem ouro 3\nshow\naddItem passaporte 2\nshow\nextractItems\nextractCoins\nshow\nbreak\nshow\nextractItems\nshow\nextractCoins\nshow\nend\n======== EXPECT\n$init 20\n$show\nstate=intact : coins=[] : items=[] : value=0.00 : volume=0/20\n$addCoin 10\n$addCoin 50\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=4/20\n$addItem ouro 3\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3] : value=0.60 : volume=7/20\n$addItem passaporte 2\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$extractItems\nfail: you must break the pig first\n[]\n$extractCoins\nfail: you must break the pig first\n[]\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$break\n$show\nstate=broken : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=0/20\n$extractItems\n[ouro:3, passaporte:2]\n$show\nstate=broken : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=0/20\n$extractCoins\n[0.10:1, 0.50:3]\n$show\nstate=broken : coins=[] : items=[] : value=0.00 : volume=0/20\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\ninit 10\nbreak\naddCoin 10\nshow\naddItem bilhete 2\nshow\nend\n======== EXPECT\n$init 10\n$break\n$addCoin 10\nfail: the pig is broken\n$show\nstate=broken : coins=[] : items=[] : value=0.00 : volume=0/10\n$addItem bilhete 2\nfail: the pig is broken\n$show\nstate=broken : coins=[] : items=[] : value=0.00 : volume=0/10\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT full coin\ninit 5\naddCoin 10\naddCoin 25\nshow\naddCoin 50\nshow\nend\n======== EXPECT\n$init 5\n$addCoin 10\n$addCoin 25\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[] : value=0.35 : volume=3/5\n$addCoin 50\nfail: the pig is full\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[] : value=0.35 : volume=3/5\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT full item\ninit 5\naddCoin 10\naddCoin 25\nshow\naddCoin 50\nshow\naddItem ouro 1\nshow\naddItem pirulito 2\nshow\nend\n======== EXPECT\n$init 5\n$addCoin 10\n$addCoin 25\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[] : value=0.35 : volume=3/5\n$addCoin 50\nfail: the pig is full\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[] : value=0.35 : volume=3/5\n$addItem ouro 1\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[ouro:1] : value=0.35 : volume=4/5\n$addItem pirulito 2\nfail: the pig is full\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[ouro:1] : value=0.35 : volume=4/5\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\nfunction main() {\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(\" \");\n        const cmd = par[0];\n\n        if (cmd == \"end\") {\n            break;\n        }\n        else if (cmd == \"init\") {\n            // const volume = parseInt(par[1]);\n        }\n        else if (cmd == \"show\") {\n        }\n        else if (cmd == \"addCoin\") {\n            // const value = parseInt(par[1]);\n        }\n        else if (cmd == \"addItem\") {\n            // const label = par[1];\n            // const volume = parseInt(par[2]);\n        }\n        else if (cmd == \"break\") {\n        }\n        else if (cmd == \"extractCoins\") {\n        }\n        else if (cmd == \"extractItems\") {\n        }\n        else {\n            console.log(\"fail: invalid command\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.StringJoiner;\nimport java.util.stream.Collectors;\n\npublic class Shell {\n    public static void main(String[] _args) {\n\n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"init\")) {\n                // int maxVolume = Integer.parseInt(par[1]);\n            }\n            else if (cmd.equals(\"show\")) {\n                // Imprima o estado do porquinho\n            }\n            else if (cmd.equals(\"addCoin\")) {\n                // var coin = par[1];\n            }\n            else if (cmd.equals(\"addItem\")) {\n                // var item = par[1];\n                // var volume = Integer.parseInt(par[2]);\n            }\n            else if (cmd.equals(\"break\")) {\n                // pig.breakPig();\n            }\n            else if (cmd.equals(\"extractCoins\")) {\n                // Obtenha as moedas usando o m\u00e9todo extractCoins\n                // Imprima as moedas obtidas\n            }\n            else if (cmd.equals(\"extractItems\")) {\n                // Obtenha os itens usando o m\u00e9todo extractItems\n                // Imprima os itens obtidos\n            }\n            else {\n                System.out.println(\"fail: invalid command\");\n            }\n        }\n    }\n\n    public static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include <sstream>\n#include <utility>\n#include <iomanip>\n#include <memory>\nusing namespace std;\n\ntemplate <typename CONTAINER, typename FN>\nstring map_join(const CONTAINER& container, FN fn, string sep = \", \", string prefix = \"[\", string suffix = \"]\") {\n    stringstream ss;\n    for (auto it = container.begin(); it != container.end(); ++it) {\n        ss << (it != container.begin() ? sep : \"\") << fn(*it);\n    }\n    return prefix + ss.str() + suffix;\n}\n\nint main() {\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"init\") {\n            // int volumeMax;\n            // ss >> volumeMax;\n        } else if (cmd == \"show\") {\n        } else if (cmd == \"break\") {\n        } else if (cmd == \"addCoin\") {\n            // string label;\n            // ss >> label;\n        } else if (cmd == \"addItem\") {\n            // string label;\n            // int volume;\n            // ss >> label >> volume;\n        } else if (cmd == \"extractItems\") {\n            // Obtenha os itens com o m\u00e9todo extractItems\n            // e imprima os itens obtidos\n        } else if (cmd == \"extractCoins\") {\n            // Obtenha as moedas com o m\u00e9todo extractCoins\n            // e imprima as moedas obtidas\n        } else {\n            cout << \"fail: invalid command\\n\";\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
