{
    "title": "@calculadora: Uma calculadora com bateria",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@calculadora: Uma calculadora com bateria</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Uma calculadora com bateria</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#cheat\">Cheat</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"cover\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/calculadora/cover.jpg\" /></p>\n<h2>Intro</h2>\n<p>O objetivo dessa atividade \u00e9 implementar uma calculadora que utiliza bateria. Se h\u00e1 bateria, ela executa opera\u00e7\u00f5es de soma e divis\u00e3o. \u00c9 poss\u00edvel tamb\u00e9m mostrar a quantidade de bateria e recarregar a calculadora. Ela avisa quando est\u00e1 sem bateria e se h\u00e1 tentativa de divis\u00e3o por 0.</p>\n<ul>\n<li>Descri\u00e7\u00e3o<ul>\n<li>A calculadora possui um display <code>display</code> e uma bateria <code>battery</code>. Ela guarda o valor atual da bateria e o valor m\u00e1ximo <code>batteryMax</code>.</li>\n<li>O display \u00e9 onde o resultado das opera\u00e7\u00f5es \u00e9 armazenado.</li>\n<li>A bateria \u00e9 a quantidade de energia que a calculadora possui.</li>\n<li>Cada opera\u00e7\u00e3o gasta um ponto de bateria.</li>\n<li>A calculadora n\u00e3o pode realizar opera\u00e7\u00f5es se n\u00e3o houver bateria.</li>\n<li>A calculadora n\u00e3o pode realizar divis\u00f5es por zero.</li>\n</ul>\n</li>\n<li>Construtor<ul>\n<li>Requisi\u00e7\u00e3o <code>$init batteryMax</code></li>\n<li>Receba o m\u00e1ximo de bateria como par\u00e2metro no construtor da Calculadora.</li>\n</ul>\n</li>\n<li><code>toString</code><ul>\n<li>Deve ser invocado na requisi\u00e7\u00e3o <code>$show</code>.</li>\n<li>Retorna a representa\u00e7\u00e3o da calculadora no formato:<ul>\n<li><code>display = {display:.2f}, battery = {battery}\"</code></li>\n<li>Exemplo: <code>display = 0.00, battery = 0</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Recarregar<ul>\n<li>Requisi\u00e7\u00e3o: <code>$charge increment</code></li>\n<li>Adiciona carga \u00e0 bateria, mas n\u00e3o pode ultrapassar o limite.</li>\n</ul>\n</li>\n<li>Somar<ul>\n<li>Requisi\u00e7\u00e3o: <code>$sum a b</code></li>\n<li>Soma dois valores e guarda no display.</li>\n<li>Se n\u00e3o houver bateria, emita a mensagem <code>fail: bateria insuficiente</code>.</li>\n</ul>\n</li>\n<li>Divis\u00e3o<ul>\n<li>Requisi\u00e7\u00e3o: <code>$div den num</code></li>\n<li>Divide dois valores e guarda no display.</li>\n<li>Se n\u00e3o houver bateria, emita a mensagem <code>fail: bateria insuficiente</code>.</li>\n<li>Se houver divis\u00e3o por zero, emita a mensagem <code>fail: divisao por zero</code>.</li>\n</ul>\n</li>\n</ul>\n<h2>Guide</h2>\n<p><img alt=\"diagrama\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/calculadora/diagrama.png\" /></p>\n<p><a href=\"https://youtu.be/oZYwuP3CKJM?si=uVdiZn8tXbwUGH41\"><img alt=\"youtube icon\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/calculadora/../youguide.png\" /></a></p>\n<ul>\n<li>Como formatar com duas casas decimais em diferentes linguagens.</li>\n</ul>\n<div class=\"language-java highlight\"><pre><span></span><code><span class=\"c1\">// java</span>\n<span class=\"kd\">public</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"nf\">toString</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Dependendo da configura\u00e7\u00e3o do sistema, o java usa v\u00edrgula nos decimais. </span>\n<span class=\"w\">    </span><span class=\"c1\">// Para contornar isso e gerar sempre com ponto, usamos a classe Decimal Format</span>\n<span class=\"w\">    </span><span class=\"n\">DecimalFormat</span><span class=\"w\"> </span><span class=\"n\">df</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">DecimalFormat</span><span class=\"p\">(</span><span class=\"s\">&quot;0.00&quot;</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"p\">.</span><span class=\"na\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;display = %s, battery = %d&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">df</span><span class=\"p\">.</span><span class=\"na\">format</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"na\">display</span><span class=\"p\">).</span><span class=\"na\">replace</span><span class=\"p\">(</span><span class=\"sc\">&#39;,&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;.&#39;</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"na\">battery</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">//ts</span>\n<span class=\"n\">toString</span><span class=\"p\">():</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// o typescript usa o modelo crase ${} para string de substitui\u00e7\u00e3o</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">$</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"na\">display</span><span class=\"p\">.</span><span class=\"na\">toFixed</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)},</span><span class=\"w\"> </span><span class=\"n\">battery</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">$</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"na\">battery</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">//cpp</span>\n<span class=\"nl\">std</span><span class=\"p\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"nf\">str</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">stringstream</span><span class=\"w\"> </span><span class=\"n\">ss</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">ss</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">fixed</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">setprecision</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;display = &quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;, battery = &quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">battery</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">ss</span><span class=\"p\">.</span><span class=\"na\">str</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h2>Shell</h2>\n<h3>Primeira simula\u00e7\u00e3o</h3>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE iniciar mostrar e recarregar</span>\n\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$show</span>\n<span class=\"nv\">display</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0</span>.00,<span class=\"w\"> </span><span class=\"nv\">battery</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE charge</span>\n\n<span class=\"nv\">$charge</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$show</span>\n<span class=\"nv\">display</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0</span>.00,<span class=\"w\"> </span><span class=\"nv\">battery</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$charge</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nv\">$show</span>\n<span class=\"nv\">display</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0</span>.00,<span class=\"w\"> </span><span class=\"nv\">battery</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">4</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE boundary</span>\n\n<span class=\"nv\">$charge</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nv\">$show</span>\n<span class=\"nv\">display</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0</span>.00,<span class=\"w\"> </span><span class=\"nv\">battery</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">5</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE reset</span>\n\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$charge</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nv\">$show</span>\n<span class=\"nv\">display</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0</span>.00,<span class=\"w\"> </span><span class=\"nv\">battery</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nv\">$charge</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$show</span>\n<span class=\"nv\">display</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0</span>.00,<span class=\"w\"> </span><span class=\"nv\">battery</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">4</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"nv\">$end</span>\n</code></pre></div>\n<h3>Segunda simula\u00e7\u00e3o</h3>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE somando</span>\n\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nv\">$charge</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nv\">$sum</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$show</span>\n<span class=\"nv\">display</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">7</span>.00,<span class=\"w\"> </span><span class=\"nv\">battery</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE gastando bateria</span>\n\n<span class=\"nv\">$sum</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$show</span>\n<span class=\"nv\">display</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">5</span>.00,<span class=\"w\"> </span><span class=\"nv\">battery</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE sem bateria</span>\n\n<span class=\"nv\">$sum</span><span class=\"w\"> </span>-4<span class=\"w\"> </span>-1\nfail:<span class=\"w\"> </span>bateria<span class=\"w\"> </span>insuficiente\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE recarregando</span>\n\n<span class=\"nv\">$charge</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nv\">$show</span>\n<span class=\"nv\">display</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">5</span>.00,<span class=\"w\"> </span><span class=\"nv\">battery</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nv\">$sum</span><span class=\"w\"> </span>-4<span class=\"w\"> </span>-2\n<span class=\"nv\">$show</span>\n<span class=\"nv\">display</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>-6.00,<span class=\"w\"> </span><span class=\"nv\">battery</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"nv\">$end</span>\n</code></pre></div>\n<h3>Terceira simula\u00e7\u00e3o</h3>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE dividindo</span>\n\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$charge</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$div</span><span class=\"w\"> </span><span class=\"m\">6</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$show</span>\n<span class=\"nv\">display</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">2</span>.00,<span class=\"w\"> </span><span class=\"nv\">battery</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">2</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE dividindo por zero gastando bateria</span>\n\n<span class=\"nv\">$div</span><span class=\"w\"> </span><span class=\"m\">7</span><span class=\"w\"> </span><span class=\"m\">0</span>\nfail:<span class=\"w\"> </span>divisao<span class=\"w\"> </span>por<span class=\"w\"> </span>zero\n<span class=\"nv\">$show</span>\n<span class=\"nv\">display</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">2</span>.00,<span class=\"w\"> </span><span class=\"nv\">battery</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE gastando bateria</span>\n\n<span class=\"nv\">$div</span><span class=\"w\"> </span><span class=\"m\">7</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nv\">$div</span><span class=\"w\"> </span><span class=\"m\">10</span><span class=\"w\"> </span><span class=\"m\">2</span>\nfail:<span class=\"w\"> </span>bateria<span class=\"w\"> </span>insuficiente\n<span class=\"nv\">$show</span>\n<span class=\"nv\">display</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">3</span>.50,<span class=\"w\"> </span><span class=\"nv\">battery</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"nv\">$end</span>\n</code></pre></div>\n<h2>Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/calculadora/.cache/draft/cpp/shell.cpp\">shell.cpp</a></li>\n</ul>\n</li>\n<li>java<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/calculadora/.cache/draft/java/Shell.java\">Shell.java</a></li>\n</ul>\n</li>\n<li>ts<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/calculadora/.cache/draft/ts/shell.ts\">shell.ts</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n\n<h2>Cheat</h2>\n<!-- links .cache/cheat -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/calculadora/.cache/cheat/cpp/shell.cpp\">shell.cpp</a></li>\n</ul>\n</li>\n<li>java<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/calculadora/.cache/cheat/java/Shell.java\">Shell.java</a></li>\n</ul>\n</li>\n<li>ts<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/calculadora/.cache/cheat/ts/shell.ts\">shell.ts</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT iniciar mostrar e recarregar\ninit 5\nshow\nend\n======== EXPECT\n$init 5\n$show\ndisplay = 0.00, battery = 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT charge\ninit 5\nshow\ncharge 3\nshow\ncharge 1\nshow\nend\n======== EXPECT\n$init 5\n$show\ndisplay = 0.00, battery = 0\n$charge 3\n$show\ndisplay = 0.00, battery = 3\n$charge 1\n$show\ndisplay = 0.00, battery = 4\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT boundary\ninit 5\nshow\ncharge 3\nshow\ncharge 1\nshow\ncharge 2\nshow\nend\n======== EXPECT\n$init 5\n$show\ndisplay = 0.00, battery = 0\n$charge 3\n$show\ndisplay = 0.00, battery = 3\n$charge 1\n$show\ndisplay = 0.00, battery = 4\n$charge 2\n$show\ndisplay = 0.00, battery = 5\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT reset\ninit 5\nshow\ncharge 3\nshow\ncharge 1\nshow\ncharge 2\nshow\ninit 4\ncharge 2\nshow\ncharge 3\nshow\nend\n======== EXPECT\n$init 5\n$show\ndisplay = 0.00, battery = 0\n$charge 3\n$show\ndisplay = 0.00, battery = 3\n$charge 1\n$show\ndisplay = 0.00, battery = 4\n$charge 2\n$show\ndisplay = 0.00, battery = 5\n$init 4\n$charge 2\n$show\ndisplay = 0.00, battery = 2\n$charge 3\n$show\ndisplay = 0.00, battery = 4\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT somando\ninit 2\ncharge 2\nsum 4 3\nshow\nend\n======== EXPECT\n$init 2\n$charge 2\n$sum 4 3\n$show\ndisplay = 7.00, battery = 1\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT gastando bateria\ninit 2\ncharge 2\nsum 4 3\nshow\nsum 2 3\nshow\nend\n======== EXPECT\n$init 2\n$charge 2\n$sum 4 3\n$show\ndisplay = 7.00, battery = 1\n$sum 2 3\n$show\ndisplay = 5.00, battery = 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT sem bateria\ninit 2\ncharge 2\nsum 4 3\nshow\nsum 2 3\nshow\nsum -4 -1\nend\n======== EXPECT\n$init 2\n$charge 2\n$sum 4 3\n$show\ndisplay = 7.00, battery = 1\n$sum 2 3\n$show\ndisplay = 5.00, battery = 0\n$sum -4 -1\nfail: bateria insuficiente\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT recarregando\ninit 2\ncharge 2\nsum 4 3\nshow\nsum 2 3\nshow\nsum -4 -1\ncharge 1\nshow\nsum -4 -2\nshow\nend\n======== EXPECT\n$init 2\n$charge 2\n$sum 4 3\n$show\ndisplay = 7.00, battery = 1\n$sum 2 3\n$show\ndisplay = 5.00, battery = 0\n$sum -4 -1\nfail: bateria insuficiente\n$charge 1\n$show\ndisplay = 5.00, battery = 1\n$sum -4 -2\n$show\ndisplay = -6.00, battery = 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dividindo\ninit 3\ncharge 3\ndiv 6 3\nshow\nend\n======== EXPECT\n$init 3\n$charge 3\n$div 6 3\n$show\ndisplay = 2.00, battery = 2\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dividindo por zero gastando bateria\ninit 3\ncharge 3\ndiv 6 3\nshow\ndiv 7 0\nshow\nend\n======== EXPECT\n$init 3\n$charge 3\n$div 6 3\n$show\ndisplay = 2.00, battery = 2\n$div 7 0\nfail: divisao por zero\n$show\ndisplay = 2.00, battery = 1\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT gastando bateria\ninit 3\ncharge 3\ndiv 6 3\nshow\ndiv 7 0\nshow\ndiv 7 2\ndiv 10 2\nshow\nend\n======== EXPECT\n$init 3\n$charge 3\n$div 6 3\n$show\ndisplay = 2.00, battery = 2\n$div 7 0\nfail: divisao por zero\n$show\ndisplay = 2.00, battery = 1\n$div 7 2\n$div 10 2\nfail: bateria insuficiente\n$show\ndisplay = 3.50, battery = 0\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "function input() { return \"\"; }\nexport {};\n\nfunction main() {\n    // let calc = new Calculator(0);\n\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(\" \");\n        const cmd = par[0];\n        if (cmd == \"end\") {\n            break;\n        } \n        else if (cmd == \"init\") {\n            // CHAME O CONSTRUTOR AQUI\n            // const batteryMax = parseInt(par[1]);\n        } \n        else if (cmd == \"charge\") {\n            // RECARREGAR A BATERIA\n            // const value = parseInt(par[1]);\n        } \n        else if (cmd == \"sum\") {\n            // SOMAR\n            // const a = parseInt(par[1]);\n            // const b = parseInt(par[2]);\n        } \n        else if (cmd == \"div\") {\n            // DIVIDIR\n            // const num = parseInt(par[1]);\n            // const den = parseInt(par[2]);\n        } \n        else if (cmd == \"show\") {\n            // MOSTRAR\n        } \n        else {\n            console.log(\"fail: comando invalido\");\n        }\n    }\n}\n\nmain()\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.*;\nimport java.text.DecimalFormat;\n\n\npublic class Shell {\n\n    public static void main(String[] args) {\n        // Calculator calculator = new Calculator(0);\n        \n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"init\")) {\n                // CHAME O CONSTRUTOR\n                // int batteryMax = Integer.parseInt(par[1]);\n            } \n            else if (cmd.equals(\"show\")) {\n                // MOSTRAR\n            } \n            else if (cmd.equals(\"charge\")) {\n                // RECARREGAR A BATERIA\n                // int value = Integer.parseInt(par[1]);\n            } \n            else if (cmd.equals(\"sum\")) {\n                // SOMAR\n                // int a = Integer.parseInt(par[1]);\n                // int b = Integer.parseInt(par[2]);\n            } \n            else if (cmd.equals(\"div\")) {\n                // DIVIDIR\n                // int num = Integer.parseInt(par[1]);\n                // int den = Integer.parseInt(par[2]);\n            } \n            else {\n                System.out.println(\"fail: comando invalido\");\n            }\n        }\n    }\n\n    private static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream> // fixed, cout, endl, string\n#include <sstream> // stringstream\n#include <iomanip> // setprecision\nusing namespace std;\n\nint main() {\n    // CRIE SUA CALCULADORA AQUI\n\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << '\\n';\n\n        stringstream par(line);\n        par >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } \n        else if (cmd == \"init\") {\n            // SUBSTITUA A CALCULADORA UTILIZANDO O CONSTRUTOR\n            // int batteryMax {};\n            // par >> batteryMax;\n        } \n        else if (cmd == \"show\") {\n            // MOSTRE A CALCULADORA\n        } \n        else if (cmd == \"charge\") {\n            // RECARREGAR\n            // int increment {};\n            // par >> increment;\n        } \n        else if (cmd == \"sum\") {\n            // SOMAR\n            // int a {}, b {};\n            // par >> a >> b;\n        } \n        else if (cmd == \"div\") {\n            // DIVIDIR\n            // int num {}, den {};\n            // par >> num >> den;\n        } \n        else {\n            cout << \"fail: comando invalido\" << endl;\n        }\n    }\n\n\n}\n",
                "type": "show"
            }
        ]
    }
}
