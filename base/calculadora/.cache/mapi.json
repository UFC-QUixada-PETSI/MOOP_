{
    "title": "@calculadora: Uma calculadora com bateria",
    "description": "# Uma calculadora com bateria\n\n<!-- toch -->\n[Intro](#intro) | [Guide](#guide) | [Shell](#shell) | [Draft](#draft) | [Cheat](#cheat)\n-- | -- | -- | -- | --\n<!-- toch -->\n\n![cover](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/calculadora/cover.jpg)\n\n## Intro\n\nO objetivo dessa atividade \u00e9 implementar uma calculadora que utiliza bateria. Se h\u00e1 bateria, ela executa opera\u00e7\u00f5es de soma e divis\u00e3o. \u00c9 poss\u00edvel tamb\u00e9m mostrar a quantidade de bateria e recarregar a calculadora. Ela avisa quando est\u00e1 sem bateria e se h\u00e1 tentativa de divis\u00e3o por 0.\n\n- Descri\u00e7\u00e3o\n  - A calculadora possui um display `display` e uma bateria `battery`. Ela guarda o valor atual da bateria e o valor m\u00e1ximo `batteryMax`.\n  - O display \u00e9 onde o resultado das opera\u00e7\u00f5es \u00e9 armazenado.\n  - A bateria \u00e9 a quantidade de energia que a calculadora possui.\n  - Cada opera\u00e7\u00e3o gasta um ponto de bateria.\n  - A calculadora n\u00e3o pode realizar opera\u00e7\u00f5es se n\u00e3o houver bateria.\n  - A calculadora n\u00e3o pode realizar divis\u00f5es por zero.\n- Construtor\n  - Requisi\u00e7\u00e3o `$init batteryMax`\n  - Receba o m\u00e1ximo de bateria como par\u00e2metro no construtor da Calculadora.\n- `toString`\n  - Deve ser invocado na requisi\u00e7\u00e3o `$show`.\n  - Retorna a representa\u00e7\u00e3o da calculadora no formato:\n    - `display = {display:.2f}, battery = {battery}\"`\n    - Exemplo: `display = 0.00, battery = 0`\n- Recarregar\n  - Requisi\u00e7\u00e3o: `$charge increment`\n  - Adiciona carga \u00e0 bateria, mas n\u00e3o pode ultrapassar o limite.\n- Somar\n  - Requisi\u00e7\u00e3o: `$sum a b`\n  - Soma dois valores e guarda no display.\n  - Se n\u00e3o houver bateria, emita a mensagem `fail: bateria insuficiente`.\n- Divis\u00e3o\n  - Requisi\u00e7\u00e3o: `$div den num`\n  - Divide dois valores e guarda no display.\n  - Se n\u00e3o houver bateria, emita a mensagem `fail: bateria insuficiente`.\n  - Se houver divis\u00e3o por zero, emita a mensagem `fail: divisao por zero`.\n\n## Guide\n\n![diagrama](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/calculadora/diagrama.png)\n\n[![youtube icon](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/calculadora/../youguide.png)](https://youtu.be/oZYwuP3CKJM?si=uVdiZn8tXbwUGH41)\n\n- Como formatar com duas casas decimais em diferentes linguagens.\n\n```java\n// java\npublic String toString() {\n    // Dependendo da configura\u00e7\u00e3o do sistema, o java usa v\u00edrgula nos decimais. \n    // Para contornar isso e gerar sempre com ponto, usamos a classe Decimal Format\n    DecimalFormat df = new DecimalFormat(\"0.00\");\n    return String.format(\"display = %s, battery = %d\", df.format(this.display).replace(',','.'), this.battery);\n}\n\n//ts\ntoString(): string {\n    // o typescript usa o modelo crase ${} para string de substitui\u00e7\u00e3o\n    return `display = ${this.display.toFixed(2)}, battery = ${this.battery}`;\n}\n\n//cpp\nstd::string str() const {\n    std::stringstream ss;\n    ss << std::fixed << std::setprecision(2) << \"display = \" << this->display << \", battery = \" << this->battery;\n    return ss.str();\n}\n\n```\n\n## Shell\n\n### Primeira simula\u00e7\u00e3o\n\n```bash\n#TEST_CASE iniciar mostrar e recarregar\n\n$init 5\n$show\ndisplay = 0.00, battery = 0\n\n```\n\n```bash\n#TEST_CASE charge\n\n$charge 3\n$show\ndisplay = 0.00, battery = 3\n$charge 1\n$show\ndisplay = 0.00, battery = 4\n```\n\n```bash\n#TEST_CASE boundary\n\n$charge 2\n$show\ndisplay = 0.00, battery = 5\n```\n\n```bash\n#TEST_CASE reset\n\n$init 4\n$charge 2\n$show\ndisplay = 0.00, battery = 2\n$charge 3\n$show\ndisplay = 0.00, battery = 4\n\n```\n\n```bash\n$end\n```\n\n### Segunda simula\u00e7\u00e3o\n\n```bash\n#TEST_CASE somando\n\n$init 2\n$charge 2\n$sum 4 3\n$show\ndisplay = 7.00, battery = 1\n```\n\n```bash\n#TEST_CASE gastando bateria\n\n$sum 2 3\n$show\ndisplay = 5.00, battery = 0\n```\n\n```bash\n#TEST_CASE sem bateria\n\n$sum -4 -1\nfail: bateria insuficiente\n```\n\n```bash\n#TEST_CASE recarregando\n\n$charge 1\n$show\ndisplay = 5.00, battery = 1\n$sum -4 -2\n$show\ndisplay = -6.00, battery = 0\n```\n\n```bash\n$end\n```\n\n### Terceira simula\u00e7\u00e3o\n\n```bash\n#TEST_CASE dividindo\n\n$init 3\n$charge 3\n$div 6 3\n$show\ndisplay = 2.00, battery = 2\n```\n\n```bash\n#TEST_CASE dividindo por zero gastando bateria\n\n$div 7 0\nfail: divisao por zero\n$show\ndisplay = 2.00, battery = 1\n```\n\n```bash\n#TEST_CASE gastando bateria\n\n$div 7 2\n$div 10 2\nfail: bateria insuficiente\n$show\ndisplay = 3.50, battery = 0\n```\n\n```bash\n$end\n```\n\n## Draft\n\n<!-- links .cache/draft -->\n- cpp\n  - [shell.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/calculadora/.cache/draft/cpp/shell.cpp)\n- java\n  - [Shell.java](https://github.com/qxcodepoo/arcade/blob/master/base/calculadora/.cache/draft/java/Shell.java)\n- ts\n  - [shell.ts](https://github.com/qxcodepoo/arcade/blob/master/base/calculadora/.cache/draft/ts/shell.ts)\n<!-- links -->\n\n## Cheat\n\n<!-- links .cache/cheat -->\n- cpp\n  - [shell.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/calculadora/.cache/cheat/cpp/shell.cpp)\n- java\n  - [Shell.java](https://github.com/qxcodepoo/arcade/blob/master/base/calculadora/.cache/cheat/java/Shell.java)\n- ts\n  - [shell.ts](https://github.com/qxcodepoo/arcade/blob/master/base/calculadora/.cache/cheat/ts/shell.ts)\n<!-- links -->\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT iniciar mostrar e recarregar\ninit 5\nshow\nend\n======== EXPECT\n$init 5\n$show\ndisplay = 0.00, battery = 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT charge\ninit 5\nshow\ncharge 3\nshow\ncharge 1\nshow\nend\n======== EXPECT\n$init 5\n$show\ndisplay = 0.00, battery = 0\n$charge 3\n$show\ndisplay = 0.00, battery = 3\n$charge 1\n$show\ndisplay = 0.00, battery = 4\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT boundary\ninit 5\nshow\ncharge 3\nshow\ncharge 1\nshow\ncharge 2\nshow\nend\n======== EXPECT\n$init 5\n$show\ndisplay = 0.00, battery = 0\n$charge 3\n$show\ndisplay = 0.00, battery = 3\n$charge 1\n$show\ndisplay = 0.00, battery = 4\n$charge 2\n$show\ndisplay = 0.00, battery = 5\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT reset\ninit 5\nshow\ncharge 3\nshow\ncharge 1\nshow\ncharge 2\nshow\ninit 4\ncharge 2\nshow\ncharge 3\nshow\nend\n======== EXPECT\n$init 5\n$show\ndisplay = 0.00, battery = 0\n$charge 3\n$show\ndisplay = 0.00, battery = 3\n$charge 1\n$show\ndisplay = 0.00, battery = 4\n$charge 2\n$show\ndisplay = 0.00, battery = 5\n$init 4\n$charge 2\n$show\ndisplay = 0.00, battery = 2\n$charge 3\n$show\ndisplay = 0.00, battery = 4\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT somando\ninit 2\ncharge 2\nsum 4 3\nshow\nend\n======== EXPECT\n$init 2\n$charge 2\n$sum 4 3\n$show\ndisplay = 7.00, battery = 1\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT gastando bateria\ninit 2\ncharge 2\nsum 4 3\nshow\nsum 2 3\nshow\nend\n======== EXPECT\n$init 2\n$charge 2\n$sum 4 3\n$show\ndisplay = 7.00, battery = 1\n$sum 2 3\n$show\ndisplay = 5.00, battery = 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT sem bateria\ninit 2\ncharge 2\nsum 4 3\nshow\nsum 2 3\nshow\nsum -4 -1\nend\n======== EXPECT\n$init 2\n$charge 2\n$sum 4 3\n$show\ndisplay = 7.00, battery = 1\n$sum 2 3\n$show\ndisplay = 5.00, battery = 0\n$sum -4 -1\nfail: bateria insuficiente\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT recarregando\ninit 2\ncharge 2\nsum 4 3\nshow\nsum 2 3\nshow\nsum -4 -1\ncharge 1\nshow\nsum -4 -2\nshow\nend\n======== EXPECT\n$init 2\n$charge 2\n$sum 4 3\n$show\ndisplay = 7.00, battery = 1\n$sum 2 3\n$show\ndisplay = 5.00, battery = 0\n$sum -4 -1\nfail: bateria insuficiente\n$charge 1\n$show\ndisplay = 5.00, battery = 1\n$sum -4 -2\n$show\ndisplay = -6.00, battery = 0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dividindo\ninit 3\ncharge 3\ndiv 6 3\nshow\nend\n======== EXPECT\n$init 3\n$charge 3\n$div 6 3\n$show\ndisplay = 2.00, battery = 2\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dividindo por zero gastando bateria\ninit 3\ncharge 3\ndiv 6 3\nshow\ndiv 7 0\nshow\nend\n======== EXPECT\n$init 3\n$charge 3\n$div 6 3\n$show\ndisplay = 2.00, battery = 2\n$div 7 0\nfail: divisao por zero\n$show\ndisplay = 2.00, battery = 1\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT gastando bateria\ninit 3\ncharge 3\ndiv 6 3\nshow\ndiv 7 0\nshow\ndiv 7 2\ndiv 10 2\nshow\nend\n======== EXPECT\n$init 3\n$charge 3\n$div 6 3\n$show\ndisplay = 2.00, battery = 2\n$div 7 0\nfail: divisao por zero\n$show\ndisplay = 2.00, battery = 1\n$div 7 2\n$div 10 2\nfail: bateria insuficiente\n$show\ndisplay = 3.50, battery = 0\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "function input() { return \"\"; }\nexport {};\n\nfunction main() {\n    // let calc = new Calculator(0);\n\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(\" \");\n        const cmd = par[0];\n        if (cmd == \"end\") {\n            break;\n        } \n        else if (cmd == \"init\") {\n            // CHAME O CONSTRUTOR AQUI\n            // const batteryMax = parseInt(par[1]);\n        } \n        else if (cmd == \"charge\") {\n            // RECARREGAR A BATERIA\n            // const value = parseInt(par[1]);\n        } \n        else if (cmd == \"sum\") {\n            // SOMAR\n            // const a = parseInt(par[1]);\n            // const b = parseInt(par[2]);\n        } \n        else if (cmd == \"div\") {\n            // DIVIDIR\n            // const num = parseInt(par[1]);\n            // const den = parseInt(par[2]);\n        } \n        else if (cmd == \"show\") {\n            // MOSTRAR\n        } \n        else {\n            console.log(\"fail: comando invalido\");\n        }\n    }\n}\n\nmain()\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.*;\nimport java.text.DecimalFormat;\n\n\npublic class Shell {\n\n    public static void main(String[] args) {\n        // Calculator calculator = new Calculator(0);\n        \n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"init\")) {\n                // CHAME O CONSTRUTOR\n                // int batteryMax = Integer.parseInt(par[1]);\n            } \n            else if (cmd.equals(\"show\")) {\n                // MOSTRAR\n            } \n            else if (cmd.equals(\"charge\")) {\n                // RECARREGAR A BATERIA\n                // int value = Integer.parseInt(par[1]);\n            } \n            else if (cmd.equals(\"sum\")) {\n                // SOMAR\n                // int a = Integer.parseInt(par[1]);\n                // int b = Integer.parseInt(par[2]);\n            } \n            else if (cmd.equals(\"div\")) {\n                // DIVIDIR\n                // int num = Integer.parseInt(par[1]);\n                // int den = Integer.parseInt(par[2]);\n            } \n            else {\n                System.out.println(\"fail: comando invalido\");\n            }\n        }\n    }\n\n    private static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream> // fixed, cout, endl, string\n#include <sstream> // stringstream\n#include <iomanip> // setprecision\nusing namespace std;\n\nint main() {\n    // CRIE SUA CALCULADORA AQUI\n\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << '\\n';\n\n        stringstream par(line);\n        par >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } \n        else if (cmd == \"init\") {\n            // SUBSTITUA A CALCULADORA UTILIZANDO O CONSTRUTOR\n            // int batteryMax {};\n            // par >> batteryMax;\n        } \n        else if (cmd == \"show\") {\n            // MOSTRE A CALCULADORA\n        } \n        else if (cmd == \"charge\") {\n            // RECARREGAR\n            // int increment {};\n            // par >> increment;\n        } \n        else if (cmd == \"sum\") {\n            // SOMAR\n            // int a {}, b {};\n            // par >> a >> b;\n        } \n        else if (cmd == \"div\") {\n            // DIVIDIR\n            // int num {}, den {};\n            // par >> num >> den;\n        } \n        else {\n            cout << \"fail: comando invalido\" << endl;\n        }\n    }\n\n\n}\n",
                "type": "show"
            }
        ]
    }
}
