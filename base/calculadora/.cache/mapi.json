{
    "title": "Cuidado com a bateria da @calculadora",
    "description": "# Cuidado com a bateria da @calculadora\n\n<!-- toch -->\n[Intro](#intro) | [Draft](#draft) | [Guide](#guide) | [Shell](#shell)\n-- | -- | -- | --\n<!-- toch -->\n\n![cover](cover.jpg)\n\nO objetivo dessa atividade \u00e9 implementar uma calculadora a bateria. Se h\u00e1 bateria, ela executa opera\u00e7\u00f5es de soma, multiplica\u00e7\u00e3o e divis\u00e3o. \u00c9 poss\u00edvel tamb\u00e9m mostrar a quantidade de bateria e recarregar a calculadora. Ela avisa quando est\u00e1 sem bateria e se h\u00e1 tentativa de divis\u00e3o por 0.\n\n***\n\n## Intro\n\n- Mostrar bateria da calculadora.\n- Recarregar a bateria.\n- Realizar opera\u00e7\u00f5es matem\u00e1ticas de soma e divis\u00e3o.\n- Se o usu\u00e1rio tentar realizar opera\u00e7\u00f5es e a bateria estiver vazia, dever\u00e1 ser mostrada uma notifica\u00e7\u00e3o sobre falta de bateria.\n- Se for tentada divis\u00e3o por zero, deve ser notificado o erro.\n\n***\n\n## Draft\n\n<!-- draft -->\n- cpp\n  - [calculator.hpp](.cache/lang/cpp/calculator.hpp)\n  - [fn.hpp](.cache/lang/cpp/fn.hpp)\n  - [shell.cpp](.cache/lang/cpp/shell.cpp)\n- java\n  - [Calculator.java](.cache/lang/java/Calculator.java)\n  - [Shell.java](.cache/lang/java/Shell.java)\n- ts\n  - [shell.ts](.cache/lang/ts/shell.ts)\n\n<!-- draft -->\n\n## Guide\n\n![diagrama](diagrama.png)\n\n<!-- load diagrama.puml fenced=ts:filter -->\n\n```ts\nclass Calculator {\n\n  ' a bateria atual\n  + battery    : int\n\n  ' o m\u00e1ximo de bateria suportado\n  + batteryMax : int\n\n  ' guarda o resultado da \u00faltima opera\u00e7\u00e3o\n  + display    : float\n  __\n\n  ' inicia os atributos batteryMax utilizando o parametro passado\n  ' battery e display come\u00e7am com o zero\n  + Calculator(batteryMax : int)\n\n  ' aumenta a bateria de value, por\u00e9m n\u00e3o al\u00e9m do m\u00e1ximo.\n  + charge(value : int)\n  \n  ' realiza a soma de dois n\u00famero e coloca o resultado no display\n  ' tenta gastar bateria usando o m\u00e9todo useBattery()\n  '   verifica o resultado do retorno\n  + sum(a : int, b : int)\n  \n  ' realiza a divis\u00e3o de dois n\u00fameros e armazena o resultado no display\n  ' tenta gastar bateria usando o m\u00e9todo useBattery()\n  '   verifica o resultado do retorno\n  ' verifica se n\u00e3o \u00e9 divis\u00e3o por zero\n  + division(num : int, den : int)\n  \n  ' tenta gastar uma unidade da bateria\n  '   emite um erro se n\u00e3o conseguir.\n  ' retorna se conseguiu gastar ou n\u00e3o.\n  + useBattery(): boolean\n  \n  ' retorna uma string com o formato\n  ' display = 0.00, bateria = 0\n  + toString(): string\n}\n\nclass Legenda {\n  + atributoPublic\n  - atributoPrivate\n  # atributoProtected\n  __\n  + m\u00e9todoPublic()\n  - m\u00e9todoPrivate()\n  # m\u00e9todoProtected()\n}\n\n```\n\n<!-- load -->\n\n***\n\n## Shell\n\n```bash\n#__case iniciar mostrar e recarregar\n# O comando \"$init M\" inicia uma calculadora passando por par\u00e2metro a bateria m\u00e1xima.\n# O comando \"$show\" mostra o valor da \u00faltima opera\u00e7\u00e3o bem sucedida no display e o estado da bateria\n# O comando \"$charge V\" recarrega a bateria de V\n$init 5\n$show\ndisplay = 0.00, battery = 0\n\n#__ case charge\n$charge 3\n$show\ndisplay = 0.00, battery = 3\n$charge 1\n$show\ndisplay = 0.00, battery = 4\n\n#__case boundary\n$charge 2\n$show\ndisplay = 0.00, battery = 5\n\n#__case reset\n$init 4\n$charge 2\n$show\ndisplay = 0.00, battery = 2\n$charge 3\n$show\ndisplay = 0.00, battery = 4\n$end\n```\n\n***\n\n```bash\n#__case somando\n$init 2\n$charge 2\n$sum 4 3\n$show\ndisplay = 7.00, battery = 1\n\n#__case gastando bateria\n$sum 2 3\n$show\ndisplay = 5.00, battery = 0\n\n#__case sem bateria\n$sum -4 -1\nfail: bateria insuficiente\n\n#__case recarregando\n$charge 1\n$show\ndisplay = 5.00, battery = 1\n$sum -4 -2\n$show\ndisplay = -6.00, battery = 0\n$end\n```\n\n***\n\n```bash\n#__case dividindo\n$init 3\n$charge 3\n$div 6 3\n$show\ndisplay = 2.00, battery = 2\n#__case dividindo por zero\n$div 7 0\nfail: divisao por zero\n\n#__case gastando bateria\n$show\ndisplay = 2.00, battery = 1\n$div 7 2\n$div 10 2\nfail: bateria insuficiente\n$show\ndisplay = 3.50, battery = 0\n$end\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> iniciar mostrar e recarregar\ninit 5\nshow\ncharge 3\nshow\ncharge 1\nshow\nend\n========\n$init 5\n$show\ndisplay = 0.00, battery = 0\n$charge 3\n$show\ndisplay = 0.00, battery = 3\n$charge 1\n$show\ndisplay = 0.00, battery = 4\n$end\n<<<<<<<<\n\n>>>>>>>> boundary\ninit 5\nshow\ncharge 3\nshow\ncharge 1\nshow\ncharge 2\nshow\nend\n========\n$init 5\n$show\ndisplay = 0.00, battery = 0\n$charge 3\n$show\ndisplay = 0.00, battery = 3\n$charge 1\n$show\ndisplay = 0.00, battery = 4\n$charge 2\n$show\ndisplay = 0.00, battery = 5\n$end\n<<<<<<<<\n\n>>>>>>>> reset\ninit 5\nshow\ncharge 3\nshow\ncharge 1\nshow\ncharge 2\nshow\ninit 4\ncharge 2\nshow\ncharge 3\nshow\nend\n========\n$init 5\n$show\ndisplay = 0.00, battery = 0\n$charge 3\n$show\ndisplay = 0.00, battery = 3\n$charge 1\n$show\ndisplay = 0.00, battery = 4\n$charge 2\n$show\ndisplay = 0.00, battery = 5\n$init 4\n$charge 2\n$show\ndisplay = 0.00, battery = 2\n$charge 3\n$show\ndisplay = 0.00, battery = 4\n$end\n<<<<<<<<\n\n>>>>>>>> somando\ninit 2\ncharge 2\nsum 4 3\nshow\nend\n========\n$init 2\n$charge 2\n$sum 4 3\n$show\ndisplay = 7.00, battery = 1\n$end\n<<<<<<<<\n\n>>>>>>>> gastando bateria\ninit 2\ncharge 2\nsum 4 3\nshow\nsum 2 3\nshow\nend\n========\n$init 2\n$charge 2\n$sum 4 3\n$show\ndisplay = 7.00, battery = 1\n$sum 2 3\n$show\ndisplay = 5.00, battery = 0\n$end\n<<<<<<<<\n\n>>>>>>>> sem bateria\ninit 2\ncharge 2\nsum 4 3\nshow\nsum 2 3\nshow\nsum -4 -1\nend\n========\n$init 2\n$charge 2\n$sum 4 3\n$show\ndisplay = 7.00, battery = 1\n$sum 2 3\n$show\ndisplay = 5.00, battery = 0\n$sum -4 -1\nfail: bateria insuficiente\n$end\n<<<<<<<<\n\n>>>>>>>> recarregando\ninit 2\ncharge 2\nsum 4 3\nshow\nsum 2 3\nshow\nsum -4 -1\ncharge 1\nshow\nsum -4 -2\nshow\nend\n========\n$init 2\n$charge 2\n$sum 4 3\n$show\ndisplay = 7.00, battery = 1\n$sum 2 3\n$show\ndisplay = 5.00, battery = 0\n$sum -4 -1\nfail: bateria insuficiente\n$charge 1\n$show\ndisplay = 5.00, battery = 1\n$sum -4 -2\n$show\ndisplay = -6.00, battery = 0\n$end\n<<<<<<<<\n\n>>>>>>>> dividindo\ninit 3\ncharge 3\ndiv 6 3\nshow\nend\n========\n$init 3\n$charge 3\n$div 6 3\n$show\ndisplay = 2.00, battery = 2\n$end\n<<<<<<<<\n\n>>>>>>>> dividindo por zero\ninit 3\ncharge 3\ndiv 6 3\nshow\ndiv 7 0\nend\n========\n$init 3\n$charge 3\n$div 6 3\n$show\ndisplay = 2.00, battery = 2\n$div 7 0\nfail: divisao por zero\n$end\n<<<<<<<<\n\n>>>>>>>> gastando bateria\ninit 3\ncharge 3\ndiv 6 3\nshow\ndiv 7 0\nshow\ndiv 7 2\ndiv 10 2\nshow\nend\n========\n$init 3\n$charge 3\n$div 6 3\n$show\ndisplay = 2.00, battery = 2\n$div 7 0\nfail: divisao por zero\n$show\ndisplay = 2.00, battery = 1\n$div 7 2\n$div 10 2\nfail: bateria insuficiente\n$show\ndisplay = 3.50, battery = 0\n$end\n<<<<<<<<\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "calculator.hpp",
                "contents": "#pragma once\n#include \"fn.hpp\"\n\nstruct Calculator {\n    int batteryMax;\n    int battery;\n    float display;\n\n    Calculator(int batteryMax) \n    {\n        (void) batteryMax;\n        //todo\n    }\n\n    void chargeBattery(int value) {\n        (void) value;\n        //todo\n    }\n\n    bool useBattery() {\n        return false;\n        //todo\n    }\n\n    void sum(int a, int b) {\n        (void) a;\n        (void) b;\n        //todo\n    }\n\n    void division(int num, int den) {\n        (void) num;\n        (void) den;\n        //todo\n    }\n    std::string str() const {\n        return fn::format(\"display = {%.2f}, battery = {}\", this->display, this->battery); \n    }\n};\n\nstd::ostream& operator<<(std::ostream& os, const Calculator& c) {\n    return (os << c.str());\n}",
                "encoding": 0
            },
            {
                "name": "fn.hpp",
                "contents": "#pragma once\n\n#include <iostream>\n#include <sstream>\n#include <iomanip>\n#include <array>\n#include <set>\n#include <map>\n#include <vector>\n#include <list>\n#include <unordered_map>\n#include <unordered_set>\n#include <memory>\n\nnamespace fn {\n\nusing str_view = std::string_view;\n",
                "encoding": 0
            },
            {
                "name": "shell.cpp",
                "contents": "#include \"fn.hpp\" // https://raw.githubusercontent.com/senapk/cppaux/master/fn.hpp\n#include \"calculator.hpp\"\n\nint main() {\n    Calculator c(0);\n\n    while(true) {\n        auto line = fn::input();\n        auto args = fn::split(line, ' ');\n        fn::write('$' + line);\n\n        if (args[0] == \"show\") {\n            fn::write(c);\n        }\n        else if (args[0] == \"init\") { \n            c = Calculator(+args[1]);\n        }\n        else if (args[0] == \"charge\") {\n            c.chargeBattery(+args[1]);\n        }\n        else if (args[0] == \"sum\") {\n            c.sum(+args[1], +args[2]);\n        }\n        else if (args[0] == \"div\") {\n            c.division(+args[1], +args[2]);\n        }\n        else if (args[0] == \"end\") {\n            break;\n        }\n        else {\n            fn::write(\"fail: comando inv\u00e1lido\"); \n        }\n    }\n}\n",
                "encoding": 0
            }
        ],
        "java": [
            {
                "name": "Calculator.java",
                "contents": "\nclass Calculator {\n    public int batteryMax;\n    public int battery;\n    public float display;\n\n    public Calculator(int batteryMax) {\n        //todo\n    }\n\n    public void chargeBattery(int value) {\n        //todo\n    }\n\n    public boolean useBattery() {\n        //todo\n        return false;\n    }\n\n    public void sum(int a, int b) {\n        //todo\n    }\n\n    public void division(int num, int den) {\n        //todo\n    }\n\n    public String toString() {\n        return String.format(\"display = %.2f, battery = %d\", this.display, this.battery);\n\n        // se seu java estiver utilizando `,` como separador decimal, use:\n        // DecimalFormat df = new DecimalFormat(\"0.00\");\n        // return String.format(\"display = %s, battery = %d\", df.format(this.display), this.battery);\n    }\n}",
                "encoding": 0
            },
            {
                "name": "Shell.java",
                "contents": "import java.util.*;\n\npublic class Shell {\n    static Calculator calc = new Calculator(0);\n\n    public static void main(String[] _args) {\n        while (true) {\n            String line = input();\n            String[] args = line.split(\" \");\n            write('$' + line);\n\n            if (\"show\".equals(args[0])) {\n                write(calc.toString());\n            }\n            else if (\"init\".equals(args[0])) {\n                calc = new Calculator((int) number(args[1]));\n            }\n            else if (\"charge\".equals(args[0])) {\n                calc.chargeBattery((int) number(args[1]));\n            }\n            else if (\"sum\".equals(args[0])) {\n                calc.sum((int) number(args[1]), (int) number(args[2]));\n            }\n            else if (\"div\".equals(args[0])) {\n                calc.division((int) number(args[1]), (int) number(args[2]));\n            }\n            else if (\"end\".equals(args[0])) {\n                break;\n            }\n            else {\n                write(\"fail: comando invalido\");\n            }\n        }\n    }\n\n    private static Scanner scanner = new Scanner(System.in);\n    private static String input() { return scanner.nextLine(); }\n    private static double number(String value) { return Double.parseDouble(value); }\n    private static void write(String value) { System.out.println(value); }\n}\n",
                "encoding": 0
            }
        ],
        "ts": [
            {
                "name": "shell.ts",
                "contents": "class Calculator {\n    batteryMax: number;\n    battery: number;\n    display: number;\n\n    constructor(batteryMax: number) {\n        //todo\n        this.display = 0;\n    }\n\n    chargeBattery(value: number): void {\n        //todo\n    }\n\n    useBattery(): boolean {\n        //todo: deixe pra fazer no final\n    }\n\n\n    sum(a: number, b: number): void { \n        //todo\n    }\n\n    division(num: number, den: number): void {\n        //todo\n    }\n\n    toString(): string {\n        return \"display = \" + this.display.toFixed(2) + \", battery = \" + this.battery;\n    }\n}\n\n\nlet _cin_ : string[] = [];\ntry { _cin_ = require(\"fs\").readFileSync(0).toString().split(/\\r?\\n/); } catch(e){}\nlet input = () : string => _cin_.length === 0 ? \"\" : _cin_.shift()!;\nlet write = (text: any, end:string=\"\\n\")=> process.stdout.write(\"\" + text + end);\n\n\nfunction main() {\n    let calc = new Calculator(0);\n\n    while (true) {\n        let line = input();\n        let args = line.split(\" \");\n        write(\"$\" + line);\n        \n        if (args[0] == \"show\") {\n            write(\"\" + calc);\n        }\n        else if (args[0] == \"init\") {\n            calc = new Calculator(+args[1]);\n        }\n        else if (args[0] == \"charge\") {\n            calc.chargeBattery(+args[1]);\n        }\n        else if (args[0] == \"sum\") {\n            calc.sum(+args[1], +args[2]);\n        }\n        else if (args[0] == \"div\") {\n            calc.division(+args[1], +args[2]);\n        }\n        else if (args[0] === \"end\") {\n            break;\n        }\n        else {\n            write(\"fail: comando n\u00e3o encontrado\");\n        }\n    }\n}\n\nmain()",
                "encoding": 0
            }
        ]
    }
}
