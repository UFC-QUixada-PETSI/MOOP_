{
    "title": "@notebook: Notebook com carregador e bateria",
    "description": "# Notebook com carregador e bateria\n\n<!-- toch -->\n[Guide](#guide)\n--\n<!-- toch -->\n\n![_](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/notebook/cover.jpg)\n\n## Guide\n\n### Parte 1 - Apenas o notebook\n\n- Vamos modelar um notebook que pode ser ligado e desligado.\n- Crie a classe Notebook com os m\u00e9todos `ligar` e `desligar`.\n- Crie o m\u00e9todo `mostrar` que exibe o status do notebook.\n- Crie um atributo `ligado` que indica se o notebook est\u00e1 ligado ou desligado.\n- Coloque os atributos como privados e crie m\u00e9todos para acess\u00e1-los e modific\u00e1-los.\n- Crie o m\u00e9todo `usar(tempo)` que exibe uma mensagem de uso do notebook por um tempo.\n- Crie um c\u00f3digo de teste como o teste abaixo.\n\n```python\n\nclass Notebook:\n    def __init__(self): # isso \u00e9 o construtor em python\n        self.__ligado: bool = False # ligado \u00e9 atributo privado e inicializa com false\n    # preencha com os m\u00e9todos necess\u00e1rios\n\nnotebook = Notebook() # criando notebook\nnotebook.mostrar()    # msg: Status: Desligado\nnotebook.usar(10)     # msg: erro: ligue o notebook primeiro\nnotebook.ligar()      # msg: notebook ligado\nnotebook.mostrar()    # msg: Status: Ligado\nnotebook.usar(10)     # msg: Usando por 10 minutos\nnotebook.desligar()   # msg: notebook desligado\n```\n\n### Parte 2 - Notebook com bateria\n\n- Nosso notebook vai ser modificado para ter um atributo `bateria`.\n- Esse atributo pode conter uma inst\u00e2ncia de uma bateria ou `null` se n\u00e3o houver bateria.\n- A classe Bateria deve ter um atributo `carga` que indica a quantidade de carga.\n- A classe Bateria deve ter um atributo `capacidade` que indica a quantidade m\u00e1xima de carga.\n- Coloque os atributos como privados e crie m\u00e9todos para acess\u00e1-los e modific\u00e1-los.\n- Ao criar uma bateria, passe a capacidade como par\u00e2metro e inicialize a carga com a capacidade.\n- Para ligar o notebook, ele deve ter uma bateria e a carga da bateria deve ser maior que 0.\n- Ao usar o notebook, a carga da bateria deve diminuir.\n- Se a carga da bateria for 0, o notebook deve desligar.\n- Crie um c\u00f3digo de teste como o teste abaixo.\n\n```python\nclass Bateria:\n    def __init__(self, capacidade):\n        self.__capacidade: int = capacidade # capacidade \u00e9 privado\n        self.__carga: int = capacidade      # carga \u00e9 privado e inicia com capacidade\n    # preencha com os m\u00e9todos necess\u00e1rios\n\nclass Notebook:\n    def __init__(self):\n        self.__ligado: bool = False           # inicializa desligado\n        self.__bateria: Bateria | None = None # inicializa sem bateria\n    # preencha com os m\u00e9todos necess\u00e1rios\n\nnotebook = Notebook() # criando notebook\nnotebook.mostrar()    # msg: Status: Desligado, Bateria: Nenhuma\nnotebook.usar(10)     # msg: erro: ligue o notebook primeiro\nnotebook.ligar()      # msg: n\u00e3o foi poss\u00edvel ligar\nnotebook.mostrar()    # msg: Status: Desligado, Bateria: Nenhuma\nbateira = Bateria(50) # criando bateria que suporta 50 minutos e come\u00e7a carregada\nbateira.mostrar()     # (50/50)\nnotebook.setBateria(bateria) # coloca a bateria no notebook\nnotebook.mostrar()    # msg: Status: Desligado, Bateria: (50/50)\nnotebook.usar(10)     # msg: notebook desligado\nnotebook.ligar()      # msg: notebook ligado\nnotebook.mostrar()    # msg: Status: Ligado, Bateria: (50/50)\nnotebook.usar(30)     # msb: Usando por 30 minutos\nnotebook.mostrar()    # msg: Status: Ligado, Bateria: (20/50)\nnotebook.usar(30)     # msb: Usando por 20 minutos, notebook descarregou\nnotebook.mostrar()    # msg: Status: Desligado, Bateria: (0/50)\nnotebook.ligar()      # msg: n\u00e3o foi poss\u00edvel ligar\nbateira = notebook.rmBateria() # msg: bateria removida\nbateira.mostrar()     # (0/50)\n```\n\n### Parte 3 - Notebook com carregador e bateria\n\n- Vamos modelar um notebook que pode ter ou n\u00e3o tanto carregador quanto bateria.\n- Ter\u00e1 que reescrever os m\u00e9todos `usar <tempo>`, `ligar`.\n- S\u00f3 poder\u00e1 `ligar` se tiver carga na bateria ou carregador.\n- Enquanto em uso\n  - se tiver apenas na bateria, a carga da bateria deve diminuir.\n  - se estiver na bateria e no carregador, a carga deve aumentar.\n- O carregador possui uma pot\u00eancia que implica na quantidade de carga carregada por unidade de tempo.\n- A bateria possui uma carga e uma capacidade que representam a carga atual e o m\u00e1ximo poss\u00edvel de carga.\n- Para simplificar, vamos utilizar minutos como a unidade de tempo e de carga.\n- Uma bateria `15/50` significa que possui ainda 15 minutos de carga e suporta no m\u00e1ximo 50.\n- Um carregador com 3 de pot\u00eancia consegue em um minuto de uso, adicionar 3 minutos de carga na bateria.\n- Para facilitar, voc\u00ea pode imaginar o notebook sendo utilizado da seguinte forma.\n- Adapte a implementa\u00e7\u00e3o para sua linguagem. Complete com os m\u00e9todos necess\u00e1rios.\n\n```python\nclass Bateria:\n    def __init__(self, capacidade):\n        self.__capacidade: int = capacidade\n        self.__carga: int = capacidade\n    # preencha com os m\u00e9todos necess\u00e1rios\n  \nclass Carregador:\n    def __init__(self, potencia):\n        self.__potencia: int = potencia\n    # preencha com os m\u00e9todos necess\u00e1rios\n\nclass Notebook:\n    def __init__(self):\n        self.__ligado: bool = False           # inicializa desligado\n        self.__bateria: Bateria | None = None # inicializa sem bateria\n        self.__carregador: Carregador | None = None # inicializa sem carregador\n    # preencha com os m\u00e9todos necess\u00e1rios\n\n\nnotebook = Notebook() # criando notebook\nnotebook.mostrar()    # msg: Status: Desligado, Bateria: Nenhuma, Carregador: Desconectado\nnotebook.ligar()      # msg: n\u00e3o foi poss\u00edvel ligar\nnotebook.usar(10)     # msg: notebook desligado\n\nbateria = Bateria(50) # criando bateria que suporta 50 minutos e come\u00e7a carregada\nbattery.mostrar()     # (50/50)\nnotebook.setBateria(bateria) # coloca a bateria no notebook\n\nnotebook.mostrar() # msg: Status: Desligado, Bateria: (50/50), Carregador: Desconectado\nnotebook.ligar()   # msg: notebook ligado\nnotebook.mostrar() # msg: Status: Ligado, Bateria: (50/50), Carregador: Desconectado\nnotebook.usar(30)  # msb: Usando por 30 minutos\nnotebook.mostrar() # msg: Status: Ligado, Bateria: (20/50), Carregador: Desconectado\nnotebook.usar(30)  # msb: Usando por 20 minutos, notebook descarregou\nnotebook.mostrar() # msg: Status: Desligado, Bateria: (0/50), Carregador: Desconectado\n\nbateria = notebook.rmBateria() # msg: bateria removida\nbateria.mostrar()  # (0/50)\nnotebook.mostrar() # msg: Status: Desligado, Bateria: Nenhuma, Carregador: Desconectado\n\ncarregador = Carregador(2) # criando carregador com 2 de potencia\ncarregador.mostrar() # (Pot\u00eancia 2)\n\nnotebook.setCarregador(carregador) # adicionando carregador no notebook\nnotebook.mostrar() # msg: Status: Desligado, Bateria: Nenhuma, Carregador: (Pot\u00eancia 2)\nnotebook.ligar()   # msg: notebook ligado\nnotebook.mostrar() # msg: Status: Ligado, Bateria: Nenhuma, Carregador: (Pot\u00eancia 2)\n\nnotebook.setBateria(bateria)\nnotebook.mostrar() # msg: Status: Ligado, Bateria: (0/50), Carregador: (Pot\u00eancia 2)\nnotebook.usar(10)  # msg: Notebook utilizado com sucesso\nnotebook.mostrar() # msg: Status: Ligado, Bateria: (20/50), Carregador: (Pot\u00eancia 2)\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "",
            "type": "hide"
        }
    ],
    "draft": {}
}
