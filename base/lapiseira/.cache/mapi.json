{
    "title": "@lapiseira: Lapiseira com m\u00faltiplos grafites",
    "description": "# Lapiseira com m\u00faltiplos grafites\n\n<!-- toch -->\n[Intro](#intro) | [Guide](#guide) | [Shell](#shell) | [Draft](#draft)\n-- | -- | -- | --\n<!-- toch -->\n\n![cover](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/lapiseira/cover.jpg)\n\nFa\u00e7a o modelo de uma lapiseira que pode conter v\u00e1rios.\n\n## Intro\n\n- Iniciar lapiseira\n  - Inicia uma lapiseira de determinado calibre sem grafite.\n  - Lapiseiras possuem um bico e um tambor.\n  - O bico guarda o grafite que est\u00e1 em uso.\n  - O tambor guarda os grafites reservas.\n- Inserir grafite\n  - Insere um grafite passando\n    - o calibre: float.\n    - a dureza: string.\n    - o tamanho em mm: int.\n  - N\u00e3o deve aceitar um grafite de calibre n\u00e3o compat\u00edvel.\n  - O grafite \u00e9 colocado como o \u00daLTIMO grafite do tambor.\n- Puxar grafite\n  - Puxa o grafite do tambor para o bico.\n  - Se j\u00e1 tiver um grafite no bico, esse precisa ser removido primeiro.\n- Remover grafite\n  - Retira o grafite do bico.\n- Escrever folha\n  - N\u00e3o \u00e9 poss\u00edvel escrever se n\u00e3o h\u00e1 grafite no bico.\n  - Quanto mais macio o grafite, mais rapidamente ele se acaba. Para simplificar, use a seguinte regra:\n    - Grafite HB: 1mm por folha.\n    - Grafite 2B: 2mm por folha.\n    - Grafite 4B: 4mm por folha.\n    - Grafite 6B: 6mm por folha.\n  - O \u00faltimo cent\u00edmetro de um grafite n\u00e3o pode ser aproveitado, quando o grafite estiver com 10mm, n\u00e3o \u00e9 mais poss\u00edvel escrever e o grafite deve ser retirado.\n  - Se n\u00e3o houver grafite suficiente para terminar a folha, avise que o texto ficou incompleto.\n\n## Guide\n\n![diagrama](https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/lapiseira/diagrama.png)\n\n## Shell\n\n```bash\n#TEST_CASE inserindo grafites\n$init 0.5\n$show\ncalibre: 0.5, bico: [], tambor: <>\n#TEST_CASE calibre errado\n$insert 0.7 2B 50\nfail: calibre incompat\u00edvel\n#TEST_CASE calibre certo\n$insert 0.5 2B 50\n$show\ncalibre: 0.5, bico: [], tambor: <[0.5:2B:50]>\n#TEST_CASE mais de um grafite\n$insert 0.5 2B 30\n$show\ncalibre: 0.5, bico: [], tambor: <[0.5:2B:50][0.5:2B:30]>\n#TEST_CASE puxando grafite\n$pull\n$show\ncalibre: 0.5, bico: [0.5:2B:50], tambor: <[0.5:2B:30]>\n#TEST_CASE puxando ocupado\n$pull\nfail: ja existe grafite no bico\n#TEST_CASE removendo do bico\n$remove\n$show\ncalibre: 0.5, bico: [], tambor: <[0.5:2B:30]>\n$end\n```\n\n___\n\n```bash\n#TEST_CASE escrevendo \n$init 0.9\n$insert 0.9 4B 14\n$insert 0.9 4B 16\n\n#TEST_CASE sem grafite no bico\n$write\nfail: nao existe grafite no bico\n\n#TEST_CASE puxando grafite\n$pull\n$show\ncalibre: 0.9, bico: [0.9:4B:14], tambor: <[0.9:4B:16]>\n\n#TEST_CASE gastando grafite\n$write\n$show\ncalibre: 0.9, bico: [0.9:4B:10], tambor: <[0.9:4B:16]>\n\n#TEST_CASE puxando novo\n$remove\n$pull\n$show\ncalibre: 0.9, bico: [0.9:4B:16], tambor: <>\n$write\n$show\ncalibre: 0.9, bico: [0.9:4B:12], tambor: <>\n\n#TEST_CASE folha incompleta\n$write\nfail: folha incompleta\n$show\ncalibre: 0.9, bico: [0.9:4B:10], tambor: <>\n\n#TEST_CASE tamanho insuficiente\n$write\nfail: tamanho insuficiente\n$end\n```\n\n## Draft\n\n<!-- links .cache/draft -->\n- cpp\n  - [shell.cpp](https://github.com/qxcodepoo/arcade/blob/master/base/lapiseira/.cache/draft/cpp/shell.cpp)\n- java\n  - [Shell.java](https://github.com/qxcodepoo/arcade/blob/master/base/lapiseira/.cache/draft/java/Shell.java)\n- ts\n  - [shell.ts](https://github.com/qxcodepoo/arcade/blob/master/base/lapiseira/.cache/draft/ts/shell.ts)\n<!-- links -->",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT inserindo grafites\ninit 0.5\nshow\nend\n======== EXPECT\n$init 0.5\n$show\ncalibre: 0.5, bico: [], tambor: <>\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT calibre errado\ninit 0.5\nshow\ninsert 0.7 2B 50\nend\n======== EXPECT\n$init 0.5\n$show\ncalibre: 0.5, bico: [], tambor: <>\n$insert 0.7 2B 50\nfail: calibre incompat\u00edvel\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT calibre certo\ninit 0.5\nshow\ninsert 0.7 2B 50\ninsert 0.5 2B 50\nshow\nend\n======== EXPECT\n$init 0.5\n$show\ncalibre: 0.5, bico: [], tambor: <>\n$insert 0.7 2B 50\nfail: calibre incompat\u00edvel\n$insert 0.5 2B 50\n$show\ncalibre: 0.5, bico: [], tambor: <[0.5:2B:50]>\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT mais de um grafite\ninit 0.5\nshow\ninsert 0.7 2B 50\ninsert 0.5 2B 50\nshow\ninsert 0.5 2B 30\nshow\nend\n======== EXPECT\n$init 0.5\n$show\ncalibre: 0.5, bico: [], tambor: <>\n$insert 0.7 2B 50\nfail: calibre incompat\u00edvel\n$insert 0.5 2B 50\n$show\ncalibre: 0.5, bico: [], tambor: <[0.5:2B:50]>\n$insert 0.5 2B 30\n$show\ncalibre: 0.5, bico: [], tambor: <[0.5:2B:50][0.5:2B:30]>\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT puxando grafite\ninit 0.5\nshow\ninsert 0.7 2B 50\ninsert 0.5 2B 50\nshow\ninsert 0.5 2B 30\nshow\npull\nshow\nend\n======== EXPECT\n$init 0.5\n$show\ncalibre: 0.5, bico: [], tambor: <>\n$insert 0.7 2B 50\nfail: calibre incompat\u00edvel\n$insert 0.5 2B 50\n$show\ncalibre: 0.5, bico: [], tambor: <[0.5:2B:50]>\n$insert 0.5 2B 30\n$show\ncalibre: 0.5, bico: [], tambor: <[0.5:2B:50][0.5:2B:30]>\n$pull\n$show\ncalibre: 0.5, bico: [0.5:2B:50], tambor: <[0.5:2B:30]>\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT puxando ocupado\ninit 0.5\nshow\ninsert 0.7 2B 50\ninsert 0.5 2B 50\nshow\ninsert 0.5 2B 30\nshow\npull\nshow\npull\nend\n======== EXPECT\n$init 0.5\n$show\ncalibre: 0.5, bico: [], tambor: <>\n$insert 0.7 2B 50\nfail: calibre incompat\u00edvel\n$insert 0.5 2B 50\n$show\ncalibre: 0.5, bico: [], tambor: <[0.5:2B:50]>\n$insert 0.5 2B 30\n$show\ncalibre: 0.5, bico: [], tambor: <[0.5:2B:50][0.5:2B:30]>\n$pull\n$show\ncalibre: 0.5, bico: [0.5:2B:50], tambor: <[0.5:2B:30]>\n$pull\nfail: ja existe grafite no bico\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT removendo do bico\ninit 0.5\nshow\ninsert 0.7 2B 50\ninsert 0.5 2B 50\nshow\ninsert 0.5 2B 30\nshow\npull\nshow\npull\nremove\nshow\nend\n======== EXPECT\n$init 0.5\n$show\ncalibre: 0.5, bico: [], tambor: <>\n$insert 0.7 2B 50\nfail: calibre incompat\u00edvel\n$insert 0.5 2B 50\n$show\ncalibre: 0.5, bico: [], tambor: <[0.5:2B:50]>\n$insert 0.5 2B 30\n$show\ncalibre: 0.5, bico: [], tambor: <[0.5:2B:50][0.5:2B:30]>\n$pull\n$show\ncalibre: 0.5, bico: [0.5:2B:50], tambor: <[0.5:2B:30]>\n$pull\nfail: ja existe grafite no bico\n$remove\n$show\ncalibre: 0.5, bico: [], tambor: <[0.5:2B:30]>\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT escrevendo \ninit 0.9\ninsert 0.9 4B 14\ninsert 0.9 4B 16\nend\n======== EXPECT\n$init 0.9\n$insert 0.9 4B 14\n$insert 0.9 4B 16\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT sem grafite no bico\ninit 0.9\ninsert 0.9 4B 14\ninsert 0.9 4B 16\nwrite\nend\n======== EXPECT\n$init 0.9\n$insert 0.9 4B 14\n$insert 0.9 4B 16\n$write\nfail: nao existe grafite no bico\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT puxando grafite\ninit 0.9\ninsert 0.9 4B 14\ninsert 0.9 4B 16\nwrite\npull\nshow\nend\n======== EXPECT\n$init 0.9\n$insert 0.9 4B 14\n$insert 0.9 4B 16\n$write\nfail: nao existe grafite no bico\n$pull\n$show\ncalibre: 0.9, bico: [0.9:4B:14], tambor: <[0.9:4B:16]>\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT gastando grafite\ninit 0.9\ninsert 0.9 4B 14\ninsert 0.9 4B 16\nwrite\npull\nshow\nwrite\nshow\nend\n======== EXPECT\n$init 0.9\n$insert 0.9 4B 14\n$insert 0.9 4B 16\n$write\nfail: nao existe grafite no bico\n$pull\n$show\ncalibre: 0.9, bico: [0.9:4B:14], tambor: <[0.9:4B:16]>\n$write\n$show\ncalibre: 0.9, bico: [0.9:4B:10], tambor: <[0.9:4B:16]>\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT puxando novo\ninit 0.9\ninsert 0.9 4B 14\ninsert 0.9 4B 16\nwrite\npull\nshow\nwrite\nshow\nremove\npull\nshow\nwrite\nshow\nend\n======== EXPECT\n$init 0.9\n$insert 0.9 4B 14\n$insert 0.9 4B 16\n$write\nfail: nao existe grafite no bico\n$pull\n$show\ncalibre: 0.9, bico: [0.9:4B:14], tambor: <[0.9:4B:16]>\n$write\n$show\ncalibre: 0.9, bico: [0.9:4B:10], tambor: <[0.9:4B:16]>\n$remove\n$pull\n$show\ncalibre: 0.9, bico: [0.9:4B:16], tambor: <>\n$write\n$show\ncalibre: 0.9, bico: [0.9:4B:12], tambor: <>\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT folha incompleta\ninit 0.9\ninsert 0.9 4B 14\ninsert 0.9 4B 16\nwrite\npull\nshow\nwrite\nshow\nremove\npull\nshow\nwrite\nshow\nwrite\nshow\nend\n======== EXPECT\n$init 0.9\n$insert 0.9 4B 14\n$insert 0.9 4B 16\n$write\nfail: nao existe grafite no bico\n$pull\n$show\ncalibre: 0.9, bico: [0.9:4B:14], tambor: <[0.9:4B:16]>\n$write\n$show\ncalibre: 0.9, bico: [0.9:4B:10], tambor: <[0.9:4B:16]>\n$remove\n$pull\n$show\ncalibre: 0.9, bico: [0.9:4B:16], tambor: <>\n$write\n$show\ncalibre: 0.9, bico: [0.9:4B:12], tambor: <>\n$write\nfail: folha incompleta\n$show\ncalibre: 0.9, bico: [0.9:4B:10], tambor: <>\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT tamanho insuficiente\ninit 0.9\ninsert 0.9 4B 14\ninsert 0.9 4B 16\nwrite\npull\nshow\nwrite\nshow\nremove\npull\nshow\nwrite\nshow\nwrite\nshow\nwrite\nend\n======== EXPECT\n$init 0.9\n$insert 0.9 4B 14\n$insert 0.9 4B 16\n$write\nfail: nao existe grafite no bico\n$pull\n$show\ncalibre: 0.9, bico: [0.9:4B:14], tambor: <[0.9:4B:16]>\n$write\n$show\ncalibre: 0.9, bico: [0.9:4B:10], tambor: <[0.9:4B:16]>\n$remove\n$pull\n$show\ncalibre: 0.9, bico: [0.9:4B:16], tambor: <>\n$write\n$show\ncalibre: 0.9, bico: [0.9:4B:12], tambor: <>\n$write\nfail: folha incompleta\n$show\ncalibre: 0.9, bico: [0.9:4B:10], tambor: <>\n$write\nfail: tamanho insuficiente\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\nfunction main() {\n\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(\" \");\n        const cmd = par[0];\n\n        if (cmd === \"end\") {\n            break;\n        }\n        else if (cmd === \"show\") { \n        }\n        else if (cmd === \"init\") { \n            // const thickness = parseFloat(par[1]);\n        }\n        else if (cmd === \"insert\") { \n            // const thickness = parseFloat(par[1]);\n            // const hardness = par[2];\n            // const size = parseInt(par[3]);\n        }\n        else if (cmd === \"remove\") { \n        }\n        else if (cmd === \"write\") { \n        }\n        else if (cmd === \"pull\") { \n        }\n        else {\n            console.log(\"fail: comando invalido\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.text.DecimalFormat;\nimport java.util.Scanner;\nimport java.util.ArrayList;\npublic class Shell {\n    public static void main(String[] _args) {\n\n        while(true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"show\")) { \n            } \n            else if (cmd.equals(\"init\")) { \n                // var thickness = Double.parseDouble(par[1]);\n            } \n            else if (cmd.equals(\"insert\")) { \n                // var thickness = Double.parseDouble(par[1]);\n                // var hardness = par[2];\n                // var size = Integer.parseInt(par[3]);\n            } \n            else if (cmd.equals(\"remove\")) { \n            } \n            else if (cmd.equals(\"show\")) { \n            } \n            else if (cmd.equals(\"write\")) { \n            } \n            else if (cmd.equals(\"pull\")) { \n            } \n            else {\n                System.out.println(\"fail: comando invalido\");\n            }\n        }\n    }\n\n    static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <list>\n#include <sstream>\n#include <memory>\nusing namespace std;\n\n// Fun\u00e7\u00e3o auxiliar para mapear e juntar elementos de um container\ntemplate <typename CONTAINER, typename FUNC>\nauto map_join(const CONTAINER& c, FUNC f, const string& sep = \", \") {\n    stringstream ss;\n    for (auto it = c.begin(); it != c.end(); ++it) {\n        ss << (it != c.begin() ? sep : \"\");\n        ss << f(*it);\n    }\n    return ss.str();\n}\n\nint main() {\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;  \n        }\n        else if (cmd == \"show\") { \n        } \n        else if (cmd == \"init\") { \n            // float calibre;\n            // ss >> calibre;\n        } \n        else if (cmd == \"insert\") { \n            // float calibre;\n            // string dureza;\n            // int tamanho;\n            // ss >> calibre >> dureza >> tamanho;\n        } \n        else if (cmd == \"remove\") { \n        } \n        else if (cmd == \"pull\") { \n        } \n        else if (cmd == \"write\") { \n        } \n        else {\n            cout << \"fail: comando invalido\\n\";\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
